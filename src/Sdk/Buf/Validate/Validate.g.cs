// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: buf/validate/validate.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Buf.Validate {

  /// <summary>Holder for reflection information generated from buf/validate/validate.proto</summary>
  public static partial class ValidateReflection {

    #region Descriptor
    /// <summary>File descriptor for buf/validate/validate.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ValidateReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChtidWYvdmFsaWRhdGUvdmFsaWRhdGUucHJvdG8SDGJ1Zi52YWxpZGF0ZRog",
            "Z29vZ2xlL3Byb3RvYnVmL2Rlc2NyaXB0b3IucHJvdG8aHmdvb2dsZS9wcm90",
            "b2J1Zi9kdXJhdGlvbi5wcm90bxofZ29vZ2xlL3Byb3RvYnVmL3RpbWVzdGFt",
            "cC5wcm90byJQCgRSdWxlEg4KAmlkGAEgASgJUgJpZBIYCgdtZXNzYWdlGAIg",
            "ASgJUgdtZXNzYWdlEh4KCmV4cHJlc3Npb24YAyABKAlSCmV4cHJlc3Npb24i",
            "UAoMTWVzc2FnZVJ1bGVzEhoKCGRpc2FibGVkGAEgASgIUghkaXNhYmxlZBIk",
            "CgNjZWwYAyADKAsyEi5idWYudmFsaWRhdGUuUnVsZVIDY2VsIigKCk9uZW9m",
            "UnVsZXMSGgoIcmVxdWlyZWQYASABKAhSCHJlcXVpcmVkIv0JCgpGaWVsZFJ1",
            "bGVzEiQKA2NlbBgXIAMoCzISLmJ1Zi52YWxpZGF0ZS5SdWxlUgNjZWwSGgoI",
            "cmVxdWlyZWQYGSABKAhSCHJlcXVpcmVkEiwKBmlnbm9yZRgbIAEoDjIULmJ1",
            "Zi52YWxpZGF0ZS5JZ25vcmVSBmlnbm9yZRIwCgVmbG9hdBgBIAEoCzIYLmJ1",
            "Zi52YWxpZGF0ZS5GbG9hdFJ1bGVzSABSBWZsb2F0EjMKBmRvdWJsZRgCIAEo",
            "CzIZLmJ1Zi52YWxpZGF0ZS5Eb3VibGVSdWxlc0gAUgZkb3VibGUSMAoFaW50",
            "MzIYAyABKAsyGC5idWYudmFsaWRhdGUuSW50MzJSdWxlc0gAUgVpbnQzMhIw",
            "CgVpbnQ2NBgEIAEoCzIYLmJ1Zi52YWxpZGF0ZS5JbnQ2NFJ1bGVzSABSBWlu",
            "dDY0EjMKBnVpbnQzMhgFIAEoCzIZLmJ1Zi52YWxpZGF0ZS5VSW50MzJSdWxl",
            "c0gAUgZ1aW50MzISMwoGdWludDY0GAYgASgLMhkuYnVmLnZhbGlkYXRlLlVJ",
            "bnQ2NFJ1bGVzSABSBnVpbnQ2NBIzCgZzaW50MzIYByABKAsyGS5idWYudmFs",
            "aWRhdGUuU0ludDMyUnVsZXNIAFIGc2ludDMyEjMKBnNpbnQ2NBgIIAEoCzIZ",
            "LmJ1Zi52YWxpZGF0ZS5TSW50NjRSdWxlc0gAUgZzaW50NjQSNgoHZml4ZWQz",
            "MhgJIAEoCzIaLmJ1Zi52YWxpZGF0ZS5GaXhlZDMyUnVsZXNIAFIHZml4ZWQz",
            "MhI2CgdmaXhlZDY0GAogASgLMhouYnVmLnZhbGlkYXRlLkZpeGVkNjRSdWxl",
            "c0gAUgdmaXhlZDY0EjkKCHNmaXhlZDMyGAsgASgLMhsuYnVmLnZhbGlkYXRl",
            "LlNGaXhlZDMyUnVsZXNIAFIIc2ZpeGVkMzISOQoIc2ZpeGVkNjQYDCABKAsy",
            "Gy5idWYudmFsaWRhdGUuU0ZpeGVkNjRSdWxlc0gAUghzZml4ZWQ2NBItCgRi",
            "b29sGA0gASgLMhcuYnVmLnZhbGlkYXRlLkJvb2xSdWxlc0gAUgRib29sEjMK",
            "BnN0cmluZxgOIAEoCzIZLmJ1Zi52YWxpZGF0ZS5TdHJpbmdSdWxlc0gAUgZz",
            "dHJpbmcSMAoFYnl0ZXMYDyABKAsyGC5idWYudmFsaWRhdGUuQnl0ZXNSdWxl",
            "c0gAUgVieXRlcxItCgRlbnVtGBAgASgLMhcuYnVmLnZhbGlkYXRlLkVudW1S",
            "dWxlc0gAUgRlbnVtEjkKCHJlcGVhdGVkGBIgASgLMhsuYnVmLnZhbGlkYXRl",
            "LlJlcGVhdGVkUnVsZXNIAFIIcmVwZWF0ZWQSKgoDbWFwGBMgASgLMhYuYnVm",
            "LnZhbGlkYXRlLk1hcFJ1bGVzSABSA21hcBIqCgNhbnkYFCABKAsyFi5idWYu",
            "dmFsaWRhdGUuQW55UnVsZXNIAFIDYW55EjkKCGR1cmF0aW9uGBUgASgLMhsu",
            "YnVmLnZhbGlkYXRlLkR1cmF0aW9uUnVsZXNIAFIIZHVyYXRpb24SPAoJdGlt",
            "ZXN0YW1wGBYgASgLMhwuYnVmLnZhbGlkYXRlLlRpbWVzdGFtcFJ1bGVzSABS",
            "CXRpbWVzdGFtcEIGCgR0eXBlSgQIGBAZSgQIGhAbUgdza2lwcGVkUgxpZ25v",
            "cmVfZW1wdHkiWAoPUHJlZGVmaW5lZFJ1bGVzEiQKA2NlbBgBIAMoCzISLmJ1",
            "Zi52YWxpZGF0ZS5SdWxlUgNjZWxKBAgYEBlKBAgaEBtSE3NraXBwZWRpZ25v",
            "cmVfZW1wdHkikBgKCkZsb2F0UnVsZXMSigEKBWNvbnN0GAEgASgCQnTCSHEK",
            "bwoLZmxvYXQuY29uc3QaYHRoaXMgIT0gZ2V0RmllbGQocnVsZXMsICdjb25z",
            "dCcpID8gJ3ZhbHVlIG11c3QgZXF1YWwgJXMnLmZvcm1hdChbZ2V0RmllbGQo",
            "cnVsZXMsICdjb25zdCcpXSkgOiAnJ1IFY29uc3QSowEKAmx0GAIgASgCQpAB",
            "wkiMAQqJAQoIZmxvYXQubHQafSFoYXMocnVsZXMuZ3RlKSAmJiAhaGFzKHJ1",
            "bGVzLmd0KSAmJiAodGhpcy5pc05hbigpIHx8IHRoaXMgPj0gcnVsZXMubHQp",
            "PyAndmFsdWUgbXVzdCBiZSBsZXNzIHRoYW4gJXMnLmZvcm1hdChbcnVsZXMu",
            "bHRdKSA6ICcnSABSAmx0ErQBCgNsdGUYAyABKAJCnwHCSJsBCpgBCglmbG9h",
            "dC5sdGUaigEhaGFzKHJ1bGVzLmd0ZSkgJiYgIWhhcyhydWxlcy5ndCkgJiYg",
            "KHRoaXMuaXNOYW4oKSB8fCB0aGlzID4gcnVsZXMubHRlKT8gJ3ZhbHVlIG11",
            "c3QgYmUgbGVzcyB0aGFuIG9yIGVxdWFsIHRvICVzJy5mb3JtYXQoW3J1bGVz",
            "Lmx0ZV0pIDogJydIAFIDbHRlEvMHCgJndBgEIAEoAkLgB8JI3AcKjQEKCGZs",
            "b2F0Lmd0GoABIWhhcyhydWxlcy5sdCkgJiYgIWhhcyhydWxlcy5sdGUpICYm",
            "ICh0aGlzLmlzTmFuKCkgfHwgdGhpcyA8PSBydWxlcy5ndCk/ICd2YWx1ZSBt",
            "dXN0IGJlIGdyZWF0ZXIgdGhhbiAlcycuZm9ybWF0KFtydWxlcy5ndF0pIDog",
            "JycKwwEKC2Zsb2F0Lmd0X2x0GrMBaGFzKHJ1bGVzLmx0KSAmJiBydWxlcy5s",
            "dCA+PSBydWxlcy5ndCAmJiAodGhpcy5pc05hbigpIHx8IHRoaXMgPj0gcnVs",
            "ZXMubHQgfHwgdGhpcyA8PSBydWxlcy5ndCk/ICd2YWx1ZSBtdXN0IGJlIGdy",
            "ZWF0ZXIgdGhhbiAlcyBhbmQgbGVzcyB0aGFuICVzJy5mb3JtYXQoW3J1bGVz",
            "Lmd0LCBydWxlcy5sdF0pIDogJycKzQEKFWZsb2F0Lmd0X2x0X2V4Y2x1c2l2",
            "ZRqzAWhhcyhydWxlcy5sdCkgJiYgcnVsZXMubHQgPCBydWxlcy5ndCAmJiAo",
            "dGhpcy5pc05hbigpIHx8IChydWxlcy5sdCA8PSB0aGlzICYmIHRoaXMgPD0g",
            "cnVsZXMuZ3QpKT8gJ3ZhbHVlIG11c3QgYmUgZ3JlYXRlciB0aGFuICVzIG9y",
            "IGxlc3MgdGhhbiAlcycuZm9ybWF0KFtydWxlcy5ndCwgcnVsZXMubHRdKSA6",
            "ICcnCtMBCgxmbG9hdC5ndF9sdGUawgFoYXMocnVsZXMubHRlKSAmJiBydWxl",
            "cy5sdGUgPj0gcnVsZXMuZ3QgJiYgKHRoaXMuaXNOYW4oKSB8fCB0aGlzID4g",
            "cnVsZXMubHRlIHx8IHRoaXMgPD0gcnVsZXMuZ3QpPyAndmFsdWUgbXVzdCBi",
            "ZSBncmVhdGVyIHRoYW4gJXMgYW5kIGxlc3MgdGhhbiBvciBlcXVhbCB0byAl",
            "cycuZm9ybWF0KFtydWxlcy5ndCwgcnVsZXMubHRlXSkgOiAnJwrdAQoWZmxv",
            "YXQuZ3RfbHRlX2V4Y2x1c2l2ZRrCAWhhcyhydWxlcy5sdGUpICYmIHJ1bGVz",
            "Lmx0ZSA8IHJ1bGVzLmd0ICYmICh0aGlzLmlzTmFuKCkgfHwgKHJ1bGVzLmx0",
            "ZSA8IHRoaXMgJiYgdGhpcyA8PSBydWxlcy5ndCkpPyAndmFsdWUgbXVzdCBi",
            "ZSBncmVhdGVyIHRoYW4gJXMgb3IgbGVzcyB0aGFuIG9yIGVxdWFsIHRvICVz",
            "Jy5mb3JtYXQoW3J1bGVzLmd0LCBydWxlcy5sdGVdKSA6ICcnSAFSAmd0Er8I",
            "CgNndGUYBSABKAJCqgjCSKYICpsBCglmbG9hdC5ndGUajQEhaGFzKHJ1bGVz",
            "Lmx0KSAmJiAhaGFzKHJ1bGVzLmx0ZSkgJiYgKHRoaXMuaXNOYW4oKSB8fCB0",
            "aGlzIDwgcnVsZXMuZ3RlKT8gJ3ZhbHVlIG11c3QgYmUgZ3JlYXRlciB0aGFu",
            "IG9yIGVxdWFsIHRvICVzJy5mb3JtYXQoW3J1bGVzLmd0ZV0pIDogJycK0gEK",
            "DGZsb2F0Lmd0ZV9sdBrBAWhhcyhydWxlcy5sdCkgJiYgcnVsZXMubHQgPj0g",
            "cnVsZXMuZ3RlICYmICh0aGlzLmlzTmFuKCkgfHwgdGhpcyA+PSBydWxlcy5s",
            "dCB8fCB0aGlzIDwgcnVsZXMuZ3RlKT8gJ3ZhbHVlIG11c3QgYmUgZ3JlYXRl",
            "ciB0aGFuIG9yIGVxdWFsIHRvICVzIGFuZCBsZXNzIHRoYW4gJXMnLmZvcm1h",
            "dChbcnVsZXMuZ3RlLCBydWxlcy5sdF0pIDogJycK3AEKFmZsb2F0Lmd0ZV9s",
            "dF9leGNsdXNpdmUawQFoYXMocnVsZXMubHQpICYmIHJ1bGVzLmx0IDwgcnVs",
            "ZXMuZ3RlICYmICh0aGlzLmlzTmFuKCkgfHwgKHJ1bGVzLmx0IDw9IHRoaXMg",
            "JiYgdGhpcyA8IHJ1bGVzLmd0ZSkpPyAndmFsdWUgbXVzdCBiZSBncmVhdGVy",
            "IHRoYW4gb3IgZXF1YWwgdG8gJXMgb3IgbGVzcyB0aGFuICVzJy5mb3JtYXQo",
            "W3J1bGVzLmd0ZSwgcnVsZXMubHRdKSA6ICcnCuIBCg1mbG9hdC5ndGVfbHRl",
            "GtABaGFzKHJ1bGVzLmx0ZSkgJiYgcnVsZXMubHRlID49IHJ1bGVzLmd0ZSAm",
            "JiAodGhpcy5pc05hbigpIHx8IHRoaXMgPiBydWxlcy5sdGUgfHwgdGhpcyA8",
            "IHJ1bGVzLmd0ZSk/ICd2YWx1ZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBvciBl",
            "cXVhbCB0byAlcyBhbmQgbGVzcyB0aGFuIG9yIGVxdWFsIHRvICVzJy5mb3Jt",
            "YXQoW3J1bGVzLmd0ZSwgcnVsZXMubHRlXSkgOiAnJwrsAQoXZmxvYXQuZ3Rl",
            "X2x0ZV9leGNsdXNpdmUa0AFoYXMocnVsZXMubHRlKSAmJiBydWxlcy5sdGUg",
            "PCBydWxlcy5ndGUgJiYgKHRoaXMuaXNOYW4oKSB8fCAocnVsZXMubHRlIDwg",
            "dGhpcyAmJiB0aGlzIDwgcnVsZXMuZ3RlKSk/ICd2YWx1ZSBtdXN0IGJlIGdy",
            "ZWF0ZXIgdGhhbiBvciBlcXVhbCB0byAlcyBvciBsZXNzIHRoYW4gb3IgZXF1",
            "YWwgdG8gJXMnLmZvcm1hdChbcnVsZXMuZ3RlLCBydWxlcy5sdGVdKSA6ICcn",
            "SAFSA2d0ZRKDAQoCaW4YBiADKAJCc8JIcApuCghmbG9hdC5pbhpiISh0aGlz",
            "IGluIGdldEZpZWxkKHJ1bGVzLCAnaW4nKSkgPyAndmFsdWUgbXVzdCBiZSBp",
            "biBsaXN0ICVzJy5mb3JtYXQoW2dldEZpZWxkKHJ1bGVzLCAnaW4nKV0pIDog",
            "JydSAmluEn0KBm5vdF9pbhgHIAMoAkJmwkhjCmEKDGZsb2F0Lm5vdF9pbhpR",
            "dGhpcyBpbiBydWxlcy5ub3RfaW4gPyAndmFsdWUgbXVzdCBub3QgYmUgaW4g",
            "bGlzdCAlcycuZm9ybWF0KFtydWxlcy5ub3RfaW5dKSA6ICcnUgVub3RJbhJ9",
            "CgZmaW5pdGUYCCABKAhCZcJIYgpgCgxmbG9hdC5maW5pdGUaUHJ1bGVzLmZp",
            "bml0ZSA/ICh0aGlzLmlzTmFuKCkgfHwgdGhpcy5pc0luZigpID8gJ3ZhbHVl",
            "IG11c3QgYmUgZmluaXRlJyA6ICcnKSA6ICcnUgZmaW5pdGUSNAoHZXhhbXBs",
            "ZRgJIAMoAkIawkgXChUKDWZsb2F0LmV4YW1wbGUaBHRydWVSB2V4YW1wbGUq",
            "CQjoBxCAgICAAkILCglsZXNzX3RoYW5CDgoMZ3JlYXRlcl90aGFuIqIYCgtE",
            "b3VibGVSdWxlcxKLAQoFY29uc3QYASABKAFCdcJIcgpwCgxkb3VibGUuY29u",
            "c3QaYHRoaXMgIT0gZ2V0RmllbGQocnVsZXMsICdjb25zdCcpID8gJ3ZhbHVl",
            "IG11c3QgZXF1YWwgJXMnLmZvcm1hdChbZ2V0RmllbGQocnVsZXMsICdjb25z",
            "dCcpXSkgOiAnJ1IFY29uc3QSpAEKAmx0GAIgASgBQpEBwkiNAQqKAQoJZG91",
            "YmxlLmx0Gn0haGFzKHJ1bGVzLmd0ZSkgJiYgIWhhcyhydWxlcy5ndCkgJiYg",
            "KHRoaXMuaXNOYW4oKSB8fCB0aGlzID49IHJ1bGVzLmx0KT8gJ3ZhbHVlIG11",
            "c3QgYmUgbGVzcyB0aGFuICVzJy5mb3JtYXQoW3J1bGVzLmx0XSkgOiAnJ0gA",
            "UgJsdBK1AQoDbHRlGAMgASgBQqABwkicAQqZAQoKZG91YmxlLmx0ZRqKASFo",
            "YXMocnVsZXMuZ3RlKSAmJiAhaGFzKHJ1bGVzLmd0KSAmJiAodGhpcy5pc05h",
            "bigpIHx8IHRoaXMgPiBydWxlcy5sdGUpPyAndmFsdWUgbXVzdCBiZSBsZXNz",
            "IHRoYW4gb3IgZXF1YWwgdG8gJXMnLmZvcm1hdChbcnVsZXMubHRlXSkgOiAn",
            "J0gAUgNsdGUS+AcKAmd0GAQgASgBQuUHwkjhBwqOAQoJZG91YmxlLmd0GoAB",
            "IWhhcyhydWxlcy5sdCkgJiYgIWhhcyhydWxlcy5sdGUpICYmICh0aGlzLmlz",
            "TmFuKCkgfHwgdGhpcyA8PSBydWxlcy5ndCk/ICd2YWx1ZSBtdXN0IGJlIGdy",
            "ZWF0ZXIgdGhhbiAlcycuZm9ybWF0KFtydWxlcy5ndF0pIDogJycKxAEKDGRv",
            "dWJsZS5ndF9sdBqzAWhhcyhydWxlcy5sdCkgJiYgcnVsZXMubHQgPj0gcnVs",
            "ZXMuZ3QgJiYgKHRoaXMuaXNOYW4oKSB8fCB0aGlzID49IHJ1bGVzLmx0IHx8",
            "IHRoaXMgPD0gcnVsZXMuZ3QpPyAndmFsdWUgbXVzdCBiZSBncmVhdGVyIHRo",
            "YW4gJXMgYW5kIGxlc3MgdGhhbiAlcycuZm9ybWF0KFtydWxlcy5ndCwgcnVs",
            "ZXMubHRdKSA6ICcnCs4BChZkb3VibGUuZ3RfbHRfZXhjbHVzaXZlGrMBaGFz",
            "KHJ1bGVzLmx0KSAmJiBydWxlcy5sdCA8IHJ1bGVzLmd0ICYmICh0aGlzLmlz",
            "TmFuKCkgfHwgKHJ1bGVzLmx0IDw9IHRoaXMgJiYgdGhpcyA8PSBydWxlcy5n",
            "dCkpPyAndmFsdWUgbXVzdCBiZSBncmVhdGVyIHRoYW4gJXMgb3IgbGVzcyB0",
            "aGFuICVzJy5mb3JtYXQoW3J1bGVzLmd0LCBydWxlcy5sdF0pIDogJycK1AEK",
            "DWRvdWJsZS5ndF9sdGUawgFoYXMocnVsZXMubHRlKSAmJiBydWxlcy5sdGUg",
            "Pj0gcnVsZXMuZ3QgJiYgKHRoaXMuaXNOYW4oKSB8fCB0aGlzID4gcnVsZXMu",
            "bHRlIHx8IHRoaXMgPD0gcnVsZXMuZ3QpPyAndmFsdWUgbXVzdCBiZSBncmVh",
            "dGVyIHRoYW4gJXMgYW5kIGxlc3MgdGhhbiBvciBlcXVhbCB0byAlcycuZm9y",
            "bWF0KFtydWxlcy5ndCwgcnVsZXMubHRlXSkgOiAnJwreAQoXZG91YmxlLmd0",
            "X2x0ZV9leGNsdXNpdmUawgFoYXMocnVsZXMubHRlKSAmJiBydWxlcy5sdGUg",
            "PCBydWxlcy5ndCAmJiAodGhpcy5pc05hbigpIHx8IChydWxlcy5sdGUgPCB0",
            "aGlzICYmIHRoaXMgPD0gcnVsZXMuZ3QpKT8gJ3ZhbHVlIG11c3QgYmUgZ3Jl",
            "YXRlciB0aGFuICVzIG9yIGxlc3MgdGhhbiBvciBlcXVhbCB0byAlcycuZm9y",
            "bWF0KFtydWxlcy5ndCwgcnVsZXMubHRlXSkgOiAnJ0gBUgJndBLECAoDZ3Rl",
            "GAUgASgBQq8IwkirCAqcAQoKZG91YmxlLmd0ZRqNASFoYXMocnVsZXMubHQp",
            "ICYmICFoYXMocnVsZXMubHRlKSAmJiAodGhpcy5pc05hbigpIHx8IHRoaXMg",
            "PCBydWxlcy5ndGUpPyAndmFsdWUgbXVzdCBiZSBncmVhdGVyIHRoYW4gb3Ig",
            "ZXF1YWwgdG8gJXMnLmZvcm1hdChbcnVsZXMuZ3RlXSkgOiAnJwrTAQoNZG91",
            "YmxlLmd0ZV9sdBrBAWhhcyhydWxlcy5sdCkgJiYgcnVsZXMubHQgPj0gcnVs",
            "ZXMuZ3RlICYmICh0aGlzLmlzTmFuKCkgfHwgdGhpcyA+PSBydWxlcy5sdCB8",
            "fCB0aGlzIDwgcnVsZXMuZ3RlKT8gJ3ZhbHVlIG11c3QgYmUgZ3JlYXRlciB0",
            "aGFuIG9yIGVxdWFsIHRvICVzIGFuZCBsZXNzIHRoYW4gJXMnLmZvcm1hdChb",
            "cnVsZXMuZ3RlLCBydWxlcy5sdF0pIDogJycK3QEKF2RvdWJsZS5ndGVfbHRf",
            "ZXhjbHVzaXZlGsEBaGFzKHJ1bGVzLmx0KSAmJiBydWxlcy5sdCA8IHJ1bGVz",
            "Lmd0ZSAmJiAodGhpcy5pc05hbigpIHx8IChydWxlcy5sdCA8PSB0aGlzICYm",
            "IHRoaXMgPCBydWxlcy5ndGUpKT8gJ3ZhbHVlIG11c3QgYmUgZ3JlYXRlciB0",
            "aGFuIG9yIGVxdWFsIHRvICVzIG9yIGxlc3MgdGhhbiAlcycuZm9ybWF0KFty",
            "dWxlcy5ndGUsIHJ1bGVzLmx0XSkgOiAnJwrjAQoOZG91YmxlLmd0ZV9sdGUa",
            "0AFoYXMocnVsZXMubHRlKSAmJiBydWxlcy5sdGUgPj0gcnVsZXMuZ3RlICYm",
            "ICh0aGlzLmlzTmFuKCkgfHwgdGhpcyA+IHJ1bGVzLmx0ZSB8fCB0aGlzIDwg",
            "cnVsZXMuZ3RlKT8gJ3ZhbHVlIG11c3QgYmUgZ3JlYXRlciB0aGFuIG9yIGVx",
            "dWFsIHRvICVzIGFuZCBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gJXMnLmZvcm1h",
            "dChbcnVsZXMuZ3RlLCBydWxlcy5sdGVdKSA6ICcnCu0BChhkb3VibGUuZ3Rl",
            "X2x0ZV9leGNsdXNpdmUa0AFoYXMocnVsZXMubHRlKSAmJiBydWxlcy5sdGUg",
            "PCBydWxlcy5ndGUgJiYgKHRoaXMuaXNOYW4oKSB8fCAocnVsZXMubHRlIDwg",
            "dGhpcyAmJiB0aGlzIDwgcnVsZXMuZ3RlKSk/ICd2YWx1ZSBtdXN0IGJlIGdy",
            "ZWF0ZXIgdGhhbiBvciBlcXVhbCB0byAlcyBvciBsZXNzIHRoYW4gb3IgZXF1",
            "YWwgdG8gJXMnLmZvcm1hdChbcnVsZXMuZ3RlLCBydWxlcy5sdGVdKSA6ICcn",
            "SAFSA2d0ZRKEAQoCaW4YBiADKAFCdMJIcQpvCglkb3VibGUuaW4aYiEodGhp",
            "cyBpbiBnZXRGaWVsZChydWxlcywgJ2luJykpID8gJ3ZhbHVlIG11c3QgYmUg",
            "aW4gbGlzdCAlcycuZm9ybWF0KFtnZXRGaWVsZChydWxlcywgJ2luJyldKSA6",
            "ICcnUgJpbhJ+CgZub3RfaW4YByADKAFCZ8JIZApiCg1kb3VibGUubm90X2lu",
            "GlF0aGlzIGluIHJ1bGVzLm5vdF9pbiA/ICd2YWx1ZSBtdXN0IG5vdCBiZSBp",
            "biBsaXN0ICVzJy5mb3JtYXQoW3J1bGVzLm5vdF9pbl0pIDogJydSBW5vdElu",
            "En4KBmZpbml0ZRgIIAEoCEJmwkhjCmEKDWRvdWJsZS5maW5pdGUaUHJ1bGVz",
            "LmZpbml0ZSA/ICh0aGlzLmlzTmFuKCkgfHwgdGhpcy5pc0luZigpID8gJ3Zh",
            "bHVlIG11c3QgYmUgZmluaXRlJyA6ICcnKSA6ICcnUgZmaW5pdGUSNQoHZXhh",
            "bXBsZRgJIAMoAUIbwkgYChYKDmRvdWJsZS5leGFtcGxlGgR0cnVlUgdleGFt",
            "cGxlKgkI6AcQgICAgAJCCwoJbGVzc190aGFuQg4KDGdyZWF0ZXJfdGhhbiK6",
            "FQoKSW50MzJSdWxlcxKKAQoFY29uc3QYASABKAVCdMJIcQpvCgtpbnQzMi5j",
            "b25zdBpgdGhpcyAhPSBnZXRGaWVsZChydWxlcywgJ2NvbnN0JykgPyAndmFs",
            "dWUgbXVzdCBlcXVhbCAlcycuZm9ybWF0KFtnZXRGaWVsZChydWxlcywgJ2Nv",
            "bnN0JyldKSA6ICcnUgVjb25zdBKOAQoCbHQYAiABKAVCfMJIeQp3CghpbnQz",
            "Mi5sdBprIWhhcyhydWxlcy5ndGUpICYmICFoYXMocnVsZXMuZ3QpICYmIHRo",
            "aXMgPj0gcnVsZXMubHQ/ICd2YWx1ZSBtdXN0IGJlIGxlc3MgdGhhbiAlcycu",
            "Zm9ybWF0KFtydWxlcy5sdF0pIDogJydIAFICbHQSoQEKA2x0ZRgDIAEoBUKM",
            "AcJIiAEKhQEKCWludDMyLmx0ZRp4IWhhcyhydWxlcy5ndGUpICYmICFoYXMo",
            "cnVsZXMuZ3QpICYmIHRoaXMgPiBydWxlcy5sdGU/ICd2YWx1ZSBtdXN0IGJl",
            "IGxlc3MgdGhhbiBvciBlcXVhbCB0byAlcycuZm9ybWF0KFtydWxlcy5sdGVd",
            "KSA6ICcnSABSA2x0ZRKbBwoCZ3QYBCABKAVCiAfCSIQHCnoKCGludDMyLmd0",
            "Gm4haGFzKHJ1bGVzLmx0KSAmJiAhaGFzKHJ1bGVzLmx0ZSkgJiYgdGhpcyA8",
            "PSBydWxlcy5ndD8gJ3ZhbHVlIG11c3QgYmUgZ3JlYXRlciB0aGFuICVzJy5m",
            "b3JtYXQoW3J1bGVzLmd0XSkgOiAnJwqzAQoLaW50MzIuZ3RfbHQaowFoYXMo",
            "cnVsZXMubHQpICYmIHJ1bGVzLmx0ID49IHJ1bGVzLmd0ICYmICh0aGlzID49",
            "IHJ1bGVzLmx0IHx8IHRoaXMgPD0gcnVsZXMuZ3QpPyAndmFsdWUgbXVzdCBi",
            "ZSBncmVhdGVyIHRoYW4gJXMgYW5kIGxlc3MgdGhhbiAlcycuZm9ybWF0KFty",
            "dWxlcy5ndCwgcnVsZXMubHRdKSA6ICcnCrsBChVpbnQzMi5ndF9sdF9leGNs",
            "dXNpdmUaoQFoYXMocnVsZXMubHQpICYmIHJ1bGVzLmx0IDwgcnVsZXMuZ3Qg",
            "JiYgKHJ1bGVzLmx0IDw9IHRoaXMgJiYgdGhpcyA8PSBydWxlcy5ndCk/ICd2",
            "YWx1ZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAlcyBvciBsZXNzIHRoYW4gJXMn",
            "LmZvcm1hdChbcnVsZXMuZ3QsIHJ1bGVzLmx0XSkgOiAnJwrDAQoMaW50MzIu",
            "Z3RfbHRlGrIBaGFzKHJ1bGVzLmx0ZSkgJiYgcnVsZXMubHRlID49IHJ1bGVz",
            "Lmd0ICYmICh0aGlzID4gcnVsZXMubHRlIHx8IHRoaXMgPD0gcnVsZXMuZ3Qp",
            "PyAndmFsdWUgbXVzdCBiZSBncmVhdGVyIHRoYW4gJXMgYW5kIGxlc3MgdGhh",
            "biBvciBlcXVhbCB0byAlcycuZm9ybWF0KFtydWxlcy5ndCwgcnVsZXMubHRl",
            "XSkgOiAnJwrLAQoWaW50MzIuZ3RfbHRlX2V4Y2x1c2l2ZRqwAWhhcyhydWxl",
            "cy5sdGUpICYmIHJ1bGVzLmx0ZSA8IHJ1bGVzLmd0ICYmIChydWxlcy5sdGUg",
            "PCB0aGlzICYmIHRoaXMgPD0gcnVsZXMuZ3QpPyAndmFsdWUgbXVzdCBiZSBn",
            "cmVhdGVyIHRoYW4gJXMgb3IgbGVzcyB0aGFuIG9yIGVxdWFsIHRvICVzJy5m",
            "b3JtYXQoW3J1bGVzLmd0LCBydWxlcy5sdGVdKSA6ICcnSAFSAmd0EugHCgNn",
            "dGUYBSABKAVC0wfCSM8HCogBCglpbnQzMi5ndGUaeyFoYXMocnVsZXMubHQp",
            "ICYmICFoYXMocnVsZXMubHRlKSAmJiB0aGlzIDwgcnVsZXMuZ3RlPyAndmFs",
            "dWUgbXVzdCBiZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gJXMnLmZvcm1h",
            "dChbcnVsZXMuZ3RlXSkgOiAnJwrCAQoMaW50MzIuZ3RlX2x0GrEBaGFzKHJ1",
            "bGVzLmx0KSAmJiBydWxlcy5sdCA+PSBydWxlcy5ndGUgJiYgKHRoaXMgPj0g",
            "cnVsZXMubHQgfHwgdGhpcyA8IHJ1bGVzLmd0ZSk/ICd2YWx1ZSBtdXN0IGJl",
            "IGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byAlcyBhbmQgbGVzcyB0aGFuICVz",
            "Jy5mb3JtYXQoW3J1bGVzLmd0ZSwgcnVsZXMubHRdKSA6ICcnCsoBChZpbnQz",
            "Mi5ndGVfbHRfZXhjbHVzaXZlGq8BaGFzKHJ1bGVzLmx0KSAmJiBydWxlcy5s",
            "dCA8IHJ1bGVzLmd0ZSAmJiAocnVsZXMubHQgPD0gdGhpcyAmJiB0aGlzIDwg",
            "cnVsZXMuZ3RlKT8gJ3ZhbHVlIG11c3QgYmUgZ3JlYXRlciB0aGFuIG9yIGVx",
            "dWFsIHRvICVzIG9yIGxlc3MgdGhhbiAlcycuZm9ybWF0KFtydWxlcy5ndGUs",
            "IHJ1bGVzLmx0XSkgOiAnJwrSAQoNaW50MzIuZ3RlX2x0ZRrAAWhhcyhydWxl",
            "cy5sdGUpICYmIHJ1bGVzLmx0ZSA+PSBydWxlcy5ndGUgJiYgKHRoaXMgPiBy",
            "dWxlcy5sdGUgfHwgdGhpcyA8IHJ1bGVzLmd0ZSk/ICd2YWx1ZSBtdXN0IGJl",
            "IGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byAlcyBhbmQgbGVzcyB0aGFuIG9y",
            "IGVxdWFsIHRvICVzJy5mb3JtYXQoW3J1bGVzLmd0ZSwgcnVsZXMubHRlXSkg",
            "OiAnJwraAQoXaW50MzIuZ3RlX2x0ZV9leGNsdXNpdmUavgFoYXMocnVsZXMu",
            "bHRlKSAmJiBydWxlcy5sdGUgPCBydWxlcy5ndGUgJiYgKHJ1bGVzLmx0ZSA8",
            "IHRoaXMgJiYgdGhpcyA8IHJ1bGVzLmd0ZSk/ICd2YWx1ZSBtdXN0IGJlIGdy",
            "ZWF0ZXIgdGhhbiBvciBlcXVhbCB0byAlcyBvciBsZXNzIHRoYW4gb3IgZXF1",
            "YWwgdG8gJXMnLmZvcm1hdChbcnVsZXMuZ3RlLCBydWxlcy5sdGVdKSA6ICcn",
            "SAFSA2d0ZRKDAQoCaW4YBiADKAVCc8JIcApuCghpbnQzMi5pbhpiISh0aGlz",
            "IGluIGdldEZpZWxkKHJ1bGVzLCAnaW4nKSkgPyAndmFsdWUgbXVzdCBiZSBp",
            "biBsaXN0ICVzJy5mb3JtYXQoW2dldEZpZWxkKHJ1bGVzLCAnaW4nKV0pIDog",
            "JydSAmluEn0KBm5vdF9pbhgHIAMoBUJmwkhjCmEKDGludDMyLm5vdF9pbhpR",
            "dGhpcyBpbiBydWxlcy5ub3RfaW4gPyAndmFsdWUgbXVzdCBub3QgYmUgaW4g",
            "bGlzdCAlcycuZm9ybWF0KFtydWxlcy5ub3RfaW5dKSA6ICcnUgVub3RJbhI0",
            "CgdleGFtcGxlGAggAygFQhrCSBcKFQoNaW50MzIuZXhhbXBsZRoEdHJ1ZVIH",
            "ZXhhbXBsZSoJCOgHEICAgIACQgsKCWxlc3NfdGhhbkIOCgxncmVhdGVyX3Ro",
            "YW4iuhUKCkludDY0UnVsZXMSigEKBWNvbnN0GAEgASgDQnTCSHEKbwoLaW50",
            "NjQuY29uc3QaYHRoaXMgIT0gZ2V0RmllbGQocnVsZXMsICdjb25zdCcpID8g",
            "J3ZhbHVlIG11c3QgZXF1YWwgJXMnLmZvcm1hdChbZ2V0RmllbGQocnVsZXMs",
            "ICdjb25zdCcpXSkgOiAnJ1IFY29uc3QSjgEKAmx0GAIgASgDQnzCSHkKdwoI",
            "aW50NjQubHQaayFoYXMocnVsZXMuZ3RlKSAmJiAhaGFzKHJ1bGVzLmd0KSAm",
            "JiB0aGlzID49IHJ1bGVzLmx0PyAndmFsdWUgbXVzdCBiZSBsZXNzIHRoYW4g",
            "JXMnLmZvcm1hdChbcnVsZXMubHRdKSA6ICcnSABSAmx0EqEBCgNsdGUYAyAB",
            "KANCjAHCSIgBCoUBCglpbnQ2NC5sdGUaeCFoYXMocnVsZXMuZ3RlKSAmJiAh",
            "aGFzKHJ1bGVzLmd0KSAmJiB0aGlzID4gcnVsZXMubHRlPyAndmFsdWUgbXVz",
            "dCBiZSBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gJXMnLmZvcm1hdChbcnVsZXMu",
            "bHRlXSkgOiAnJ0gAUgNsdGUSmwcKAmd0GAQgASgDQogHwkiEBwp6CghpbnQ2",
            "NC5ndBpuIWhhcyhydWxlcy5sdCkgJiYgIWhhcyhydWxlcy5sdGUpICYmIHRo",
            "aXMgPD0gcnVsZXMuZ3Q/ICd2YWx1ZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAl",
            "cycuZm9ybWF0KFtydWxlcy5ndF0pIDogJycKswEKC2ludDY0Lmd0X2x0GqMB",
            "aGFzKHJ1bGVzLmx0KSAmJiBydWxlcy5sdCA+PSBydWxlcy5ndCAmJiAodGhp",
            "cyA+PSBydWxlcy5sdCB8fCB0aGlzIDw9IHJ1bGVzLmd0KT8gJ3ZhbHVlIG11",
            "c3QgYmUgZ3JlYXRlciB0aGFuICVzIGFuZCBsZXNzIHRoYW4gJXMnLmZvcm1h",
            "dChbcnVsZXMuZ3QsIHJ1bGVzLmx0XSkgOiAnJwq7AQoVaW50NjQuZ3RfbHRf",
            "ZXhjbHVzaXZlGqEBaGFzKHJ1bGVzLmx0KSAmJiBydWxlcy5sdCA8IHJ1bGVz",
            "Lmd0ICYmIChydWxlcy5sdCA8PSB0aGlzICYmIHRoaXMgPD0gcnVsZXMuZ3Qp",
            "PyAndmFsdWUgbXVzdCBiZSBncmVhdGVyIHRoYW4gJXMgb3IgbGVzcyB0aGFu",
            "ICVzJy5mb3JtYXQoW3J1bGVzLmd0LCBydWxlcy5sdF0pIDogJycKwwEKDGlu",
            "dDY0Lmd0X2x0ZRqyAWhhcyhydWxlcy5sdGUpICYmIHJ1bGVzLmx0ZSA+PSBy",
            "dWxlcy5ndCAmJiAodGhpcyA+IHJ1bGVzLmx0ZSB8fCB0aGlzIDw9IHJ1bGVz",
            "Lmd0KT8gJ3ZhbHVlIG11c3QgYmUgZ3JlYXRlciB0aGFuICVzIGFuZCBsZXNz",
            "IHRoYW4gb3IgZXF1YWwgdG8gJXMnLmZvcm1hdChbcnVsZXMuZ3QsIHJ1bGVz",
            "Lmx0ZV0pIDogJycKywEKFmludDY0Lmd0X2x0ZV9leGNsdXNpdmUasAFoYXMo",
            "cnVsZXMubHRlKSAmJiBydWxlcy5sdGUgPCBydWxlcy5ndCAmJiAocnVsZXMu",
            "bHRlIDwgdGhpcyAmJiB0aGlzIDw9IHJ1bGVzLmd0KT8gJ3ZhbHVlIG11c3Qg",
            "YmUgZ3JlYXRlciB0aGFuICVzIG9yIGxlc3MgdGhhbiBvciBlcXVhbCB0byAl",
            "cycuZm9ybWF0KFtydWxlcy5ndCwgcnVsZXMubHRlXSkgOiAnJ0gBUgJndBLo",
            "BwoDZ3RlGAUgASgDQtMHwkjPBwqIAQoJaW50NjQuZ3RlGnshaGFzKHJ1bGVz",
            "Lmx0KSAmJiAhaGFzKHJ1bGVzLmx0ZSkgJiYgdGhpcyA8IHJ1bGVzLmd0ZT8g",
            "J3ZhbHVlIG11c3QgYmUgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvICVzJy5m",
            "b3JtYXQoW3J1bGVzLmd0ZV0pIDogJycKwgEKDGludDY0Lmd0ZV9sdBqxAWhh",
            "cyhydWxlcy5sdCkgJiYgcnVsZXMubHQgPj0gcnVsZXMuZ3RlICYmICh0aGlz",
            "ID49IHJ1bGVzLmx0IHx8IHRoaXMgPCBydWxlcy5ndGUpPyAndmFsdWUgbXVz",
            "dCBiZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gJXMgYW5kIGxlc3MgdGhh",
            "biAlcycuZm9ybWF0KFtydWxlcy5ndGUsIHJ1bGVzLmx0XSkgOiAnJwrKAQoW",
            "aW50NjQuZ3RlX2x0X2V4Y2x1c2l2ZRqvAWhhcyhydWxlcy5sdCkgJiYgcnVs",
            "ZXMubHQgPCBydWxlcy5ndGUgJiYgKHJ1bGVzLmx0IDw9IHRoaXMgJiYgdGhp",
            "cyA8IHJ1bGVzLmd0ZSk/ICd2YWx1ZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBv",
            "ciBlcXVhbCB0byAlcyBvciBsZXNzIHRoYW4gJXMnLmZvcm1hdChbcnVsZXMu",
            "Z3RlLCBydWxlcy5sdF0pIDogJycK0gEKDWludDY0Lmd0ZV9sdGUawAFoYXMo",
            "cnVsZXMubHRlKSAmJiBydWxlcy5sdGUgPj0gcnVsZXMuZ3RlICYmICh0aGlz",
            "ID4gcnVsZXMubHRlIHx8IHRoaXMgPCBydWxlcy5ndGUpPyAndmFsdWUgbXVz",
            "dCBiZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gJXMgYW5kIGxlc3MgdGhh",
            "biBvciBlcXVhbCB0byAlcycuZm9ybWF0KFtydWxlcy5ndGUsIHJ1bGVzLmx0",
            "ZV0pIDogJycK2gEKF2ludDY0Lmd0ZV9sdGVfZXhjbHVzaXZlGr4BaGFzKHJ1",
            "bGVzLmx0ZSkgJiYgcnVsZXMubHRlIDwgcnVsZXMuZ3RlICYmIChydWxlcy5s",
            "dGUgPCB0aGlzICYmIHRoaXMgPCBydWxlcy5ndGUpPyAndmFsdWUgbXVzdCBi",
            "ZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gJXMgb3IgbGVzcyB0aGFuIG9y",
            "IGVxdWFsIHRvICVzJy5mb3JtYXQoW3J1bGVzLmd0ZSwgcnVsZXMubHRlXSkg",
            "OiAnJ0gBUgNndGUSgwEKAmluGAYgAygDQnPCSHAKbgoIaW50NjQuaW4aYiEo",
            "dGhpcyBpbiBnZXRGaWVsZChydWxlcywgJ2luJykpID8gJ3ZhbHVlIG11c3Qg",
            "YmUgaW4gbGlzdCAlcycuZm9ybWF0KFtnZXRGaWVsZChydWxlcywgJ2luJyld",
            "KSA6ICcnUgJpbhJ9CgZub3RfaW4YByADKANCZsJIYwphCgxpbnQ2NC5ub3Rf",
            "aW4aUXRoaXMgaW4gcnVsZXMubm90X2luID8gJ3ZhbHVlIG11c3Qgbm90IGJl",
            "IGluIGxpc3QgJXMnLmZvcm1hdChbcnVsZXMubm90X2luXSkgOiAnJ1IFbm90",
            "SW4SNAoHZXhhbXBsZRgJIAMoA0IawkgXChUKDWludDY0LmV4YW1wbGUaBHRy",
            "dWVSB2V4YW1wbGUqCQjoBxCAgICAAkILCglsZXNzX3RoYW5CDgoMZ3JlYXRl",
            "cl90aGFuIssVCgtVSW50MzJSdWxlcxKLAQoFY29uc3QYASABKA1CdcJIcgpw",
            "Cgx1aW50MzIuY29uc3QaYHRoaXMgIT0gZ2V0RmllbGQocnVsZXMsICdjb25z",
            "dCcpID8gJ3ZhbHVlIG11c3QgZXF1YWwgJXMnLmZvcm1hdChbZ2V0RmllbGQo",
            "cnVsZXMsICdjb25zdCcpXSkgOiAnJ1IFY29uc3QSjwEKAmx0GAIgASgNQn3C",
            "SHoKeAoJdWludDMyLmx0GmshaGFzKHJ1bGVzLmd0ZSkgJiYgIWhhcyhydWxl",
            "cy5ndCkgJiYgdGhpcyA+PSBydWxlcy5sdD8gJ3ZhbHVlIG11c3QgYmUgbGVz",
            "cyB0aGFuICVzJy5mb3JtYXQoW3J1bGVzLmx0XSkgOiAnJ0gAUgJsdBKiAQoD",
            "bHRlGAMgASgNQo0BwkiJAQqGAQoKdWludDMyLmx0ZRp4IWhhcyhydWxlcy5n",
            "dGUpICYmICFoYXMocnVsZXMuZ3QpICYmIHRoaXMgPiBydWxlcy5sdGU/ICd2",
            "YWx1ZSBtdXN0IGJlIGxlc3MgdGhhbiBvciBlcXVhbCB0byAlcycuZm9ybWF0",
            "KFtydWxlcy5sdGVdKSA6ICcnSABSA2x0ZRKgBwoCZ3QYBCABKA1CjQfCSIkH",
            "CnsKCXVpbnQzMi5ndBpuIWhhcyhydWxlcy5sdCkgJiYgIWhhcyhydWxlcy5s",
            "dGUpICYmIHRoaXMgPD0gcnVsZXMuZ3Q/ICd2YWx1ZSBtdXN0IGJlIGdyZWF0",
            "ZXIgdGhhbiAlcycuZm9ybWF0KFtydWxlcy5ndF0pIDogJycKtAEKDHVpbnQz",
            "Mi5ndF9sdBqjAWhhcyhydWxlcy5sdCkgJiYgcnVsZXMubHQgPj0gcnVsZXMu",
            "Z3QgJiYgKHRoaXMgPj0gcnVsZXMubHQgfHwgdGhpcyA8PSBydWxlcy5ndCk/",
            "ICd2YWx1ZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAlcyBhbmQgbGVzcyB0aGFu",
            "ICVzJy5mb3JtYXQoW3J1bGVzLmd0LCBydWxlcy5sdF0pIDogJycKvAEKFnVp",
            "bnQzMi5ndF9sdF9leGNsdXNpdmUaoQFoYXMocnVsZXMubHQpICYmIHJ1bGVz",
            "Lmx0IDwgcnVsZXMuZ3QgJiYgKHJ1bGVzLmx0IDw9IHRoaXMgJiYgdGhpcyA8",
            "PSBydWxlcy5ndCk/ICd2YWx1ZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAlcyBv",
            "ciBsZXNzIHRoYW4gJXMnLmZvcm1hdChbcnVsZXMuZ3QsIHJ1bGVzLmx0XSkg",
            "OiAnJwrEAQoNdWludDMyLmd0X2x0ZRqyAWhhcyhydWxlcy5sdGUpICYmIHJ1",
            "bGVzLmx0ZSA+PSBydWxlcy5ndCAmJiAodGhpcyA+IHJ1bGVzLmx0ZSB8fCB0",
            "aGlzIDw9IHJ1bGVzLmd0KT8gJ3ZhbHVlIG11c3QgYmUgZ3JlYXRlciB0aGFu",
            "ICVzIGFuZCBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gJXMnLmZvcm1hdChbcnVs",
            "ZXMuZ3QsIHJ1bGVzLmx0ZV0pIDogJycKzAEKF3VpbnQzMi5ndF9sdGVfZXhj",
            "bHVzaXZlGrABaGFzKHJ1bGVzLmx0ZSkgJiYgcnVsZXMubHRlIDwgcnVsZXMu",
            "Z3QgJiYgKHJ1bGVzLmx0ZSA8IHRoaXMgJiYgdGhpcyA8PSBydWxlcy5ndCk/",
            "ICd2YWx1ZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAlcyBvciBsZXNzIHRoYW4g",
            "b3IgZXF1YWwgdG8gJXMnLmZvcm1hdChbcnVsZXMuZ3QsIHJ1bGVzLmx0ZV0p",
            "IDogJydIAVICZ3QS7QcKA2d0ZRgFIAEoDULYB8JI1AcKiQEKCnVpbnQzMi5n",
            "dGUaeyFoYXMocnVsZXMubHQpICYmICFoYXMocnVsZXMubHRlKSAmJiB0aGlz",
            "IDwgcnVsZXMuZ3RlPyAndmFsdWUgbXVzdCBiZSBncmVhdGVyIHRoYW4gb3Ig",
            "ZXF1YWwgdG8gJXMnLmZvcm1hdChbcnVsZXMuZ3RlXSkgOiAnJwrDAQoNdWlu",
            "dDMyLmd0ZV9sdBqxAWhhcyhydWxlcy5sdCkgJiYgcnVsZXMubHQgPj0gcnVs",
            "ZXMuZ3RlICYmICh0aGlzID49IHJ1bGVzLmx0IHx8IHRoaXMgPCBydWxlcy5n",
            "dGUpPyAndmFsdWUgbXVzdCBiZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8g",
            "JXMgYW5kIGxlc3MgdGhhbiAlcycuZm9ybWF0KFtydWxlcy5ndGUsIHJ1bGVz",
            "Lmx0XSkgOiAnJwrLAQoXdWludDMyLmd0ZV9sdF9leGNsdXNpdmUarwFoYXMo",
            "cnVsZXMubHQpICYmIHJ1bGVzLmx0IDwgcnVsZXMuZ3RlICYmIChydWxlcy5s",
            "dCA8PSB0aGlzICYmIHRoaXMgPCBydWxlcy5ndGUpPyAndmFsdWUgbXVzdCBi",
            "ZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gJXMgb3IgbGVzcyB0aGFuICVz",
            "Jy5mb3JtYXQoW3J1bGVzLmd0ZSwgcnVsZXMubHRdKSA6ICcnCtMBCg51aW50",
            "MzIuZ3RlX2x0ZRrAAWhhcyhydWxlcy5sdGUpICYmIHJ1bGVzLmx0ZSA+PSBy",
            "dWxlcy5ndGUgJiYgKHRoaXMgPiBydWxlcy5sdGUgfHwgdGhpcyA8IHJ1bGVz",
            "Lmd0ZSk/ICd2YWx1ZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0",
            "byAlcyBhbmQgbGVzcyB0aGFuIG9yIGVxdWFsIHRvICVzJy5mb3JtYXQoW3J1",
            "bGVzLmd0ZSwgcnVsZXMubHRlXSkgOiAnJwrbAQoYdWludDMyLmd0ZV9sdGVf",
            "ZXhjbHVzaXZlGr4BaGFzKHJ1bGVzLmx0ZSkgJiYgcnVsZXMubHRlIDwgcnVs",
            "ZXMuZ3RlICYmIChydWxlcy5sdGUgPCB0aGlzICYmIHRoaXMgPCBydWxlcy5n",
            "dGUpPyAndmFsdWUgbXVzdCBiZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8g",
            "JXMgb3IgbGVzcyB0aGFuIG9yIGVxdWFsIHRvICVzJy5mb3JtYXQoW3J1bGVz",
            "Lmd0ZSwgcnVsZXMubHRlXSkgOiAnJ0gBUgNndGUShAEKAmluGAYgAygNQnTC",
            "SHEKbwoJdWludDMyLmluGmIhKHRoaXMgaW4gZ2V0RmllbGQocnVsZXMsICdp",
            "bicpKSA/ICd2YWx1ZSBtdXN0IGJlIGluIGxpc3QgJXMnLmZvcm1hdChbZ2V0",
            "RmllbGQocnVsZXMsICdpbicpXSkgOiAnJ1ICaW4SfgoGbm90X2luGAcgAygN",
            "QmfCSGQKYgoNdWludDMyLm5vdF9pbhpRdGhpcyBpbiBydWxlcy5ub3RfaW4g",
            "PyAndmFsdWUgbXVzdCBub3QgYmUgaW4gbGlzdCAlcycuZm9ybWF0KFtydWxl",
            "cy5ub3RfaW5dKSA6ICcnUgVub3RJbhI1CgdleGFtcGxlGAggAygNQhvCSBgK",
            "FgoOdWludDMyLmV4YW1wbGUaBHRydWVSB2V4YW1wbGUqCQjoBxCAgICAAkIL",
            "CglsZXNzX3RoYW5CDgoMZ3JlYXRlcl90aGFuIssVCgtVSW50NjRSdWxlcxKL",
            "AQoFY29uc3QYASABKARCdcJIcgpwCgx1aW50NjQuY29uc3QaYHRoaXMgIT0g",
            "Z2V0RmllbGQocnVsZXMsICdjb25zdCcpID8gJ3ZhbHVlIG11c3QgZXF1YWwg",
            "JXMnLmZvcm1hdChbZ2V0RmllbGQocnVsZXMsICdjb25zdCcpXSkgOiAnJ1IF",
            "Y29uc3QSjwEKAmx0GAIgASgEQn3CSHoKeAoJdWludDY0Lmx0GmshaGFzKHJ1",
            "bGVzLmd0ZSkgJiYgIWhhcyhydWxlcy5ndCkgJiYgdGhpcyA+PSBydWxlcy5s",
            "dD8gJ3ZhbHVlIG11c3QgYmUgbGVzcyB0aGFuICVzJy5mb3JtYXQoW3J1bGVz",
            "Lmx0XSkgOiAnJ0gAUgJsdBKiAQoDbHRlGAMgASgEQo0BwkiJAQqGAQoKdWlu",
            "dDY0Lmx0ZRp4IWhhcyhydWxlcy5ndGUpICYmICFoYXMocnVsZXMuZ3QpICYm",
            "IHRoaXMgPiBydWxlcy5sdGU/ICd2YWx1ZSBtdXN0IGJlIGxlc3MgdGhhbiBv",
            "ciBlcXVhbCB0byAlcycuZm9ybWF0KFtydWxlcy5sdGVdKSA6ICcnSABSA2x0",
            "ZRKgBwoCZ3QYBCABKARCjQfCSIkHCnsKCXVpbnQ2NC5ndBpuIWhhcyhydWxl",
            "cy5sdCkgJiYgIWhhcyhydWxlcy5sdGUpICYmIHRoaXMgPD0gcnVsZXMuZ3Q/",
            "ICd2YWx1ZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAlcycuZm9ybWF0KFtydWxl",
            "cy5ndF0pIDogJycKtAEKDHVpbnQ2NC5ndF9sdBqjAWhhcyhydWxlcy5sdCkg",
            "JiYgcnVsZXMubHQgPj0gcnVsZXMuZ3QgJiYgKHRoaXMgPj0gcnVsZXMubHQg",
            "fHwgdGhpcyA8PSBydWxlcy5ndCk/ICd2YWx1ZSBtdXN0IGJlIGdyZWF0ZXIg",
            "dGhhbiAlcyBhbmQgbGVzcyB0aGFuICVzJy5mb3JtYXQoW3J1bGVzLmd0LCBy",
            "dWxlcy5sdF0pIDogJycKvAEKFnVpbnQ2NC5ndF9sdF9leGNsdXNpdmUaoQFo",
            "YXMocnVsZXMubHQpICYmIHJ1bGVzLmx0IDwgcnVsZXMuZ3QgJiYgKHJ1bGVz",
            "Lmx0IDw9IHRoaXMgJiYgdGhpcyA8PSBydWxlcy5ndCk/ICd2YWx1ZSBtdXN0",
            "IGJlIGdyZWF0ZXIgdGhhbiAlcyBvciBsZXNzIHRoYW4gJXMnLmZvcm1hdChb",
            "cnVsZXMuZ3QsIHJ1bGVzLmx0XSkgOiAnJwrEAQoNdWludDY0Lmd0X2x0ZRqy",
            "AWhhcyhydWxlcy5sdGUpICYmIHJ1bGVzLmx0ZSA+PSBydWxlcy5ndCAmJiAo",
            "dGhpcyA+IHJ1bGVzLmx0ZSB8fCB0aGlzIDw9IHJ1bGVzLmd0KT8gJ3ZhbHVl",
            "IG11c3QgYmUgZ3JlYXRlciB0aGFuICVzIGFuZCBsZXNzIHRoYW4gb3IgZXF1",
            "YWwgdG8gJXMnLmZvcm1hdChbcnVsZXMuZ3QsIHJ1bGVzLmx0ZV0pIDogJycK",
            "zAEKF3VpbnQ2NC5ndF9sdGVfZXhjbHVzaXZlGrABaGFzKHJ1bGVzLmx0ZSkg",
            "JiYgcnVsZXMubHRlIDwgcnVsZXMuZ3QgJiYgKHJ1bGVzLmx0ZSA8IHRoaXMg",
            "JiYgdGhpcyA8PSBydWxlcy5ndCk/ICd2YWx1ZSBtdXN0IGJlIGdyZWF0ZXIg",
            "dGhhbiAlcyBvciBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gJXMnLmZvcm1hdChb",
            "cnVsZXMuZ3QsIHJ1bGVzLmx0ZV0pIDogJydIAVICZ3QS7QcKA2d0ZRgFIAEo",
            "BELYB8JI1AcKiQEKCnVpbnQ2NC5ndGUaeyFoYXMocnVsZXMubHQpICYmICFo",
            "YXMocnVsZXMubHRlKSAmJiB0aGlzIDwgcnVsZXMuZ3RlPyAndmFsdWUgbXVz",
            "dCBiZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gJXMnLmZvcm1hdChbcnVs",
            "ZXMuZ3RlXSkgOiAnJwrDAQoNdWludDY0Lmd0ZV9sdBqxAWhhcyhydWxlcy5s",
            "dCkgJiYgcnVsZXMubHQgPj0gcnVsZXMuZ3RlICYmICh0aGlzID49IHJ1bGVz",
            "Lmx0IHx8IHRoaXMgPCBydWxlcy5ndGUpPyAndmFsdWUgbXVzdCBiZSBncmVh",
            "dGVyIHRoYW4gb3IgZXF1YWwgdG8gJXMgYW5kIGxlc3MgdGhhbiAlcycuZm9y",
            "bWF0KFtydWxlcy5ndGUsIHJ1bGVzLmx0XSkgOiAnJwrLAQoXdWludDY0Lmd0",
            "ZV9sdF9leGNsdXNpdmUarwFoYXMocnVsZXMubHQpICYmIHJ1bGVzLmx0IDwg",
            "cnVsZXMuZ3RlICYmIChydWxlcy5sdCA8PSB0aGlzICYmIHRoaXMgPCBydWxl",
            "cy5ndGUpPyAndmFsdWUgbXVzdCBiZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwg",
            "dG8gJXMgb3IgbGVzcyB0aGFuICVzJy5mb3JtYXQoW3J1bGVzLmd0ZSwgcnVs",
            "ZXMubHRdKSA6ICcnCtMBCg51aW50NjQuZ3RlX2x0ZRrAAWhhcyhydWxlcy5s",
            "dGUpICYmIHJ1bGVzLmx0ZSA+PSBydWxlcy5ndGUgJiYgKHRoaXMgPiBydWxl",
            "cy5sdGUgfHwgdGhpcyA8IHJ1bGVzLmd0ZSk/ICd2YWx1ZSBtdXN0IGJlIGdy",
            "ZWF0ZXIgdGhhbiBvciBlcXVhbCB0byAlcyBhbmQgbGVzcyB0aGFuIG9yIGVx",
            "dWFsIHRvICVzJy5mb3JtYXQoW3J1bGVzLmd0ZSwgcnVsZXMubHRlXSkgOiAn",
            "JwrbAQoYdWludDY0Lmd0ZV9sdGVfZXhjbHVzaXZlGr4BaGFzKHJ1bGVzLmx0",
            "ZSkgJiYgcnVsZXMubHRlIDwgcnVsZXMuZ3RlICYmIChydWxlcy5sdGUgPCB0",
            "aGlzICYmIHRoaXMgPCBydWxlcy5ndGUpPyAndmFsdWUgbXVzdCBiZSBncmVh",
            "dGVyIHRoYW4gb3IgZXF1YWwgdG8gJXMgb3IgbGVzcyB0aGFuIG9yIGVxdWFs",
            "IHRvICVzJy5mb3JtYXQoW3J1bGVzLmd0ZSwgcnVsZXMubHRlXSkgOiAnJ0gB",
            "UgNndGUShAEKAmluGAYgAygEQnTCSHEKbwoJdWludDY0LmluGmIhKHRoaXMg",
            "aW4gZ2V0RmllbGQocnVsZXMsICdpbicpKSA/ICd2YWx1ZSBtdXN0IGJlIGlu",
            "IGxpc3QgJXMnLmZvcm1hdChbZ2V0RmllbGQocnVsZXMsICdpbicpXSkgOiAn",
            "J1ICaW4SfgoGbm90X2luGAcgAygEQmfCSGQKYgoNdWludDY0Lm5vdF9pbhpR",
            "dGhpcyBpbiBydWxlcy5ub3RfaW4gPyAndmFsdWUgbXVzdCBub3QgYmUgaW4g",
            "bGlzdCAlcycuZm9ybWF0KFtydWxlcy5ub3RfaW5dKSA6ICcnUgVub3RJbhI1",
            "CgdleGFtcGxlGAggAygEQhvCSBgKFgoOdWludDY0LmV4YW1wbGUaBHRydWVS",
            "B2V4YW1wbGUqCQjoBxCAgICAAkILCglsZXNzX3RoYW5CDgoMZ3JlYXRlcl90",
            "aGFuIssVCgtTSW50MzJSdWxlcxKLAQoFY29uc3QYASABKBFCdcJIcgpwCgxz",
            "aW50MzIuY29uc3QaYHRoaXMgIT0gZ2V0RmllbGQocnVsZXMsICdjb25zdCcp",
            "ID8gJ3ZhbHVlIG11c3QgZXF1YWwgJXMnLmZvcm1hdChbZ2V0RmllbGQocnVs",
            "ZXMsICdjb25zdCcpXSkgOiAnJ1IFY29uc3QSjwEKAmx0GAIgASgRQn3CSHoK",
            "eAoJc2ludDMyLmx0GmshaGFzKHJ1bGVzLmd0ZSkgJiYgIWhhcyhydWxlcy5n",
            "dCkgJiYgdGhpcyA+PSBydWxlcy5sdD8gJ3ZhbHVlIG11c3QgYmUgbGVzcyB0",
            "aGFuICVzJy5mb3JtYXQoW3J1bGVzLmx0XSkgOiAnJ0gAUgJsdBKiAQoDbHRl",
            "GAMgASgRQo0BwkiJAQqGAQoKc2ludDMyLmx0ZRp4IWhhcyhydWxlcy5ndGUp",
            "ICYmICFoYXMocnVsZXMuZ3QpICYmIHRoaXMgPiBydWxlcy5sdGU/ICd2YWx1",
            "ZSBtdXN0IGJlIGxlc3MgdGhhbiBvciBlcXVhbCB0byAlcycuZm9ybWF0KFty",
            "dWxlcy5sdGVdKSA6ICcnSABSA2x0ZRKgBwoCZ3QYBCABKBFCjQfCSIkHCnsK",
            "CXNpbnQzMi5ndBpuIWhhcyhydWxlcy5sdCkgJiYgIWhhcyhydWxlcy5sdGUp",
            "ICYmIHRoaXMgPD0gcnVsZXMuZ3Q/ICd2YWx1ZSBtdXN0IGJlIGdyZWF0ZXIg",
            "dGhhbiAlcycuZm9ybWF0KFtydWxlcy5ndF0pIDogJycKtAEKDHNpbnQzMi5n",
            "dF9sdBqjAWhhcyhydWxlcy5sdCkgJiYgcnVsZXMubHQgPj0gcnVsZXMuZ3Qg",
            "JiYgKHRoaXMgPj0gcnVsZXMubHQgfHwgdGhpcyA8PSBydWxlcy5ndCk/ICd2",
            "YWx1ZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAlcyBhbmQgbGVzcyB0aGFuICVz",
            "Jy5mb3JtYXQoW3J1bGVzLmd0LCBydWxlcy5sdF0pIDogJycKvAEKFnNpbnQz",
            "Mi5ndF9sdF9leGNsdXNpdmUaoQFoYXMocnVsZXMubHQpICYmIHJ1bGVzLmx0",
            "IDwgcnVsZXMuZ3QgJiYgKHJ1bGVzLmx0IDw9IHRoaXMgJiYgdGhpcyA8PSBy",
            "dWxlcy5ndCk/ICd2YWx1ZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAlcyBvciBs",
            "ZXNzIHRoYW4gJXMnLmZvcm1hdChbcnVsZXMuZ3QsIHJ1bGVzLmx0XSkgOiAn",
            "JwrEAQoNc2ludDMyLmd0X2x0ZRqyAWhhcyhydWxlcy5sdGUpICYmIHJ1bGVz",
            "Lmx0ZSA+PSBydWxlcy5ndCAmJiAodGhpcyA+IHJ1bGVzLmx0ZSB8fCB0aGlz",
            "IDw9IHJ1bGVzLmd0KT8gJ3ZhbHVlIG11c3QgYmUgZ3JlYXRlciB0aGFuICVz",
            "IGFuZCBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gJXMnLmZvcm1hdChbcnVsZXMu",
            "Z3QsIHJ1bGVzLmx0ZV0pIDogJycKzAEKF3NpbnQzMi5ndF9sdGVfZXhjbHVz",
            "aXZlGrABaGFzKHJ1bGVzLmx0ZSkgJiYgcnVsZXMubHRlIDwgcnVsZXMuZ3Qg",
            "JiYgKHJ1bGVzLmx0ZSA8IHRoaXMgJiYgdGhpcyA8PSBydWxlcy5ndCk/ICd2",
            "YWx1ZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAlcyBvciBsZXNzIHRoYW4gb3Ig",
            "ZXF1YWwgdG8gJXMnLmZvcm1hdChbcnVsZXMuZ3QsIHJ1bGVzLmx0ZV0pIDog",
            "JydIAVICZ3QS7QcKA2d0ZRgFIAEoEULYB8JI1AcKiQEKCnNpbnQzMi5ndGUa",
            "eyFoYXMocnVsZXMubHQpICYmICFoYXMocnVsZXMubHRlKSAmJiB0aGlzIDwg",
            "cnVsZXMuZ3RlPyAndmFsdWUgbXVzdCBiZSBncmVhdGVyIHRoYW4gb3IgZXF1",
            "YWwgdG8gJXMnLmZvcm1hdChbcnVsZXMuZ3RlXSkgOiAnJwrDAQoNc2ludDMy",
            "Lmd0ZV9sdBqxAWhhcyhydWxlcy5sdCkgJiYgcnVsZXMubHQgPj0gcnVsZXMu",
            "Z3RlICYmICh0aGlzID49IHJ1bGVzLmx0IHx8IHRoaXMgPCBydWxlcy5ndGUp",
            "PyAndmFsdWUgbXVzdCBiZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gJXMg",
            "YW5kIGxlc3MgdGhhbiAlcycuZm9ybWF0KFtydWxlcy5ndGUsIHJ1bGVzLmx0",
            "XSkgOiAnJwrLAQoXc2ludDMyLmd0ZV9sdF9leGNsdXNpdmUarwFoYXMocnVs",
            "ZXMubHQpICYmIHJ1bGVzLmx0IDwgcnVsZXMuZ3RlICYmIChydWxlcy5sdCA8",
            "PSB0aGlzICYmIHRoaXMgPCBydWxlcy5ndGUpPyAndmFsdWUgbXVzdCBiZSBn",
            "cmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gJXMgb3IgbGVzcyB0aGFuICVzJy5m",
            "b3JtYXQoW3J1bGVzLmd0ZSwgcnVsZXMubHRdKSA6ICcnCtMBCg5zaW50MzIu",
            "Z3RlX2x0ZRrAAWhhcyhydWxlcy5sdGUpICYmIHJ1bGVzLmx0ZSA+PSBydWxl",
            "cy5ndGUgJiYgKHRoaXMgPiBydWxlcy5sdGUgfHwgdGhpcyA8IHJ1bGVzLmd0",
            "ZSk/ICd2YWx1ZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byAl",
            "cyBhbmQgbGVzcyB0aGFuIG9yIGVxdWFsIHRvICVzJy5mb3JtYXQoW3J1bGVz",
            "Lmd0ZSwgcnVsZXMubHRlXSkgOiAnJwrbAQoYc2ludDMyLmd0ZV9sdGVfZXhj",
            "bHVzaXZlGr4BaGFzKHJ1bGVzLmx0ZSkgJiYgcnVsZXMubHRlIDwgcnVsZXMu",
            "Z3RlICYmIChydWxlcy5sdGUgPCB0aGlzICYmIHRoaXMgPCBydWxlcy5ndGUp",
            "PyAndmFsdWUgbXVzdCBiZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gJXMg",
            "b3IgbGVzcyB0aGFuIG9yIGVxdWFsIHRvICVzJy5mb3JtYXQoW3J1bGVzLmd0",
            "ZSwgcnVsZXMubHRlXSkgOiAnJ0gBUgNndGUShAEKAmluGAYgAygRQnTCSHEK",
            "bwoJc2ludDMyLmluGmIhKHRoaXMgaW4gZ2V0RmllbGQocnVsZXMsICdpbicp",
            "KSA/ICd2YWx1ZSBtdXN0IGJlIGluIGxpc3QgJXMnLmZvcm1hdChbZ2V0Rmll",
            "bGQocnVsZXMsICdpbicpXSkgOiAnJ1ICaW4SfgoGbm90X2luGAcgAygRQmfC",
            "SGQKYgoNc2ludDMyLm5vdF9pbhpRdGhpcyBpbiBydWxlcy5ub3RfaW4gPyAn",
            "dmFsdWUgbXVzdCBub3QgYmUgaW4gbGlzdCAlcycuZm9ybWF0KFtydWxlcy5u",
            "b3RfaW5dKSA6ICcnUgVub3RJbhI1CgdleGFtcGxlGAggAygRQhvCSBgKFgoO",
            "c2ludDMyLmV4YW1wbGUaBHRydWVSB2V4YW1wbGUqCQjoBxCAgICAAkILCgls",
            "ZXNzX3RoYW5CDgoMZ3JlYXRlcl90aGFuIssVCgtTSW50NjRSdWxlcxKLAQoF",
            "Y29uc3QYASABKBJCdcJIcgpwCgxzaW50NjQuY29uc3QaYHRoaXMgIT0gZ2V0",
            "RmllbGQocnVsZXMsICdjb25zdCcpID8gJ3ZhbHVlIG11c3QgZXF1YWwgJXMn",
            "LmZvcm1hdChbZ2V0RmllbGQocnVsZXMsICdjb25zdCcpXSkgOiAnJ1IFY29u",
            "c3QSjwEKAmx0GAIgASgSQn3CSHoKeAoJc2ludDY0Lmx0GmshaGFzKHJ1bGVz",
            "Lmd0ZSkgJiYgIWhhcyhydWxlcy5ndCkgJiYgdGhpcyA+PSBydWxlcy5sdD8g",
            "J3ZhbHVlIG11c3QgYmUgbGVzcyB0aGFuICVzJy5mb3JtYXQoW3J1bGVzLmx0",
            "XSkgOiAnJ0gAUgJsdBKiAQoDbHRlGAMgASgSQo0BwkiJAQqGAQoKc2ludDY0",
            "Lmx0ZRp4IWhhcyhydWxlcy5ndGUpICYmICFoYXMocnVsZXMuZ3QpICYmIHRo",
            "aXMgPiBydWxlcy5sdGU/ICd2YWx1ZSBtdXN0IGJlIGxlc3MgdGhhbiBvciBl",
            "cXVhbCB0byAlcycuZm9ybWF0KFtydWxlcy5sdGVdKSA6ICcnSABSA2x0ZRKg",
            "BwoCZ3QYBCABKBJCjQfCSIkHCnsKCXNpbnQ2NC5ndBpuIWhhcyhydWxlcy5s",
            "dCkgJiYgIWhhcyhydWxlcy5sdGUpICYmIHRoaXMgPD0gcnVsZXMuZ3Q/ICd2",
            "YWx1ZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAlcycuZm9ybWF0KFtydWxlcy5n",
            "dF0pIDogJycKtAEKDHNpbnQ2NC5ndF9sdBqjAWhhcyhydWxlcy5sdCkgJiYg",
            "cnVsZXMubHQgPj0gcnVsZXMuZ3QgJiYgKHRoaXMgPj0gcnVsZXMubHQgfHwg",
            "dGhpcyA8PSBydWxlcy5ndCk/ICd2YWx1ZSBtdXN0IGJlIGdyZWF0ZXIgdGhh",
            "biAlcyBhbmQgbGVzcyB0aGFuICVzJy5mb3JtYXQoW3J1bGVzLmd0LCBydWxl",
            "cy5sdF0pIDogJycKvAEKFnNpbnQ2NC5ndF9sdF9leGNsdXNpdmUaoQFoYXMo",
            "cnVsZXMubHQpICYmIHJ1bGVzLmx0IDwgcnVsZXMuZ3QgJiYgKHJ1bGVzLmx0",
            "IDw9IHRoaXMgJiYgdGhpcyA8PSBydWxlcy5ndCk/ICd2YWx1ZSBtdXN0IGJl",
            "IGdyZWF0ZXIgdGhhbiAlcyBvciBsZXNzIHRoYW4gJXMnLmZvcm1hdChbcnVs",
            "ZXMuZ3QsIHJ1bGVzLmx0XSkgOiAnJwrEAQoNc2ludDY0Lmd0X2x0ZRqyAWhh",
            "cyhydWxlcy5sdGUpICYmIHJ1bGVzLmx0ZSA+PSBydWxlcy5ndCAmJiAodGhp",
            "cyA+IHJ1bGVzLmx0ZSB8fCB0aGlzIDw9IHJ1bGVzLmd0KT8gJ3ZhbHVlIG11",
            "c3QgYmUgZ3JlYXRlciB0aGFuICVzIGFuZCBsZXNzIHRoYW4gb3IgZXF1YWwg",
            "dG8gJXMnLmZvcm1hdChbcnVsZXMuZ3QsIHJ1bGVzLmx0ZV0pIDogJycKzAEK",
            "F3NpbnQ2NC5ndF9sdGVfZXhjbHVzaXZlGrABaGFzKHJ1bGVzLmx0ZSkgJiYg",
            "cnVsZXMubHRlIDwgcnVsZXMuZ3QgJiYgKHJ1bGVzLmx0ZSA8IHRoaXMgJiYg",
            "dGhpcyA8PSBydWxlcy5ndCk/ICd2YWx1ZSBtdXN0IGJlIGdyZWF0ZXIgdGhh",
            "biAlcyBvciBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gJXMnLmZvcm1hdChbcnVs",
            "ZXMuZ3QsIHJ1bGVzLmx0ZV0pIDogJydIAVICZ3QS7QcKA2d0ZRgFIAEoEkLY",
            "B8JI1AcKiQEKCnNpbnQ2NC5ndGUaeyFoYXMocnVsZXMubHQpICYmICFoYXMo",
            "cnVsZXMubHRlKSAmJiB0aGlzIDwgcnVsZXMuZ3RlPyAndmFsdWUgbXVzdCBi",
            "ZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gJXMnLmZvcm1hdChbcnVsZXMu",
            "Z3RlXSkgOiAnJwrDAQoNc2ludDY0Lmd0ZV9sdBqxAWhhcyhydWxlcy5sdCkg",
            "JiYgcnVsZXMubHQgPj0gcnVsZXMuZ3RlICYmICh0aGlzID49IHJ1bGVzLmx0",
            "IHx8IHRoaXMgPCBydWxlcy5ndGUpPyAndmFsdWUgbXVzdCBiZSBncmVhdGVy",
            "IHRoYW4gb3IgZXF1YWwgdG8gJXMgYW5kIGxlc3MgdGhhbiAlcycuZm9ybWF0",
            "KFtydWxlcy5ndGUsIHJ1bGVzLmx0XSkgOiAnJwrLAQoXc2ludDY0Lmd0ZV9s",
            "dF9leGNsdXNpdmUarwFoYXMocnVsZXMubHQpICYmIHJ1bGVzLmx0IDwgcnVs",
            "ZXMuZ3RlICYmIChydWxlcy5sdCA8PSB0aGlzICYmIHRoaXMgPCBydWxlcy5n",
            "dGUpPyAndmFsdWUgbXVzdCBiZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8g",
            "JXMgb3IgbGVzcyB0aGFuICVzJy5mb3JtYXQoW3J1bGVzLmd0ZSwgcnVsZXMu",
            "bHRdKSA6ICcnCtMBCg5zaW50NjQuZ3RlX2x0ZRrAAWhhcyhydWxlcy5sdGUp",
            "ICYmIHJ1bGVzLmx0ZSA+PSBydWxlcy5ndGUgJiYgKHRoaXMgPiBydWxlcy5s",
            "dGUgfHwgdGhpcyA8IHJ1bGVzLmd0ZSk/ICd2YWx1ZSBtdXN0IGJlIGdyZWF0",
            "ZXIgdGhhbiBvciBlcXVhbCB0byAlcyBhbmQgbGVzcyB0aGFuIG9yIGVxdWFs",
            "IHRvICVzJy5mb3JtYXQoW3J1bGVzLmd0ZSwgcnVsZXMubHRlXSkgOiAnJwrb",
            "AQoYc2ludDY0Lmd0ZV9sdGVfZXhjbHVzaXZlGr4BaGFzKHJ1bGVzLmx0ZSkg",
            "JiYgcnVsZXMubHRlIDwgcnVsZXMuZ3RlICYmIChydWxlcy5sdGUgPCB0aGlz",
            "ICYmIHRoaXMgPCBydWxlcy5ndGUpPyAndmFsdWUgbXVzdCBiZSBncmVhdGVy",
            "IHRoYW4gb3IgZXF1YWwgdG8gJXMgb3IgbGVzcyB0aGFuIG9yIGVxdWFsIHRv",
            "ICVzJy5mb3JtYXQoW3J1bGVzLmd0ZSwgcnVsZXMubHRlXSkgOiAnJ0gBUgNn",
            "dGUShAEKAmluGAYgAygSQnTCSHEKbwoJc2ludDY0LmluGmIhKHRoaXMgaW4g",
            "Z2V0RmllbGQocnVsZXMsICdpbicpKSA/ICd2YWx1ZSBtdXN0IGJlIGluIGxp",
            "c3QgJXMnLmZvcm1hdChbZ2V0RmllbGQocnVsZXMsICdpbicpXSkgOiAnJ1IC",
            "aW4SfgoGbm90X2luGAcgAygSQmfCSGQKYgoNc2ludDY0Lm5vdF9pbhpRdGhp",
            "cyBpbiBydWxlcy5ub3RfaW4gPyAndmFsdWUgbXVzdCBub3QgYmUgaW4gbGlz",
            "dCAlcycuZm9ybWF0KFtydWxlcy5ub3RfaW5dKSA6ICcnUgVub3RJbhI1Cgdl",
            "eGFtcGxlGAggAygSQhvCSBgKFgoOc2ludDY0LmV4YW1wbGUaBHRydWVSB2V4",
            "YW1wbGUqCQjoBxCAgICAAkILCglsZXNzX3RoYW5CDgoMZ3JlYXRlcl90aGFu",
            "ItwVCgxGaXhlZDMyUnVsZXMSjAEKBWNvbnN0GAEgASgHQnbCSHMKcQoNZml4",
            "ZWQzMi5jb25zdBpgdGhpcyAhPSBnZXRGaWVsZChydWxlcywgJ2NvbnN0Jykg",
            "PyAndmFsdWUgbXVzdCBlcXVhbCAlcycuZm9ybWF0KFtnZXRGaWVsZChydWxl",
            "cywgJ2NvbnN0JyldKSA6ICcnUgVjb25zdBKQAQoCbHQYAiABKAdCfsJIewp5",
            "CgpmaXhlZDMyLmx0GmshaGFzKHJ1bGVzLmd0ZSkgJiYgIWhhcyhydWxlcy5n",
            "dCkgJiYgdGhpcyA+PSBydWxlcy5sdD8gJ3ZhbHVlIG11c3QgYmUgbGVzcyB0",
            "aGFuICVzJy5mb3JtYXQoW3J1bGVzLmx0XSkgOiAnJ0gAUgJsdBKjAQoDbHRl",
            "GAMgASgHQo4BwkiKAQqHAQoLZml4ZWQzMi5sdGUaeCFoYXMocnVsZXMuZ3Rl",
            "KSAmJiAhaGFzKHJ1bGVzLmd0KSAmJiB0aGlzID4gcnVsZXMubHRlPyAndmFs",
            "dWUgbXVzdCBiZSBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gJXMnLmZvcm1hdChb",
            "cnVsZXMubHRlXSkgOiAnJ0gAUgNsdGUSpQcKAmd0GAQgASgHQpIHwkiOBwp8",
            "CgpmaXhlZDMyLmd0Gm4haGFzKHJ1bGVzLmx0KSAmJiAhaGFzKHJ1bGVzLmx0",
            "ZSkgJiYgdGhpcyA8PSBydWxlcy5ndD8gJ3ZhbHVlIG11c3QgYmUgZ3JlYXRl",
            "ciB0aGFuICVzJy5mb3JtYXQoW3J1bGVzLmd0XSkgOiAnJwq1AQoNZml4ZWQz",
            "Mi5ndF9sdBqjAWhhcyhydWxlcy5sdCkgJiYgcnVsZXMubHQgPj0gcnVsZXMu",
            "Z3QgJiYgKHRoaXMgPj0gcnVsZXMubHQgfHwgdGhpcyA8PSBydWxlcy5ndCk/",
            "ICd2YWx1ZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAlcyBhbmQgbGVzcyB0aGFu",
            "ICVzJy5mb3JtYXQoW3J1bGVzLmd0LCBydWxlcy5sdF0pIDogJycKvQEKF2Zp",
            "eGVkMzIuZ3RfbHRfZXhjbHVzaXZlGqEBaGFzKHJ1bGVzLmx0KSAmJiBydWxl",
            "cy5sdCA8IHJ1bGVzLmd0ICYmIChydWxlcy5sdCA8PSB0aGlzICYmIHRoaXMg",
            "PD0gcnVsZXMuZ3QpPyAndmFsdWUgbXVzdCBiZSBncmVhdGVyIHRoYW4gJXMg",
            "b3IgbGVzcyB0aGFuICVzJy5mb3JtYXQoW3J1bGVzLmd0LCBydWxlcy5sdF0p",
            "IDogJycKxQEKDmZpeGVkMzIuZ3RfbHRlGrIBaGFzKHJ1bGVzLmx0ZSkgJiYg",
            "cnVsZXMubHRlID49IHJ1bGVzLmd0ICYmICh0aGlzID4gcnVsZXMubHRlIHx8",
            "IHRoaXMgPD0gcnVsZXMuZ3QpPyAndmFsdWUgbXVzdCBiZSBncmVhdGVyIHRo",
            "YW4gJXMgYW5kIGxlc3MgdGhhbiBvciBlcXVhbCB0byAlcycuZm9ybWF0KFty",
            "dWxlcy5ndCwgcnVsZXMubHRlXSkgOiAnJwrNAQoYZml4ZWQzMi5ndF9sdGVf",
            "ZXhjbHVzaXZlGrABaGFzKHJ1bGVzLmx0ZSkgJiYgcnVsZXMubHRlIDwgcnVs",
            "ZXMuZ3QgJiYgKHJ1bGVzLmx0ZSA8IHRoaXMgJiYgdGhpcyA8PSBydWxlcy5n",
            "dCk/ICd2YWx1ZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAlcyBvciBsZXNzIHRo",
            "YW4gb3IgZXF1YWwgdG8gJXMnLmZvcm1hdChbcnVsZXMuZ3QsIHJ1bGVzLmx0",
            "ZV0pIDogJydIAVICZ3QS8gcKA2d0ZRgFIAEoB0LdB8JI2QcKigEKC2ZpeGVk",
            "MzIuZ3RlGnshaGFzKHJ1bGVzLmx0KSAmJiAhaGFzKHJ1bGVzLmx0ZSkgJiYg",
            "dGhpcyA8IHJ1bGVzLmd0ZT8gJ3ZhbHVlIG11c3QgYmUgZ3JlYXRlciB0aGFu",
            "IG9yIGVxdWFsIHRvICVzJy5mb3JtYXQoW3J1bGVzLmd0ZV0pIDogJycKxAEK",
            "DmZpeGVkMzIuZ3RlX2x0GrEBaGFzKHJ1bGVzLmx0KSAmJiBydWxlcy5sdCA+",
            "PSBydWxlcy5ndGUgJiYgKHRoaXMgPj0gcnVsZXMubHQgfHwgdGhpcyA8IHJ1",
            "bGVzLmd0ZSk/ICd2YWx1ZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBvciBlcXVh",
            "bCB0byAlcyBhbmQgbGVzcyB0aGFuICVzJy5mb3JtYXQoW3J1bGVzLmd0ZSwg",
            "cnVsZXMubHRdKSA6ICcnCswBChhmaXhlZDMyLmd0ZV9sdF9leGNsdXNpdmUa",
            "rwFoYXMocnVsZXMubHQpICYmIHJ1bGVzLmx0IDwgcnVsZXMuZ3RlICYmIChy",
            "dWxlcy5sdCA8PSB0aGlzICYmIHRoaXMgPCBydWxlcy5ndGUpPyAndmFsdWUg",
            "bXVzdCBiZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gJXMgb3IgbGVzcyB0",
            "aGFuICVzJy5mb3JtYXQoW3J1bGVzLmd0ZSwgcnVsZXMubHRdKSA6ICcnCtQB",
            "Cg9maXhlZDMyLmd0ZV9sdGUawAFoYXMocnVsZXMubHRlKSAmJiBydWxlcy5s",
            "dGUgPj0gcnVsZXMuZ3RlICYmICh0aGlzID4gcnVsZXMubHRlIHx8IHRoaXMg",
            "PCBydWxlcy5ndGUpPyAndmFsdWUgbXVzdCBiZSBncmVhdGVyIHRoYW4gb3Ig",
            "ZXF1YWwgdG8gJXMgYW5kIGxlc3MgdGhhbiBvciBlcXVhbCB0byAlcycuZm9y",
            "bWF0KFtydWxlcy5ndGUsIHJ1bGVzLmx0ZV0pIDogJycK3AEKGWZpeGVkMzIu",
            "Z3RlX2x0ZV9leGNsdXNpdmUavgFoYXMocnVsZXMubHRlKSAmJiBydWxlcy5s",
            "dGUgPCBydWxlcy5ndGUgJiYgKHJ1bGVzLmx0ZSA8IHRoaXMgJiYgdGhpcyA8",
            "IHJ1bGVzLmd0ZSk/ICd2YWx1ZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBvciBl",
            "cXVhbCB0byAlcyBvciBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gJXMnLmZvcm1h",
            "dChbcnVsZXMuZ3RlLCBydWxlcy5sdGVdKSA6ICcnSAFSA2d0ZRKFAQoCaW4Y",
            "BiADKAdCdcJIcgpwCgpmaXhlZDMyLmluGmIhKHRoaXMgaW4gZ2V0RmllbGQo",
            "cnVsZXMsICdpbicpKSA/ICd2YWx1ZSBtdXN0IGJlIGluIGxpc3QgJXMnLmZv",
            "cm1hdChbZ2V0RmllbGQocnVsZXMsICdpbicpXSkgOiAnJ1ICaW4SfwoGbm90",
            "X2luGAcgAygHQmjCSGUKYwoOZml4ZWQzMi5ub3RfaW4aUXRoaXMgaW4gcnVs",
            "ZXMubm90X2luID8gJ3ZhbHVlIG11c3Qgbm90IGJlIGluIGxpc3QgJXMnLmZv",
            "cm1hdChbcnVsZXMubm90X2luXSkgOiAnJ1IFbm90SW4SNgoHZXhhbXBsZRgI",
            "IAMoB0IcwkgZChcKD2ZpeGVkMzIuZXhhbXBsZRoEdHJ1ZVIHZXhhbXBsZSoJ",
            "COgHEICAgIACQgsKCWxlc3NfdGhhbkIOCgxncmVhdGVyX3RoYW4i3BUKDEZp",
            "eGVkNjRSdWxlcxKMAQoFY29uc3QYASABKAZCdsJIcwpxCg1maXhlZDY0LmNv",
            "bnN0GmB0aGlzICE9IGdldEZpZWxkKHJ1bGVzLCAnY29uc3QnKSA/ICd2YWx1",
            "ZSBtdXN0IGVxdWFsICVzJy5mb3JtYXQoW2dldEZpZWxkKHJ1bGVzLCAnY29u",
            "c3QnKV0pIDogJydSBWNvbnN0EpABCgJsdBgCIAEoBkJ+wkh7CnkKCmZpeGVk",
            "NjQubHQaayFoYXMocnVsZXMuZ3RlKSAmJiAhaGFzKHJ1bGVzLmd0KSAmJiB0",
            "aGlzID49IHJ1bGVzLmx0PyAndmFsdWUgbXVzdCBiZSBsZXNzIHRoYW4gJXMn",
            "LmZvcm1hdChbcnVsZXMubHRdKSA6ICcnSABSAmx0EqMBCgNsdGUYAyABKAZC",
            "jgHCSIoBCocBCgtmaXhlZDY0Lmx0ZRp4IWhhcyhydWxlcy5ndGUpICYmICFo",
            "YXMocnVsZXMuZ3QpICYmIHRoaXMgPiBydWxlcy5sdGU/ICd2YWx1ZSBtdXN0",
            "IGJlIGxlc3MgdGhhbiBvciBlcXVhbCB0byAlcycuZm9ybWF0KFtydWxlcy5s",
            "dGVdKSA6ICcnSABSA2x0ZRKlBwoCZ3QYBCABKAZCkgfCSI4HCnwKCmZpeGVk",
            "NjQuZ3QabiFoYXMocnVsZXMubHQpICYmICFoYXMocnVsZXMubHRlKSAmJiB0",
            "aGlzIDw9IHJ1bGVzLmd0PyAndmFsdWUgbXVzdCBiZSBncmVhdGVyIHRoYW4g",
            "JXMnLmZvcm1hdChbcnVsZXMuZ3RdKSA6ICcnCrUBCg1maXhlZDY0Lmd0X2x0",
            "GqMBaGFzKHJ1bGVzLmx0KSAmJiBydWxlcy5sdCA+PSBydWxlcy5ndCAmJiAo",
            "dGhpcyA+PSBydWxlcy5sdCB8fCB0aGlzIDw9IHJ1bGVzLmd0KT8gJ3ZhbHVl",
            "IG11c3QgYmUgZ3JlYXRlciB0aGFuICVzIGFuZCBsZXNzIHRoYW4gJXMnLmZv",
            "cm1hdChbcnVsZXMuZ3QsIHJ1bGVzLmx0XSkgOiAnJwq9AQoXZml4ZWQ2NC5n",
            "dF9sdF9leGNsdXNpdmUaoQFoYXMocnVsZXMubHQpICYmIHJ1bGVzLmx0IDwg",
            "cnVsZXMuZ3QgJiYgKHJ1bGVzLmx0IDw9IHRoaXMgJiYgdGhpcyA8PSBydWxl",
            "cy5ndCk/ICd2YWx1ZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAlcyBvciBsZXNz",
            "IHRoYW4gJXMnLmZvcm1hdChbcnVsZXMuZ3QsIHJ1bGVzLmx0XSkgOiAnJwrF",
            "AQoOZml4ZWQ2NC5ndF9sdGUasgFoYXMocnVsZXMubHRlKSAmJiBydWxlcy5s",
            "dGUgPj0gcnVsZXMuZ3QgJiYgKHRoaXMgPiBydWxlcy5sdGUgfHwgdGhpcyA8",
            "PSBydWxlcy5ndCk/ICd2YWx1ZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAlcyBh",
            "bmQgbGVzcyB0aGFuIG9yIGVxdWFsIHRvICVzJy5mb3JtYXQoW3J1bGVzLmd0",
            "LCBydWxlcy5sdGVdKSA6ICcnCs0BChhmaXhlZDY0Lmd0X2x0ZV9leGNsdXNp",
            "dmUasAFoYXMocnVsZXMubHRlKSAmJiBydWxlcy5sdGUgPCBydWxlcy5ndCAm",
            "JiAocnVsZXMubHRlIDwgdGhpcyAmJiB0aGlzIDw9IHJ1bGVzLmd0KT8gJ3Zh",
            "bHVlIG11c3QgYmUgZ3JlYXRlciB0aGFuICVzIG9yIGxlc3MgdGhhbiBvciBl",
            "cXVhbCB0byAlcycuZm9ybWF0KFtydWxlcy5ndCwgcnVsZXMubHRlXSkgOiAn",
            "J0gBUgJndBLyBwoDZ3RlGAUgASgGQt0HwkjZBwqKAQoLZml4ZWQ2NC5ndGUa",
            "eyFoYXMocnVsZXMubHQpICYmICFoYXMocnVsZXMubHRlKSAmJiB0aGlzIDwg",
            "cnVsZXMuZ3RlPyAndmFsdWUgbXVzdCBiZSBncmVhdGVyIHRoYW4gb3IgZXF1",
            "YWwgdG8gJXMnLmZvcm1hdChbcnVsZXMuZ3RlXSkgOiAnJwrEAQoOZml4ZWQ2",
            "NC5ndGVfbHQasQFoYXMocnVsZXMubHQpICYmIHJ1bGVzLmx0ID49IHJ1bGVz",
            "Lmd0ZSAmJiAodGhpcyA+PSBydWxlcy5sdCB8fCB0aGlzIDwgcnVsZXMuZ3Rl",
            "KT8gJ3ZhbHVlIG11c3QgYmUgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvICVz",
            "IGFuZCBsZXNzIHRoYW4gJXMnLmZvcm1hdChbcnVsZXMuZ3RlLCBydWxlcy5s",
            "dF0pIDogJycKzAEKGGZpeGVkNjQuZ3RlX2x0X2V4Y2x1c2l2ZRqvAWhhcyhy",
            "dWxlcy5sdCkgJiYgcnVsZXMubHQgPCBydWxlcy5ndGUgJiYgKHJ1bGVzLmx0",
            "IDw9IHRoaXMgJiYgdGhpcyA8IHJ1bGVzLmd0ZSk/ICd2YWx1ZSBtdXN0IGJl",
            "IGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byAlcyBvciBsZXNzIHRoYW4gJXMn",
            "LmZvcm1hdChbcnVsZXMuZ3RlLCBydWxlcy5sdF0pIDogJycK1AEKD2ZpeGVk",
            "NjQuZ3RlX2x0ZRrAAWhhcyhydWxlcy5sdGUpICYmIHJ1bGVzLmx0ZSA+PSBy",
            "dWxlcy5ndGUgJiYgKHRoaXMgPiBydWxlcy5sdGUgfHwgdGhpcyA8IHJ1bGVz",
            "Lmd0ZSk/ICd2YWx1ZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0",
            "byAlcyBhbmQgbGVzcyB0aGFuIG9yIGVxdWFsIHRvICVzJy5mb3JtYXQoW3J1",
            "bGVzLmd0ZSwgcnVsZXMubHRlXSkgOiAnJwrcAQoZZml4ZWQ2NC5ndGVfbHRl",
            "X2V4Y2x1c2l2ZRq+AWhhcyhydWxlcy5sdGUpICYmIHJ1bGVzLmx0ZSA8IHJ1",
            "bGVzLmd0ZSAmJiAocnVsZXMubHRlIDwgdGhpcyAmJiB0aGlzIDwgcnVsZXMu",
            "Z3RlKT8gJ3ZhbHVlIG11c3QgYmUgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRv",
            "ICVzIG9yIGxlc3MgdGhhbiBvciBlcXVhbCB0byAlcycuZm9ybWF0KFtydWxl",
            "cy5ndGUsIHJ1bGVzLmx0ZV0pIDogJydIAVIDZ3RlEoUBCgJpbhgGIAMoBkJ1",
            "wkhyCnAKCmZpeGVkNjQuaW4aYiEodGhpcyBpbiBnZXRGaWVsZChydWxlcywg",
            "J2luJykpID8gJ3ZhbHVlIG11c3QgYmUgaW4gbGlzdCAlcycuZm9ybWF0KFtn",
            "ZXRGaWVsZChydWxlcywgJ2luJyldKSA6ICcnUgJpbhJ/CgZub3RfaW4YByAD",
            "KAZCaMJIZQpjCg5maXhlZDY0Lm5vdF9pbhpRdGhpcyBpbiBydWxlcy5ub3Rf",
            "aW4gPyAndmFsdWUgbXVzdCBub3QgYmUgaW4gbGlzdCAlcycuZm9ybWF0KFty",
            "dWxlcy5ub3RfaW5dKSA6ICcnUgVub3RJbhI2CgdleGFtcGxlGAggAygGQhzC",
            "SBkKFwoPZml4ZWQ2NC5leGFtcGxlGgR0cnVlUgdleGFtcGxlKgkI6AcQgICA",
            "gAJCCwoJbGVzc190aGFuQg4KDGdyZWF0ZXJfdGhhbiLuFQoNU0ZpeGVkMzJS",
            "dWxlcxKNAQoFY29uc3QYASABKA9Cd8JIdApyCg5zZml4ZWQzMi5jb25zdBpg",
            "dGhpcyAhPSBnZXRGaWVsZChydWxlcywgJ2NvbnN0JykgPyAndmFsdWUgbXVz",
            "dCBlcXVhbCAlcycuZm9ybWF0KFtnZXRGaWVsZChydWxlcywgJ2NvbnN0Jyld",
            "KSA6ICcnUgVjb25zdBKRAQoCbHQYAiABKA9Cf8JIfAp6CgtzZml4ZWQzMi5s",
            "dBprIWhhcyhydWxlcy5ndGUpICYmICFoYXMocnVsZXMuZ3QpICYmIHRoaXMg",
            "Pj0gcnVsZXMubHQ/ICd2YWx1ZSBtdXN0IGJlIGxlc3MgdGhhbiAlcycuZm9y",
            "bWF0KFtydWxlcy5sdF0pIDogJydIAFICbHQSpAEKA2x0ZRgDIAEoD0KPAcJI",
            "iwEKiAEKDHNmaXhlZDMyLmx0ZRp4IWhhcyhydWxlcy5ndGUpICYmICFoYXMo",
            "cnVsZXMuZ3QpICYmIHRoaXMgPiBydWxlcy5sdGU/ICd2YWx1ZSBtdXN0IGJl",
            "IGxlc3MgdGhhbiBvciBlcXVhbCB0byAlcycuZm9ybWF0KFtydWxlcy5sdGVd",
            "KSA6ICcnSABSA2x0ZRKqBwoCZ3QYBCABKA9ClwfCSJMHCn0KC3NmaXhlZDMy",
            "Lmd0Gm4haGFzKHJ1bGVzLmx0KSAmJiAhaGFzKHJ1bGVzLmx0ZSkgJiYgdGhp",
            "cyA8PSBydWxlcy5ndD8gJ3ZhbHVlIG11c3QgYmUgZ3JlYXRlciB0aGFuICVz",
            "Jy5mb3JtYXQoW3J1bGVzLmd0XSkgOiAnJwq2AQoOc2ZpeGVkMzIuZ3RfbHQa",
            "owFoYXMocnVsZXMubHQpICYmIHJ1bGVzLmx0ID49IHJ1bGVzLmd0ICYmICh0",
            "aGlzID49IHJ1bGVzLmx0IHx8IHRoaXMgPD0gcnVsZXMuZ3QpPyAndmFsdWUg",
            "bXVzdCBiZSBncmVhdGVyIHRoYW4gJXMgYW5kIGxlc3MgdGhhbiAlcycuZm9y",
            "bWF0KFtydWxlcy5ndCwgcnVsZXMubHRdKSA6ICcnCr4BChhzZml4ZWQzMi5n",
            "dF9sdF9leGNsdXNpdmUaoQFoYXMocnVsZXMubHQpICYmIHJ1bGVzLmx0IDwg",
            "cnVsZXMuZ3QgJiYgKHJ1bGVzLmx0IDw9IHRoaXMgJiYgdGhpcyA8PSBydWxl",
            "cy5ndCk/ICd2YWx1ZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAlcyBvciBsZXNz",
            "IHRoYW4gJXMnLmZvcm1hdChbcnVsZXMuZ3QsIHJ1bGVzLmx0XSkgOiAnJwrG",
            "AQoPc2ZpeGVkMzIuZ3RfbHRlGrIBaGFzKHJ1bGVzLmx0ZSkgJiYgcnVsZXMu",
            "bHRlID49IHJ1bGVzLmd0ICYmICh0aGlzID4gcnVsZXMubHRlIHx8IHRoaXMg",
            "PD0gcnVsZXMuZ3QpPyAndmFsdWUgbXVzdCBiZSBncmVhdGVyIHRoYW4gJXMg",
            "YW5kIGxlc3MgdGhhbiBvciBlcXVhbCB0byAlcycuZm9ybWF0KFtydWxlcy5n",
            "dCwgcnVsZXMubHRlXSkgOiAnJwrOAQoZc2ZpeGVkMzIuZ3RfbHRlX2V4Y2x1",
            "c2l2ZRqwAWhhcyhydWxlcy5sdGUpICYmIHJ1bGVzLmx0ZSA8IHJ1bGVzLmd0",
            "ICYmIChydWxlcy5sdGUgPCB0aGlzICYmIHRoaXMgPD0gcnVsZXMuZ3QpPyAn",
            "dmFsdWUgbXVzdCBiZSBncmVhdGVyIHRoYW4gJXMgb3IgbGVzcyB0aGFuIG9y",
            "IGVxdWFsIHRvICVzJy5mb3JtYXQoW3J1bGVzLmd0LCBydWxlcy5sdGVdKSA6",
            "ICcnSAFSAmd0EvcHCgNndGUYBSABKA9C4gfCSN4HCosBCgxzZml4ZWQzMi5n",
            "dGUaeyFoYXMocnVsZXMubHQpICYmICFoYXMocnVsZXMubHRlKSAmJiB0aGlz",
            "IDwgcnVsZXMuZ3RlPyAndmFsdWUgbXVzdCBiZSBncmVhdGVyIHRoYW4gb3Ig",
            "ZXF1YWwgdG8gJXMnLmZvcm1hdChbcnVsZXMuZ3RlXSkgOiAnJwrFAQoPc2Zp",
            "eGVkMzIuZ3RlX2x0GrEBaGFzKHJ1bGVzLmx0KSAmJiBydWxlcy5sdCA+PSBy",
            "dWxlcy5ndGUgJiYgKHRoaXMgPj0gcnVsZXMubHQgfHwgdGhpcyA8IHJ1bGVz",
            "Lmd0ZSk/ICd2YWx1ZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0",
            "byAlcyBhbmQgbGVzcyB0aGFuICVzJy5mb3JtYXQoW3J1bGVzLmd0ZSwgcnVs",
            "ZXMubHRdKSA6ICcnCs0BChlzZml4ZWQzMi5ndGVfbHRfZXhjbHVzaXZlGq8B",
            "aGFzKHJ1bGVzLmx0KSAmJiBydWxlcy5sdCA8IHJ1bGVzLmd0ZSAmJiAocnVs",
            "ZXMubHQgPD0gdGhpcyAmJiB0aGlzIDwgcnVsZXMuZ3RlKT8gJ3ZhbHVlIG11",
            "c3QgYmUgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvICVzIG9yIGxlc3MgdGhh",
            "biAlcycuZm9ybWF0KFtydWxlcy5ndGUsIHJ1bGVzLmx0XSkgOiAnJwrVAQoQ",
            "c2ZpeGVkMzIuZ3RlX2x0ZRrAAWhhcyhydWxlcy5sdGUpICYmIHJ1bGVzLmx0",
            "ZSA+PSBydWxlcy5ndGUgJiYgKHRoaXMgPiBydWxlcy5sdGUgfHwgdGhpcyA8",
            "IHJ1bGVzLmd0ZSk/ICd2YWx1ZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBvciBl",
            "cXVhbCB0byAlcyBhbmQgbGVzcyB0aGFuIG9yIGVxdWFsIHRvICVzJy5mb3Jt",
            "YXQoW3J1bGVzLmd0ZSwgcnVsZXMubHRlXSkgOiAnJwrdAQoac2ZpeGVkMzIu",
            "Z3RlX2x0ZV9leGNsdXNpdmUavgFoYXMocnVsZXMubHRlKSAmJiBydWxlcy5s",
            "dGUgPCBydWxlcy5ndGUgJiYgKHJ1bGVzLmx0ZSA8IHRoaXMgJiYgdGhpcyA8",
            "IHJ1bGVzLmd0ZSk/ICd2YWx1ZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBvciBl",
            "cXVhbCB0byAlcyBvciBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gJXMnLmZvcm1h",
            "dChbcnVsZXMuZ3RlLCBydWxlcy5sdGVdKSA6ICcnSAFSA2d0ZRKGAQoCaW4Y",
            "BiADKA9CdsJIcwpxCgtzZml4ZWQzMi5pbhpiISh0aGlzIGluIGdldEZpZWxk",
            "KHJ1bGVzLCAnaW4nKSkgPyAndmFsdWUgbXVzdCBiZSBpbiBsaXN0ICVzJy5m",
            "b3JtYXQoW2dldEZpZWxkKHJ1bGVzLCAnaW4nKV0pIDogJydSAmluEoABCgZu",
            "b3RfaW4YByADKA9CacJIZgpkCg9zZml4ZWQzMi5ub3RfaW4aUXRoaXMgaW4g",
            "cnVsZXMubm90X2luID8gJ3ZhbHVlIG11c3Qgbm90IGJlIGluIGxpc3QgJXMn",
            "LmZvcm1hdChbcnVsZXMubm90X2luXSkgOiAnJ1IFbm90SW4SNwoHZXhhbXBs",
            "ZRgIIAMoD0IdwkgaChgKEHNmaXhlZDMyLmV4YW1wbGUaBHRydWVSB2V4YW1w",
            "bGUqCQjoBxCAgICAAkILCglsZXNzX3RoYW5CDgoMZ3JlYXRlcl90aGFuIu4V",
            "Cg1TRml4ZWQ2NFJ1bGVzEo0BCgVjb25zdBgBIAEoEEJ3wkh0CnIKDnNmaXhl",
            "ZDY0LmNvbnN0GmB0aGlzICE9IGdldEZpZWxkKHJ1bGVzLCAnY29uc3QnKSA/",
            "ICd2YWx1ZSBtdXN0IGVxdWFsICVzJy5mb3JtYXQoW2dldEZpZWxkKHJ1bGVz",
            "LCAnY29uc3QnKV0pIDogJydSBWNvbnN0EpEBCgJsdBgCIAEoEEJ/wkh8CnoK",
            "C3NmaXhlZDY0Lmx0GmshaGFzKHJ1bGVzLmd0ZSkgJiYgIWhhcyhydWxlcy5n",
            "dCkgJiYgdGhpcyA+PSBydWxlcy5sdD8gJ3ZhbHVlIG11c3QgYmUgbGVzcyB0",
            "aGFuICVzJy5mb3JtYXQoW3J1bGVzLmx0XSkgOiAnJ0gAUgJsdBKkAQoDbHRl",
            "GAMgASgQQo8BwkiLAQqIAQoMc2ZpeGVkNjQubHRlGnghaGFzKHJ1bGVzLmd0",
            "ZSkgJiYgIWhhcyhydWxlcy5ndCkgJiYgdGhpcyA+IHJ1bGVzLmx0ZT8gJ3Zh",
            "bHVlIG11c3QgYmUgbGVzcyB0aGFuIG9yIGVxdWFsIHRvICVzJy5mb3JtYXQo",
            "W3J1bGVzLmx0ZV0pIDogJydIAFIDbHRlEqoHCgJndBgEIAEoEEKXB8JIkwcK",
            "fQoLc2ZpeGVkNjQuZ3QabiFoYXMocnVsZXMubHQpICYmICFoYXMocnVsZXMu",
            "bHRlKSAmJiB0aGlzIDw9IHJ1bGVzLmd0PyAndmFsdWUgbXVzdCBiZSBncmVh",
            "dGVyIHRoYW4gJXMnLmZvcm1hdChbcnVsZXMuZ3RdKSA6ICcnCrYBCg5zZml4",
            "ZWQ2NC5ndF9sdBqjAWhhcyhydWxlcy5sdCkgJiYgcnVsZXMubHQgPj0gcnVs",
            "ZXMuZ3QgJiYgKHRoaXMgPj0gcnVsZXMubHQgfHwgdGhpcyA8PSBydWxlcy5n",
            "dCk/ICd2YWx1ZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAlcyBhbmQgbGVzcyB0",
            "aGFuICVzJy5mb3JtYXQoW3J1bGVzLmd0LCBydWxlcy5sdF0pIDogJycKvgEK",
            "GHNmaXhlZDY0Lmd0X2x0X2V4Y2x1c2l2ZRqhAWhhcyhydWxlcy5sdCkgJiYg",
            "cnVsZXMubHQgPCBydWxlcy5ndCAmJiAocnVsZXMubHQgPD0gdGhpcyAmJiB0",
            "aGlzIDw9IHJ1bGVzLmd0KT8gJ3ZhbHVlIG11c3QgYmUgZ3JlYXRlciB0aGFu",
            "ICVzIG9yIGxlc3MgdGhhbiAlcycuZm9ybWF0KFtydWxlcy5ndCwgcnVsZXMu",
            "bHRdKSA6ICcnCsYBCg9zZml4ZWQ2NC5ndF9sdGUasgFoYXMocnVsZXMubHRl",
            "KSAmJiBydWxlcy5sdGUgPj0gcnVsZXMuZ3QgJiYgKHRoaXMgPiBydWxlcy5s",
            "dGUgfHwgdGhpcyA8PSBydWxlcy5ndCk/ICd2YWx1ZSBtdXN0IGJlIGdyZWF0",
            "ZXIgdGhhbiAlcyBhbmQgbGVzcyB0aGFuIG9yIGVxdWFsIHRvICVzJy5mb3Jt",
            "YXQoW3J1bGVzLmd0LCBydWxlcy5sdGVdKSA6ICcnCs4BChlzZml4ZWQ2NC5n",
            "dF9sdGVfZXhjbHVzaXZlGrABaGFzKHJ1bGVzLmx0ZSkgJiYgcnVsZXMubHRl",
            "IDwgcnVsZXMuZ3QgJiYgKHJ1bGVzLmx0ZSA8IHRoaXMgJiYgdGhpcyA8PSBy",
            "dWxlcy5ndCk/ICd2YWx1ZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAlcyBvciBs",
            "ZXNzIHRoYW4gb3IgZXF1YWwgdG8gJXMnLmZvcm1hdChbcnVsZXMuZ3QsIHJ1",
            "bGVzLmx0ZV0pIDogJydIAVICZ3QS9wcKA2d0ZRgFIAEoEELiB8JI3gcKiwEK",
            "DHNmaXhlZDY0Lmd0ZRp7IWhhcyhydWxlcy5sdCkgJiYgIWhhcyhydWxlcy5s",
            "dGUpICYmIHRoaXMgPCBydWxlcy5ndGU/ICd2YWx1ZSBtdXN0IGJlIGdyZWF0",
            "ZXIgdGhhbiBvciBlcXVhbCB0byAlcycuZm9ybWF0KFtydWxlcy5ndGVdKSA6",
            "ICcnCsUBCg9zZml4ZWQ2NC5ndGVfbHQasQFoYXMocnVsZXMubHQpICYmIHJ1",
            "bGVzLmx0ID49IHJ1bGVzLmd0ZSAmJiAodGhpcyA+PSBydWxlcy5sdCB8fCB0",
            "aGlzIDwgcnVsZXMuZ3RlKT8gJ3ZhbHVlIG11c3QgYmUgZ3JlYXRlciB0aGFu",
            "IG9yIGVxdWFsIHRvICVzIGFuZCBsZXNzIHRoYW4gJXMnLmZvcm1hdChbcnVs",
            "ZXMuZ3RlLCBydWxlcy5sdF0pIDogJycKzQEKGXNmaXhlZDY0Lmd0ZV9sdF9l",
            "eGNsdXNpdmUarwFoYXMocnVsZXMubHQpICYmIHJ1bGVzLmx0IDwgcnVsZXMu",
            "Z3RlICYmIChydWxlcy5sdCA8PSB0aGlzICYmIHRoaXMgPCBydWxlcy5ndGUp",
            "PyAndmFsdWUgbXVzdCBiZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gJXMg",
            "b3IgbGVzcyB0aGFuICVzJy5mb3JtYXQoW3J1bGVzLmd0ZSwgcnVsZXMubHRd",
            "KSA6ICcnCtUBChBzZml4ZWQ2NC5ndGVfbHRlGsABaGFzKHJ1bGVzLmx0ZSkg",
            "JiYgcnVsZXMubHRlID49IHJ1bGVzLmd0ZSAmJiAodGhpcyA+IHJ1bGVzLmx0",
            "ZSB8fCB0aGlzIDwgcnVsZXMuZ3RlKT8gJ3ZhbHVlIG11c3QgYmUgZ3JlYXRl",
            "ciB0aGFuIG9yIGVxdWFsIHRvICVzIGFuZCBsZXNzIHRoYW4gb3IgZXF1YWwg",
            "dG8gJXMnLmZvcm1hdChbcnVsZXMuZ3RlLCBydWxlcy5sdGVdKSA6ICcnCt0B",
            "ChpzZml4ZWQ2NC5ndGVfbHRlX2V4Y2x1c2l2ZRq+AWhhcyhydWxlcy5sdGUp",
            "ICYmIHJ1bGVzLmx0ZSA8IHJ1bGVzLmd0ZSAmJiAocnVsZXMubHRlIDwgdGhp",
            "cyAmJiB0aGlzIDwgcnVsZXMuZ3RlKT8gJ3ZhbHVlIG11c3QgYmUgZ3JlYXRl",
            "ciB0aGFuIG9yIGVxdWFsIHRvICVzIG9yIGxlc3MgdGhhbiBvciBlcXVhbCB0",
            "byAlcycuZm9ybWF0KFtydWxlcy5ndGUsIHJ1bGVzLmx0ZV0pIDogJydIAVID",
            "Z3RlEoYBCgJpbhgGIAMoEEJ2wkhzCnEKC3NmaXhlZDY0LmluGmIhKHRoaXMg",
            "aW4gZ2V0RmllbGQocnVsZXMsICdpbicpKSA/ICd2YWx1ZSBtdXN0IGJlIGlu",
            "IGxpc3QgJXMnLmZvcm1hdChbZ2V0RmllbGQocnVsZXMsICdpbicpXSkgOiAn",
            "J1ICaW4SgAEKBm5vdF9pbhgHIAMoEEJpwkhmCmQKD3NmaXhlZDY0Lm5vdF9p",
            "bhpRdGhpcyBpbiBydWxlcy5ub3RfaW4gPyAndmFsdWUgbXVzdCBub3QgYmUg",
            "aW4gbGlzdCAlcycuZm9ybWF0KFtydWxlcy5ub3RfaW5dKSA6ICcnUgVub3RJ",
            "bhI3CgdleGFtcGxlGAggAygQQh3CSBoKGAoQc2ZpeGVkNjQuZXhhbXBsZRoE",
            "dHJ1ZVIHZXhhbXBsZSoJCOgHEICAgIACQgsKCWxlc3NfdGhhbkIOCgxncmVh",
            "dGVyX3RoYW4i1wEKCUJvb2xSdWxlcxKJAQoFY29uc3QYASABKAhCc8JIcApu",
            "Cgpib29sLmNvbnN0GmB0aGlzICE9IGdldEZpZWxkKHJ1bGVzLCAnY29uc3Qn",
            "KSA/ICd2YWx1ZSBtdXN0IGVxdWFsICVzJy5mb3JtYXQoW2dldEZpZWxkKHJ1",
            "bGVzLCAnY29uc3QnKV0pIDogJydSBWNvbnN0EjMKB2V4YW1wbGUYAiADKAhC",
            "GcJIFgoUCgxib29sLmV4YW1wbGUaBHRydWVSB2V4YW1wbGUqCQjoBxCAgICA",
            "AiLROQoLU3RyaW5nUnVsZXMSjQEKBWNvbnN0GAEgASgJQnfCSHQKcgoMc3Ry",
            "aW5nLmNvbnN0GmJ0aGlzICE9IGdldEZpZWxkKHJ1bGVzLCAnY29uc3QnKSA/",
            "ICd2YWx1ZSBtdXN0IGVxdWFsIGAlc2AnLmZvcm1hdChbZ2V0RmllbGQocnVs",
            "ZXMsICdjb25zdCcpXSkgOiAnJ1IFY29uc3QSgwEKA2xlbhgTIAEoBEJxwkhu",
            "CmwKCnN0cmluZy5sZW4aXnVpbnQodGhpcy5zaXplKCkpICE9IHJ1bGVzLmxl",
            "biA/ICd2YWx1ZSBsZW5ndGggbXVzdCBiZSAlcyBjaGFyYWN0ZXJzJy5mb3Jt",
            "YXQoW3J1bGVzLmxlbl0pIDogJydSA2xlbhKhAQoHbWluX2xlbhgCIAEoBEKH",
            "AcJIgwEKgAEKDnN0cmluZy5taW5fbGVuGm51aW50KHRoaXMuc2l6ZSgpKSA8",
            "IHJ1bGVzLm1pbl9sZW4gPyAndmFsdWUgbGVuZ3RoIG11c3QgYmUgYXQgbGVh",
            "c3QgJXMgY2hhcmFjdGVycycuZm9ybWF0KFtydWxlcy5taW5fbGVuXSkgOiAn",
            "J1IGbWluTGVuEp8BCgdtYXhfbGVuGAMgASgEQoUBwkiBAQp/Cg5zdHJpbmcu",
            "bWF4X2xlbhptdWludCh0aGlzLnNpemUoKSkgPiBydWxlcy5tYXhfbGVuID8g",
            "J3ZhbHVlIGxlbmd0aCBtdXN0IGJlIGF0IG1vc3QgJXMgY2hhcmFjdGVycycu",
            "Zm9ybWF0KFtydWxlcy5tYXhfbGVuXSkgOiAnJ1IGbWF4TGVuEqUBCglsZW5f",
            "Ynl0ZXMYFCABKARChwHCSIMBCoABChBzdHJpbmcubGVuX2J5dGVzGmx1aW50",
            "KGJ5dGVzKHRoaXMpLnNpemUoKSkgIT0gcnVsZXMubGVuX2J5dGVzID8gJ3Zh",
            "bHVlIGxlbmd0aCBtdXN0IGJlICVzIGJ5dGVzJy5mb3JtYXQoW3J1bGVzLmxl",
            "bl9ieXRlc10pIDogJydSCGxlbkJ5dGVzEq0BCgltaW5fYnl0ZXMYBCABKARC",
            "jwHCSIsBCogBChBzdHJpbmcubWluX2J5dGVzGnR1aW50KGJ5dGVzKHRoaXMp",
            "LnNpemUoKSkgPCBydWxlcy5taW5fYnl0ZXMgPyAndmFsdWUgbGVuZ3RoIG11",
            "c3QgYmUgYXQgbGVhc3QgJXMgYnl0ZXMnLmZvcm1hdChbcnVsZXMubWluX2J5",
            "dGVzXSkgOiAnJ1IIbWluQnl0ZXMSrAEKCW1heF9ieXRlcxgFIAEoBEKOAcJI",
            "igEKhwEKEHN0cmluZy5tYXhfYnl0ZXMac3VpbnQoYnl0ZXModGhpcykuc2l6",
            "ZSgpKSA+IHJ1bGVzLm1heF9ieXRlcyA/ICd2YWx1ZSBsZW5ndGggbXVzdCBi",
            "ZSBhdCBtb3N0ICVzIGJ5dGVzJy5mb3JtYXQoW3J1bGVzLm1heF9ieXRlc10p",
            "IDogJydSCG1heEJ5dGVzEpYBCgdwYXR0ZXJuGAYgASgJQnzCSHkKdwoOc3Ry",
            "aW5nLnBhdHRlcm4aZSF0aGlzLm1hdGNoZXMocnVsZXMucGF0dGVybikgPyAn",
            "dmFsdWUgZG9lcyBub3QgbWF0Y2ggcmVnZXggcGF0dGVybiBgJXNgJy5mb3Jt",
            "YXQoW3J1bGVzLnBhdHRlcm5dKSA6ICcnUgdwYXR0ZXJuEowBCgZwcmVmaXgY",
            "ByABKAlCdMJIcQpvCg1zdHJpbmcucHJlZml4Gl4hdGhpcy5zdGFydHNXaXRo",
            "KHJ1bGVzLnByZWZpeCkgPyAndmFsdWUgZG9lcyBub3QgaGF2ZSBwcmVmaXgg",
            "YCVzYCcuZm9ybWF0KFtydWxlcy5wcmVmaXhdKSA6ICcnUgZwcmVmaXgSigEK",
            "BnN1ZmZpeBgIIAEoCUJywkhvCm0KDXN0cmluZy5zdWZmaXgaXCF0aGlzLmVu",
            "ZHNXaXRoKHJ1bGVzLnN1ZmZpeCkgPyAndmFsdWUgZG9lcyBub3QgaGF2ZSBz",
            "dWZmaXggYCVzYCcuZm9ybWF0KFtydWxlcy5zdWZmaXhdKSA6ICcnUgZzdWZm",
            "aXgSmgEKCGNvbnRhaW5zGAkgASgJQn7CSHsKeQoPc3RyaW5nLmNvbnRhaW5z",
            "GmYhdGhpcy5jb250YWlucyhydWxlcy5jb250YWlucykgPyAndmFsdWUgZG9l",
            "cyBub3QgY29udGFpbiBzdWJzdHJpbmcgYCVzYCcuZm9ybWF0KFtydWxlcy5j",
            "b250YWluc10pIDogJydSCGNvbnRhaW5zEqUBCgxub3RfY29udGFpbnMYFyAB",
            "KAlCgQHCSH4KfAoTc3RyaW5nLm5vdF9jb250YWlucxpldGhpcy5jb250YWlu",
            "cyhydWxlcy5ub3RfY29udGFpbnMpID8gJ3ZhbHVlIGNvbnRhaW5zIHN1YnN0",
            "cmluZyBgJXNgJy5mb3JtYXQoW3J1bGVzLm5vdF9jb250YWluc10pIDogJydS",
            "C25vdENvbnRhaW5zEoQBCgJpbhgKIAMoCUJ0wkhxCm8KCXN0cmluZy5pbhpi",
            "ISh0aGlzIGluIGdldEZpZWxkKHJ1bGVzLCAnaW4nKSkgPyAndmFsdWUgbXVz",
            "dCBiZSBpbiBsaXN0ICVzJy5mb3JtYXQoW2dldEZpZWxkKHJ1bGVzLCAnaW4n",
            "KV0pIDogJydSAmluEn4KBm5vdF9pbhgLIAMoCUJnwkhkCmIKDXN0cmluZy5u",
            "b3RfaW4aUXRoaXMgaW4gcnVsZXMubm90X2luID8gJ3ZhbHVlIG11c3Qgbm90",
            "IGJlIGluIGxpc3QgJXMnLmZvcm1hdChbcnVsZXMubm90X2luXSkgOiAnJ1IF",
            "bm90SW4S5gEKBWVtYWlsGAwgASgIQs0BwkjJAQphCgxzdHJpbmcuZW1haWwS",
            "I3ZhbHVlIG11c3QgYmUgYSB2YWxpZCBlbWFpbCBhZGRyZXNzGiwhcnVsZXMu",
            "ZW1haWwgfHwgdGhpcyA9PSAnJyB8fCB0aGlzLmlzRW1haWwoKQpkChJzdHJp",
            "bmcuZW1haWxfZW1wdHkSMnZhbHVlIGlzIGVtcHR5LCB3aGljaCBpcyBub3Qg",
            "YSB2YWxpZCBlbWFpbCBhZGRyZXNzGhohcnVsZXMuZW1haWwgfHwgdGhpcyAh",
            "PSAnJ0gAUgVlbWFpbBLxAQoIaG9zdG5hbWUYDSABKAhC0gHCSM4BCmUKD3N0",
            "cmluZy5ob3N0bmFtZRIedmFsdWUgbXVzdCBiZSBhIHZhbGlkIGhvc3RuYW1l",
            "GjIhcnVsZXMuaG9zdG5hbWUgfHwgdGhpcyA9PSAnJyB8fCB0aGlzLmlzSG9z",
            "dG5hbWUoKQplChVzdHJpbmcuaG9zdG5hbWVfZW1wdHkSLXZhbHVlIGlzIGVt",
            "cHR5LCB3aGljaCBpcyBub3QgYSB2YWxpZCBob3N0bmFtZRodIXJ1bGVzLmhv",
            "c3RuYW1lIHx8IHRoaXMgIT0gJydIAFIIaG9zdG5hbWUSywEKAmlwGA4gASgI",
            "QrgBwki0AQpVCglzdHJpbmcuaXASIHZhbHVlIG11c3QgYmUgYSB2YWxpZCBJ",
            "UCBhZGRyZXNzGiYhcnVsZXMuaXAgfHwgdGhpcyA9PSAnJyB8fCB0aGlzLmlz",
            "SXAoKQpbCg9zdHJpbmcuaXBfZW1wdHkSL3ZhbHVlIGlzIGVtcHR5LCB3aGlj",
            "aCBpcyBub3QgYSB2YWxpZCBJUCBhZGRyZXNzGhchcnVsZXMuaXAgfHwgdGhp",
            "cyAhPSAnJ0gAUgJpcBLcAQoEaXB2NBgPIAEoCELFAcJIwQEKXAoLc3RyaW5n",
            "LmlwdjQSInZhbHVlIG11c3QgYmUgYSB2YWxpZCBJUHY0IGFkZHJlc3MaKSFy",
            "dWxlcy5pcHY0IHx8IHRoaXMgPT0gJycgfHwgdGhpcy5pc0lwKDQpCmEKEXN0",
            "cmluZy5pcHY0X2VtcHR5EjF2YWx1ZSBpcyBlbXB0eSwgd2hpY2ggaXMgbm90",
            "IGEgdmFsaWQgSVB2NCBhZGRyZXNzGhkhcnVsZXMuaXB2NCB8fCB0aGlzICE9",
            "ICcnSABSBGlwdjQS3AEKBGlwdjYYECABKAhCxQHCSMEBClwKC3N0cmluZy5p",
            "cHY2EiJ2YWx1ZSBtdXN0IGJlIGEgdmFsaWQgSVB2NiBhZGRyZXNzGikhcnVs",
            "ZXMuaXB2NiB8fCB0aGlzID09ICcnIHx8IHRoaXMuaXNJcCg2KQphChFzdHJp",
            "bmcuaXB2Nl9lbXB0eRIxdmFsdWUgaXMgZW1wdHksIHdoaWNoIGlzIG5vdCBh",
            "IHZhbGlkIElQdjYgYWRkcmVzcxoZIXJ1bGVzLmlwdjYgfHwgdGhpcyAhPSAn",
            "J0gAUgRpcHY2EsQBCgN1cmkYESABKAhCrwHCSKsBClEKCnN0cmluZy51cmkS",
            "GXZhbHVlIG11c3QgYmUgYSB2YWxpZCBVUkkaKCFydWxlcy51cmkgfHwgdGhp",
            "cyA9PSAnJyB8fCB0aGlzLmlzVXJpKCkKVgoQc3RyaW5nLnVyaV9lbXB0eRIo",
            "dmFsdWUgaXMgZW1wdHksIHdoaWNoIGlzIG5vdCBhIHZhbGlkIFVSSRoYIXJ1",
            "bGVzLnVyaSB8fCB0aGlzICE9ICcnSABSA3VyaRJ4Cgd1cmlfcmVmGBIgASgI",
            "Ql3CSFoKWAoOc3RyaW5nLnVyaV9yZWYSI3ZhbHVlIG11c3QgYmUgYSB2YWxp",
            "ZCBVUkkgUmVmZXJlbmNlGiEhcnVsZXMudXJpX3JlZiB8fCB0aGlzLmlzVXJp",
            "UmVmKClIAFIGdXJpUmVmEpkCCgdhZGRyZXNzGBUgASgIQvwBwkj4AQqBAQoO",
            "c3RyaW5nLmFkZHJlc3MSLXZhbHVlIG11c3QgYmUgYSB2YWxpZCBob3N0bmFt",
            "ZSwgb3IgaXAgYWRkcmVzcxpAIXJ1bGVzLmFkZHJlc3MgfHwgdGhpcyA9PSAn",
            "JyB8fCB0aGlzLmlzSG9zdG5hbWUoKSB8fCB0aGlzLmlzSXAoKQpyChRzdHJp",
            "bmcuYWRkcmVzc19lbXB0eRI8dmFsdWUgaXMgZW1wdHksIHdoaWNoIGlzIG5v",
            "dCBhIHZhbGlkIGhvc3RuYW1lLCBvciBpcCBhZGRyZXNzGhwhcnVsZXMuYWRk",
            "cmVzcyB8fCB0aGlzICE9ICcnSABSB2FkZHJlc3MSngIKBHV1aWQYFiABKAhC",
            "hwLCSIMCCqUBCgtzdHJpbmcudXVpZBIadmFsdWUgbXVzdCBiZSBhIHZhbGlk",
            "IFVVSUQaeiFydWxlcy51dWlkIHx8IHRoaXMgPT0gJycgfHwgdGhpcy5tYXRj",
            "aGVzKCdeWzAtOWEtZkEtRl17OH0tWzAtOWEtZkEtRl17NH0tWzAtOWEtZkEt",
            "Rl17NH0tWzAtOWEtZkEtRl17NH0tWzAtOWEtZkEtRl17MTJ9JCcpClkKEXN0",
            "cmluZy51dWlkX2VtcHR5Eil2YWx1ZSBpcyBlbXB0eSwgd2hpY2ggaXMgbm90",
            "IGEgdmFsaWQgVVVJRBoZIXJ1bGVzLnV1aWQgfHwgdGhpcyAhPSAnJ0gAUgR1",
            "dWlkEvcBCgV0dXVpZBghIAEoCELeAcJI2gEKcwoMc3RyaW5nLnR1dWlkEiJ2",
            "YWx1ZSBtdXN0IGJlIGEgdmFsaWQgdHJpbW1lZCBVVUlEGj8hcnVsZXMudHV1",
            "aWQgfHwgdGhpcyA9PSAnJyB8fCB0aGlzLm1hdGNoZXMoJ15bMC05YS1mQS1G",
            "XXszMn0kJykKYwoSc3RyaW5nLnR1dWlkX2VtcHR5EjF2YWx1ZSBpcyBlbXB0",
            "eSwgd2hpY2ggaXMgbm90IGEgdmFsaWQgdHJpbW1lZCBVVUlEGhohcnVsZXMu",
            "dHV1aWQgfHwgdGhpcyAhPSAnJ0gAUgV0dXVpZBKnAgoRaXBfd2l0aF9wcmVm",
            "aXhsZW4YGiABKAhC+AHCSPQBCngKGHN0cmluZy5pcF93aXRoX3ByZWZpeGxl",
            "bhIfdmFsdWUgbXVzdCBiZSBhIHZhbGlkIElQIHByZWZpeBo7IXJ1bGVzLmlw",
            "X3dpdGhfcHJlZml4bGVuIHx8IHRoaXMgPT0gJycgfHwgdGhpcy5pc0lwUHJl",
            "Zml4KCkKeAoec3RyaW5nLmlwX3dpdGhfcHJlZml4bGVuX2VtcHR5Ei52YWx1",
            "ZSBpcyBlbXB0eSwgd2hpY2ggaXMgbm90IGEgdmFsaWQgSVAgcHJlZml4GiYh",
            "cnVsZXMuaXBfd2l0aF9wcmVmaXhsZW4gfHwgdGhpcyAhPSAnJ0gAUg9pcFdp",
            "dGhQcmVmaXhsZW4S4gIKE2lwdjRfd2l0aF9wcmVmaXhsZW4YGyABKAhCrwLC",
            "SKsCCpMBChpzdHJpbmcuaXB2NF93aXRoX3ByZWZpeGxlbhI1dmFsdWUgbXVz",
            "dCBiZSBhIHZhbGlkIElQdjQgYWRkcmVzcyB3aXRoIHByZWZpeCBsZW5ndGga",
            "PiFydWxlcy5pcHY0X3dpdGhfcHJlZml4bGVuIHx8IHRoaXMgPT0gJycgfHwg",
            "dGhpcy5pc0lwUHJlZml4KDQpCpIBCiBzdHJpbmcuaXB2NF93aXRoX3ByZWZp",
            "eGxlbl9lbXB0eRJEdmFsdWUgaXMgZW1wdHksIHdoaWNoIGlzIG5vdCBhIHZh",
            "bGlkIElQdjQgYWRkcmVzcyB3aXRoIHByZWZpeCBsZW5ndGgaKCFydWxlcy5p",
            "cHY0X3dpdGhfcHJlZml4bGVuIHx8IHRoaXMgIT0gJydIAFIRaXB2NFdpdGhQ",
            "cmVmaXhsZW4S4gIKE2lwdjZfd2l0aF9wcmVmaXhsZW4YHCABKAhCrwLCSKsC",
            "CpMBChpzdHJpbmcuaXB2Nl93aXRoX3ByZWZpeGxlbhI1dmFsdWUgbXVzdCBi",
            "ZSBhIHZhbGlkIElQdjYgYWRkcmVzcyB3aXRoIHByZWZpeCBsZW5ndGgaPiFy",
            "dWxlcy5pcHY2X3dpdGhfcHJlZml4bGVuIHx8IHRoaXMgPT0gJycgfHwgdGhp",
            "cy5pc0lwUHJlZml4KDYpCpIBCiBzdHJpbmcuaXB2Nl93aXRoX3ByZWZpeGxl",
            "bl9lbXB0eRJEdmFsdWUgaXMgZW1wdHksIHdoaWNoIGlzIG5vdCBhIHZhbGlk",
            "IElQdjYgYWRkcmVzcyB3aXRoIHByZWZpeCBsZW5ndGgaKCFydWxlcy5pcHY2",
            "X3dpdGhfcHJlZml4bGVuIHx8IHRoaXMgIT0gJydIAFIRaXB2NldpdGhQcmVm",
            "aXhsZW4S/AEKCWlwX3ByZWZpeBgdIAEoCELcAcJI2AEKbAoQc3RyaW5nLmlw",
            "X3ByZWZpeBIfdmFsdWUgbXVzdCBiZSBhIHZhbGlkIElQIHByZWZpeBo3IXJ1",
            "bGVzLmlwX3ByZWZpeCB8fCB0aGlzID09ICcnIHx8IHRoaXMuaXNJcFByZWZp",
            "eCh0cnVlKQpoChZzdHJpbmcuaXBfcHJlZml4X2VtcHR5Ei52YWx1ZSBpcyBl",
            "bXB0eSwgd2hpY2ggaXMgbm90IGEgdmFsaWQgSVAgcHJlZml4Gh4hcnVsZXMu",
            "aXBfcHJlZml4IHx8IHRoaXMgIT0gJydIAFIIaXBQcmVmaXgSjwIKC2lwdjRf",
            "cHJlZml4GB4gASgIQusBwkjnAQp1ChJzdHJpbmcuaXB2NF9wcmVmaXgSIXZh",
            "bHVlIG11c3QgYmUgYSB2YWxpZCBJUHY0IHByZWZpeBo8IXJ1bGVzLmlwdjRf",
            "cHJlZml4IHx8IHRoaXMgPT0gJycgfHwgdGhpcy5pc0lwUHJlZml4KDQsIHRy",
            "dWUpCm4KGHN0cmluZy5pcHY0X3ByZWZpeF9lbXB0eRIwdmFsdWUgaXMgZW1w",
            "dHksIHdoaWNoIGlzIG5vdCBhIHZhbGlkIElQdjQgcHJlZml4GiAhcnVsZXMu",
            "aXB2NF9wcmVmaXggfHwgdGhpcyAhPSAnJ0gAUgppcHY0UHJlZml4Eo8CCgtp",
            "cHY2X3ByZWZpeBgfIAEoCELrAcJI5wEKdQoSc3RyaW5nLmlwdjZfcHJlZml4",
            "EiF2YWx1ZSBtdXN0IGJlIGEgdmFsaWQgSVB2NiBwcmVmaXgaPCFydWxlcy5p",
            "cHY2X3ByZWZpeCB8fCB0aGlzID09ICcnIHx8IHRoaXMuaXNJcFByZWZpeCg2",
            "LCB0cnVlKQpuChhzdHJpbmcuaXB2Nl9wcmVmaXhfZW1wdHkSMHZhbHVlIGlz",
            "IGVtcHR5LCB3aGljaCBpcyBub3QgYSB2YWxpZCBJUHY2IHByZWZpeBogIXJ1",
            "bGVzLmlwdjZfcHJlZml4IHx8IHRoaXMgIT0gJydIAFIKaXB2NlByZWZpeBLC",
            "AgoNaG9zdF9hbmRfcG9ydBggIAEoCEKbAsJIlwIKmQEKFHN0cmluZy5ob3N0",
            "X2FuZF9wb3J0EkF2YWx1ZSBtdXN0IGJlIGEgdmFsaWQgaG9zdCAoaG9zdG5h",
            "bWUgb3IgSVAgYWRkcmVzcykgYW5kIHBvcnQgcGFpcho+IXJ1bGVzLmhvc3Rf",
            "YW5kX3BvcnQgfHwgdGhpcyA9PSAnJyB8fCB0aGlzLmlzSG9zdEFuZFBvcnQo",
            "dHJ1ZSkKeQoac3RyaW5nLmhvc3RfYW5kX3BvcnRfZW1wdHkSN3ZhbHVlIGlz",
            "IGVtcHR5LCB3aGljaCBpcyBub3QgYSB2YWxpZCBob3N0IGFuZCBwb3J0IHBh",
            "aXIaIiFydWxlcy5ob3N0X2FuZF9wb3J0IHx8IHRoaXMgIT0gJydIAFILaG9z",
            "dEFuZFBvcnQSuAUKEHdlbGxfa25vd25fcmVnZXgYGCABKA4yGC5idWYudmFs",
            "aWRhdGUuS25vd25SZWdleELxBMJI7QQK8AEKI3N0cmluZy53ZWxsX2tub3du",
            "X3JlZ2V4LmhlYWRlcl9uYW1lEiZ2YWx1ZSBtdXN0IGJlIGEgdmFsaWQgSFRU",
            "UCBoZWFkZXIgbmFtZRqgAXJ1bGVzLndlbGxfa25vd25fcmVnZXggIT0gMSB8",
            "fCB0aGlzID09ICcnIHx8IHRoaXMubWF0Y2hlcyghaGFzKHJ1bGVzLnN0cmlj",
            "dCkgfHwgcnVsZXMuc3RyaWN0ID8nXjo/WzAtOWEtekEtWiEjJCUmXCcqKy0u",
            "Xl98flx4NjBdKyQnIDonXlteXHUwMDAwXHUwMDBBXHUwMDBEXSskJykKjQEK",
            "KXN0cmluZy53ZWxsX2tub3duX3JlZ2V4LmhlYWRlcl9uYW1lX2VtcHR5EjV2",
            "YWx1ZSBpcyBlbXB0eSwgd2hpY2ggaXMgbm90IGEgdmFsaWQgSFRUUCBoZWFk",
            "ZXIgbmFtZRopcnVsZXMud2VsbF9rbm93bl9yZWdleCAhPSAxIHx8IHRoaXMg",
            "IT0gJycK5wEKJHN0cmluZy53ZWxsX2tub3duX3JlZ2V4LmhlYWRlcl92YWx1",
            "ZRIndmFsdWUgbXVzdCBiZSBhIHZhbGlkIEhUVFAgaGVhZGVyIHZhbHVlGpUB",
            "cnVsZXMud2VsbF9rbm93bl9yZWdleCAhPSAyIHx8IHRoaXMubWF0Y2hlcygh",
            "aGFzKHJ1bGVzLnN0cmljdCkgfHwgcnVsZXMuc3RyaWN0ID8nXlteXHUwMDAw",
            "LVx1MDAwOFx1MDAwQS1cdTAwMUZcdTAwN0ZdKiQnIDonXlteXHUwMDAwXHUw",
            "MDBBXHUwMDBEXSokJylIAFIOd2VsbEtub3duUmVnZXgSFgoGc3RyaWN0GBkg",
            "ASgIUgZzdHJpY3QSNQoHZXhhbXBsZRgiIAMoCUIbwkgYChYKDnN0cmluZy5l",
            "eGFtcGxlGgR0cnVlUgdleGFtcGxlKgkI6AcQgICAgAJCDAoKd2VsbF9rbm93",
            "biLOEQoKQnl0ZXNSdWxlcxKHAQoFY29uc3QYASABKAxCccJIbgpsCgtieXRl",
            "cy5jb25zdBpddGhpcyAhPSBnZXRGaWVsZChydWxlcywgJ2NvbnN0JykgPyAn",
            "dmFsdWUgbXVzdCBiZSAleCcuZm9ybWF0KFtnZXRGaWVsZChydWxlcywgJ2Nv",
            "bnN0JyldKSA6ICcnUgVjb25zdBJ9CgNsZW4YDSABKARCa8JIaApmCglieXRl",
            "cy5sZW4aWXVpbnQodGhpcy5zaXplKCkpICE9IHJ1bGVzLmxlbiA/ICd2YWx1",
            "ZSBsZW5ndGggbXVzdCBiZSAlcyBieXRlcycuZm9ybWF0KFtydWxlcy5sZW5d",
            "KSA6ICcnUgNsZW4SmAEKB21pbl9sZW4YAiABKARCf8JIfAp6Cg1ieXRlcy5t",
            "aW5fbGVuGml1aW50KHRoaXMuc2l6ZSgpKSA8IHJ1bGVzLm1pbl9sZW4gPyAn",
            "dmFsdWUgbGVuZ3RoIG11c3QgYmUgYXQgbGVhc3QgJXMgYnl0ZXMnLmZvcm1h",
            "dChbcnVsZXMubWluX2xlbl0pIDogJydSBm1pbkxlbhKQAQoHbWF4X2xlbhgD",
            "IAEoBEJ3wkh0CnIKDWJ5dGVzLm1heF9sZW4aYXVpbnQodGhpcy5zaXplKCkp",
            "ID4gcnVsZXMubWF4X2xlbiA/ICd2YWx1ZSBtdXN0IGJlIGF0IG1vc3QgJXMg",
            "Ynl0ZXMnLmZvcm1hdChbcnVsZXMubWF4X2xlbl0pIDogJydSBm1heExlbhKZ",
            "AQoHcGF0dGVybhgEIAEoCUJ/wkh8CnoKDWJ5dGVzLnBhdHRlcm4aaSFzdHJp",
            "bmcodGhpcykubWF0Y2hlcyhydWxlcy5wYXR0ZXJuKSA/ICd2YWx1ZSBtdXN0",
            "IG1hdGNoIHJlZ2V4IHBhdHRlcm4gYCVzYCcuZm9ybWF0KFtydWxlcy5wYXR0",
            "ZXJuXSkgOiAnJ1IHcGF0dGVybhKJAQoGcHJlZml4GAUgASgMQnHCSG4KbAoM",
            "Ynl0ZXMucHJlZml4GlwhdGhpcy5zdGFydHNXaXRoKHJ1bGVzLnByZWZpeCkg",
            "PyAndmFsdWUgZG9lcyBub3QgaGF2ZSBwcmVmaXggJXgnLmZvcm1hdChbcnVs",
            "ZXMucHJlZml4XSkgOiAnJ1IGcHJlZml4EocBCgZzdWZmaXgYBiABKAxCb8JI",
            "bApqCgxieXRlcy5zdWZmaXgaWiF0aGlzLmVuZHNXaXRoKHJ1bGVzLnN1ZmZp",
            "eCkgPyAndmFsdWUgZG9lcyBub3QgaGF2ZSBzdWZmaXggJXgnLmZvcm1hdChb",
            "cnVsZXMuc3VmZml4XSkgOiAnJ1IGc3VmZml4Eo0BCghjb250YWlucxgHIAEo",
            "DEJxwkhuCmwKDmJ5dGVzLmNvbnRhaW5zGlohdGhpcy5jb250YWlucyhydWxl",
            "cy5jb250YWlucykgPyAndmFsdWUgZG9lcyBub3QgY29udGFpbiAleCcuZm9y",
            "bWF0KFtydWxlcy5jb250YWluc10pIDogJydSCGNvbnRhaW5zEqsBCgJpbhgI",
            "IAMoDEKaAcJIlgEKkwEKCGJ5dGVzLmluGoYBZ2V0RmllbGQocnVsZXMsICdp",
            "bicpLnNpemUoKSA+IDAgJiYgISh0aGlzIGluIGdldEZpZWxkKHJ1bGVzLCAn",
            "aW4nKSkgPyAndmFsdWUgbXVzdCBiZSBpbiBsaXN0ICVzJy5mb3JtYXQoW2dl",
            "dEZpZWxkKHJ1bGVzLCAnaW4nKV0pIDogJydSAmluEn0KBm5vdF9pbhgJIAMo",
            "DEJmwkhjCmEKDGJ5dGVzLm5vdF9pbhpRdGhpcyBpbiBydWxlcy5ub3RfaW4g",
            "PyAndmFsdWUgbXVzdCBub3QgYmUgaW4gbGlzdCAlcycuZm9ybWF0KFtydWxl",
            "cy5ub3RfaW5dKSA6ICcnUgVub3RJbhLvAQoCaXAYCiABKAhC3AHCSNgBCnQK",
            "CGJ5dGVzLmlwEiB2YWx1ZSBtdXN0IGJlIGEgdmFsaWQgSVAgYWRkcmVzcxpG",
            "IXJ1bGVzLmlwIHx8IHRoaXMuc2l6ZSgpID09IDAgfHwgdGhpcy5zaXplKCkg",
            "PT0gNCB8fCB0aGlzLnNpemUoKSA9PSAxNgpgCg5ieXRlcy5pcF9lbXB0eRIv",
            "dmFsdWUgaXMgZW1wdHksIHdoaWNoIGlzIG5vdCBhIHZhbGlkIElQIGFkZHJl",
            "c3MaHSFydWxlcy5pcCB8fCB0aGlzLnNpemUoKSAhPSAwSABSAmlwEuoBCgRp",
            "cHY0GAsgASgIQtMBwkjPAQplCgpieXRlcy5pcHY0EiJ2YWx1ZSBtdXN0IGJl",
            "IGEgdmFsaWQgSVB2NCBhZGRyZXNzGjMhcnVsZXMuaXB2NCB8fCB0aGlzLnNp",
            "emUoKSA9PSAwIHx8IHRoaXMuc2l6ZSgpID09IDQKZgoQYnl0ZXMuaXB2NF9l",
            "bXB0eRIxdmFsdWUgaXMgZW1wdHksIHdoaWNoIGlzIG5vdCBhIHZhbGlkIElQ",
            "djQgYWRkcmVzcxofIXJ1bGVzLmlwdjQgfHwgdGhpcy5zaXplKCkgIT0gMEgA",
            "UgRpcHY0EusBCgRpcHY2GAwgASgIQtQBwkjQAQpmCgpieXRlcy5pcHY2EiJ2",
            "YWx1ZSBtdXN0IGJlIGEgdmFsaWQgSVB2NiBhZGRyZXNzGjQhcnVsZXMuaXB2",
            "NiB8fCB0aGlzLnNpemUoKSA9PSAwIHx8IHRoaXMuc2l6ZSgpID09IDE2CmYK",
            "EGJ5dGVzLmlwdjZfZW1wdHkSMXZhbHVlIGlzIGVtcHR5LCB3aGljaCBpcyBu",
            "b3QgYSB2YWxpZCBJUHY2IGFkZHJlc3MaHyFydWxlcy5pcHY2IHx8IHRoaXMu",
            "c2l6ZSgpICE9IDBIAFIEaXB2NhI0CgdleGFtcGxlGA4gAygMQhrCSBcKFQoN",
            "Ynl0ZXMuZXhhbXBsZRoEdHJ1ZVIHZXhhbXBsZSoJCOgHEICAgIACQgwKCndl",
            "bGxfa25vd24i/QMKCUVudW1SdWxlcxKJAQoFY29uc3QYASABKAVCc8JIcApu",
            "CgplbnVtLmNvbnN0GmB0aGlzICE9IGdldEZpZWxkKHJ1bGVzLCAnY29uc3Qn",
            "KSA/ICd2YWx1ZSBtdXN0IGVxdWFsICVzJy5mb3JtYXQoW2dldEZpZWxkKHJ1",
            "bGVzLCAnY29uc3QnKV0pIDogJydSBWNvbnN0EiEKDGRlZmluZWRfb25seRgC",
            "IAEoCFILZGVmaW5lZE9ubHkSggEKAmluGAMgAygFQnLCSG8KbQoHZW51bS5p",
            "bhpiISh0aGlzIGluIGdldEZpZWxkKHJ1bGVzLCAnaW4nKSkgPyAndmFsdWUg",
            "bXVzdCBiZSBpbiBsaXN0ICVzJy5mb3JtYXQoW2dldEZpZWxkKHJ1bGVzLCAn",
            "aW4nKV0pIDogJydSAmluEnwKBm5vdF9pbhgEIAMoBUJlwkhiCmAKC2VudW0u",
            "bm90X2luGlF0aGlzIGluIHJ1bGVzLm5vdF9pbiA/ICd2YWx1ZSBtdXN0IG5v",
            "dCBiZSBpbiBsaXN0ICVzJy5mb3JtYXQoW3J1bGVzLm5vdF9pbl0pIDogJydS",
            "BW5vdEluEjMKB2V4YW1wbGUYBSADKAVCGcJIFgoUCgxlbnVtLmV4YW1wbGUa",
            "BHRydWVSB2V4YW1wbGUqCQjoBxCAgICAAiKeBAoNUmVwZWF0ZWRSdWxlcxKo",
            "AQoJbWluX2l0ZW1zGAEgASgEQooBwkiGAQqDAQoScmVwZWF0ZWQubWluX2l0",
            "ZW1zGm11aW50KHRoaXMuc2l6ZSgpKSA8IHJ1bGVzLm1pbl9pdGVtcyA/ICd2",
            "YWx1ZSBtdXN0IGNvbnRhaW4gYXQgbGVhc3QgJWQgaXRlbShzKScuZm9ybWF0",
            "KFtydWxlcy5taW5faXRlbXNdKSA6ICcnUghtaW5JdGVtcxKsAQoJbWF4X2l0",
            "ZW1zGAIgASgEQo4BwkiKAQqHAQoScmVwZWF0ZWQubWF4X2l0ZW1zGnF1aW50",
            "KHRoaXMuc2l6ZSgpKSA+IHJ1bGVzLm1heF9pdGVtcyA/ICd2YWx1ZSBtdXN0",
            "IGNvbnRhaW4gbm8gbW9yZSB0aGFuICVzIGl0ZW0ocyknLmZvcm1hdChbcnVs",
            "ZXMubWF4X2l0ZW1zXSkgOiAnJ1IIbWF4SXRlbXMSeAoGdW5pcXVlGAMgASgI",
            "QmDCSF0KWwoPcmVwZWF0ZWQudW5pcXVlEihyZXBlYXRlZCB2YWx1ZSBtdXN0",
            "IGNvbnRhaW4gdW5pcXVlIGl0ZW1zGh4hcnVsZXMudW5pcXVlIHx8IHRoaXMu",
            "dW5pcXVlKClSBnVuaXF1ZRIuCgVpdGVtcxgEIAEoCzIYLmJ1Zi52YWxpZGF0",
            "ZS5GaWVsZFJ1bGVzUgVpdGVtcyoJCOgHEICAgIACIqwDCghNYXBSdWxlcxKZ",
            "AQoJbWluX3BhaXJzGAEgASgEQnzCSHkKdwoNbWFwLm1pbl9wYWlycxpmdWlu",
            "dCh0aGlzLnNpemUoKSkgPCBydWxlcy5taW5fcGFpcnMgPyAnbWFwIG11c3Qg",
            "YmUgYXQgbGVhc3QgJWQgZW50cmllcycuZm9ybWF0KFtydWxlcy5taW5fcGFp",
            "cnNdKSA6ICcnUghtaW5QYWlycxKYAQoJbWF4X3BhaXJzGAIgASgEQnvCSHgK",
            "dgoNbWFwLm1heF9wYWlycxpldWludCh0aGlzLnNpemUoKSkgPiBydWxlcy5t",
            "YXhfcGFpcnMgPyAnbWFwIG11c3QgYmUgYXQgbW9zdCAlZCBlbnRyaWVzJy5m",
            "b3JtYXQoW3J1bGVzLm1heF9wYWlyc10pIDogJydSCG1heFBhaXJzEiwKBGtl",
            "eXMYBCABKAsyGC5idWYudmFsaWRhdGUuRmllbGRSdWxlc1IEa2V5cxIwCgZ2",
            "YWx1ZXMYBSABKAsyGC5idWYudmFsaWRhdGUuRmllbGRSdWxlc1IGdmFsdWVz",
            "KgkI6AcQgICAgAIiMQoIQW55UnVsZXMSDgoCaW4YAiADKAlSAmluEhUKBm5v",
            "dF9pbhgDIAMoCVIFbm90SW4ixhcKDUR1cmF0aW9uUnVsZXMSqAEKBWNvbnN0",
            "GAIgASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uQnfCSHQKcgoOZHVy",
            "YXRpb24uY29uc3QaYHRoaXMgIT0gZ2V0RmllbGQocnVsZXMsICdjb25zdCcp",
            "ID8gJ3ZhbHVlIG11c3QgZXF1YWwgJXMnLmZvcm1hdChbZ2V0RmllbGQocnVs",
            "ZXMsICdjb25zdCcpXSkgOiAnJ1IFY29uc3QSrAEKAmx0GAMgASgLMhkuZ29v",
            "Z2xlLnByb3RvYnVmLkR1cmF0aW9uQn/CSHwKegoLZHVyYXRpb24ubHQaayFo",
            "YXMocnVsZXMuZ3RlKSAmJiAhaGFzKHJ1bGVzLmd0KSAmJiB0aGlzID49IHJ1",
            "bGVzLmx0PyAndmFsdWUgbXVzdCBiZSBsZXNzIHRoYW4gJXMnLmZvcm1hdChb",
            "cnVsZXMubHRdKSA6ICcnSABSAmx0Er8BCgNsdGUYBCABKAsyGS5nb29nbGUu",
            "cHJvdG9idWYuRHVyYXRpb25CjwHCSIsBCogBCgxkdXJhdGlvbi5sdGUaeCFo",
            "YXMocnVsZXMuZ3RlKSAmJiAhaGFzKHJ1bGVzLmd0KSAmJiB0aGlzID4gcnVs",
            "ZXMubHRlPyAndmFsdWUgbXVzdCBiZSBsZXNzIHRoYW4gb3IgZXF1YWwgdG8g",
            "JXMnLmZvcm1hdChbcnVsZXMubHRlXSkgOiAnJ0gAUgNsdGUSxQcKAmd0GAUg",
            "ASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uQpcHwkiTBwp9CgtkdXJh",
            "dGlvbi5ndBpuIWhhcyhydWxlcy5sdCkgJiYgIWhhcyhydWxlcy5sdGUpICYm",
            "IHRoaXMgPD0gcnVsZXMuZ3Q/ICd2YWx1ZSBtdXN0IGJlIGdyZWF0ZXIgdGhh",
            "biAlcycuZm9ybWF0KFtydWxlcy5ndF0pIDogJycKtgEKDmR1cmF0aW9uLmd0",
            "X2x0GqMBaGFzKHJ1bGVzLmx0KSAmJiBydWxlcy5sdCA+PSBydWxlcy5ndCAm",
            "JiAodGhpcyA+PSBydWxlcy5sdCB8fCB0aGlzIDw9IHJ1bGVzLmd0KT8gJ3Zh",
            "bHVlIG11c3QgYmUgZ3JlYXRlciB0aGFuICVzIGFuZCBsZXNzIHRoYW4gJXMn",
            "LmZvcm1hdChbcnVsZXMuZ3QsIHJ1bGVzLmx0XSkgOiAnJwq+AQoYZHVyYXRp",
            "b24uZ3RfbHRfZXhjbHVzaXZlGqEBaGFzKHJ1bGVzLmx0KSAmJiBydWxlcy5s",
            "dCA8IHJ1bGVzLmd0ICYmIChydWxlcy5sdCA8PSB0aGlzICYmIHRoaXMgPD0g",
            "cnVsZXMuZ3QpPyAndmFsdWUgbXVzdCBiZSBncmVhdGVyIHRoYW4gJXMgb3Ig",
            "bGVzcyB0aGFuICVzJy5mb3JtYXQoW3J1bGVzLmd0LCBydWxlcy5sdF0pIDog",
            "JycKxgEKD2R1cmF0aW9uLmd0X2x0ZRqyAWhhcyhydWxlcy5sdGUpICYmIHJ1",
            "bGVzLmx0ZSA+PSBydWxlcy5ndCAmJiAodGhpcyA+IHJ1bGVzLmx0ZSB8fCB0",
            "aGlzIDw9IHJ1bGVzLmd0KT8gJ3ZhbHVlIG11c3QgYmUgZ3JlYXRlciB0aGFu",
            "ICVzIGFuZCBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gJXMnLmZvcm1hdChbcnVs",
            "ZXMuZ3QsIHJ1bGVzLmx0ZV0pIDogJycKzgEKGWR1cmF0aW9uLmd0X2x0ZV9l",
            "eGNsdXNpdmUasAFoYXMocnVsZXMubHRlKSAmJiBydWxlcy5sdGUgPCBydWxl",
            "cy5ndCAmJiAocnVsZXMubHRlIDwgdGhpcyAmJiB0aGlzIDw9IHJ1bGVzLmd0",
            "KT8gJ3ZhbHVlIG11c3QgYmUgZ3JlYXRlciB0aGFuICVzIG9yIGxlc3MgdGhh",
            "biBvciBlcXVhbCB0byAlcycuZm9ybWF0KFtydWxlcy5ndCwgcnVsZXMubHRl",
            "XSkgOiAnJ0gBUgJndBKSCAoDZ3RlGAYgASgLMhkuZ29vZ2xlLnByb3RvYnVm",
            "LkR1cmF0aW9uQuIHwkjeBwqLAQoMZHVyYXRpb24uZ3RlGnshaGFzKHJ1bGVz",
            "Lmx0KSAmJiAhaGFzKHJ1bGVzLmx0ZSkgJiYgdGhpcyA8IHJ1bGVzLmd0ZT8g",
            "J3ZhbHVlIG11c3QgYmUgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvICVzJy5m",
            "b3JtYXQoW3J1bGVzLmd0ZV0pIDogJycKxQEKD2R1cmF0aW9uLmd0ZV9sdBqx",
            "AWhhcyhydWxlcy5sdCkgJiYgcnVsZXMubHQgPj0gcnVsZXMuZ3RlICYmICh0",
            "aGlzID49IHJ1bGVzLmx0IHx8IHRoaXMgPCBydWxlcy5ndGUpPyAndmFsdWUg",
            "bXVzdCBiZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gJXMgYW5kIGxlc3Mg",
            "dGhhbiAlcycuZm9ybWF0KFtydWxlcy5ndGUsIHJ1bGVzLmx0XSkgOiAnJwrN",
            "AQoZZHVyYXRpb24uZ3RlX2x0X2V4Y2x1c2l2ZRqvAWhhcyhydWxlcy5sdCkg",
            "JiYgcnVsZXMubHQgPCBydWxlcy5ndGUgJiYgKHJ1bGVzLmx0IDw9IHRoaXMg",
            "JiYgdGhpcyA8IHJ1bGVzLmd0ZSk/ICd2YWx1ZSBtdXN0IGJlIGdyZWF0ZXIg",
            "dGhhbiBvciBlcXVhbCB0byAlcyBvciBsZXNzIHRoYW4gJXMnLmZvcm1hdChb",
            "cnVsZXMuZ3RlLCBydWxlcy5sdF0pIDogJycK1QEKEGR1cmF0aW9uLmd0ZV9s",
            "dGUawAFoYXMocnVsZXMubHRlKSAmJiBydWxlcy5sdGUgPj0gcnVsZXMuZ3Rl",
            "ICYmICh0aGlzID4gcnVsZXMubHRlIHx8IHRoaXMgPCBydWxlcy5ndGUpPyAn",
            "dmFsdWUgbXVzdCBiZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gJXMgYW5k",
            "IGxlc3MgdGhhbiBvciBlcXVhbCB0byAlcycuZm9ybWF0KFtydWxlcy5ndGUs",
            "IHJ1bGVzLmx0ZV0pIDogJycK3QEKGmR1cmF0aW9uLmd0ZV9sdGVfZXhjbHVz",
            "aXZlGr4BaGFzKHJ1bGVzLmx0ZSkgJiYgcnVsZXMubHRlIDwgcnVsZXMuZ3Rl",
            "ICYmIChydWxlcy5sdGUgPCB0aGlzICYmIHRoaXMgPCBydWxlcy5ndGUpPyAn",
            "dmFsdWUgbXVzdCBiZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gJXMgb3Ig",
            "bGVzcyB0aGFuIG9yIGVxdWFsIHRvICVzJy5mb3JtYXQoW3J1bGVzLmd0ZSwg",
            "cnVsZXMubHRlXSkgOiAnJ0gBUgNndGUSoQEKAmluGAcgAygLMhkuZ29vZ2xl",
            "LnByb3RvYnVmLkR1cmF0aW9uQnbCSHMKcQoLZHVyYXRpb24uaW4aYiEodGhp",
            "cyBpbiBnZXRGaWVsZChydWxlcywgJ2luJykpID8gJ3ZhbHVlIG11c3QgYmUg",
            "aW4gbGlzdCAlcycuZm9ybWF0KFtnZXRGaWVsZChydWxlcywgJ2luJyldKSA6",
            "ICcnUgJpbhKbAQoGbm90X2luGAggAygLMhkuZ29vZ2xlLnByb3RvYnVmLkR1",
            "cmF0aW9uQmnCSGYKZAoPZHVyYXRpb24ubm90X2luGlF0aGlzIGluIHJ1bGVz",
            "Lm5vdF9pbiA/ICd2YWx1ZSBtdXN0IG5vdCBiZSBpbiBsaXN0ICVzJy5mb3Jt",
            "YXQoW3J1bGVzLm5vdF9pbl0pIDogJydSBW5vdEluElIKB2V4YW1wbGUYCSAD",
            "KAsyGS5nb29nbGUucHJvdG9idWYuRHVyYXRpb25CHcJIGgoYChBkdXJhdGlv",
            "bi5leGFtcGxlGgR0cnVlUgdleGFtcGxlKgkI6AcQgICAgAJCCwoJbGVzc190",
            "aGFuQg4KDGdyZWF0ZXJfdGhhbiLKGAoOVGltZXN0YW1wUnVsZXMSqgEKBWNv",
            "bnN0GAIgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEJ4wkh1CnMK",
            "D3RpbWVzdGFtcC5jb25zdBpgdGhpcyAhPSBnZXRGaWVsZChydWxlcywgJ2Nv",
            "bnN0JykgPyAndmFsdWUgbXVzdCBlcXVhbCAlcycuZm9ybWF0KFtnZXRGaWVs",
            "ZChydWxlcywgJ2NvbnN0JyldKSA6ICcnUgVjb25zdBKvAQoCbHQYAyABKAsy",
            "Gi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wQoABwkh9CnsKDHRpbWVzdGFt",
            "cC5sdBprIWhhcyhydWxlcy5ndGUpICYmICFoYXMocnVsZXMuZ3QpICYmIHRo",
            "aXMgPj0gcnVsZXMubHQ/ICd2YWx1ZSBtdXN0IGJlIGxlc3MgdGhhbiAlcycu",
            "Zm9ybWF0KFtydWxlcy5sdF0pIDogJydIAFICbHQSwQEKA2x0ZRgEIAEoCzIa",
            "Lmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCkAHCSIwBCokBCg10aW1lc3Rh",
            "bXAubHRlGnghaGFzKHJ1bGVzLmd0ZSkgJiYgIWhhcyhydWxlcy5ndCkgJiYg",
            "dGhpcyA+IHJ1bGVzLmx0ZT8gJ3ZhbHVlIG11c3QgYmUgbGVzcyB0aGFuIG9y",
            "IGVxdWFsIHRvICVzJy5mb3JtYXQoW3J1bGVzLmx0ZV0pIDogJydIAFIDbHRl",
            "EnMKBmx0X25vdxgHIAEoCEJawkhXClUKEHRpbWVzdGFtcC5sdF9ub3caQShy",
            "dWxlcy5sdF9ub3cgJiYgdGhpcyA+IG5vdykgPyAndmFsdWUgbXVzdCBiZSBs",
            "ZXNzIHRoYW4gbm93JyA6ICcnSABSBWx0Tm93EssHCgJndBgFIAEoCzIaLmdv",
            "b2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCnAfCSJgHCn4KDHRpbWVzdGFtcC5n",
            "dBpuIWhhcyhydWxlcy5sdCkgJiYgIWhhcyhydWxlcy5sdGUpICYmIHRoaXMg",
            "PD0gcnVsZXMuZ3Q/ICd2YWx1ZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAlcycu",
            "Zm9ybWF0KFtydWxlcy5ndF0pIDogJycKtwEKD3RpbWVzdGFtcC5ndF9sdBqj",
            "AWhhcyhydWxlcy5sdCkgJiYgcnVsZXMubHQgPj0gcnVsZXMuZ3QgJiYgKHRo",
            "aXMgPj0gcnVsZXMubHQgfHwgdGhpcyA8PSBydWxlcy5ndCk/ICd2YWx1ZSBt",
            "dXN0IGJlIGdyZWF0ZXIgdGhhbiAlcyBhbmQgbGVzcyB0aGFuICVzJy5mb3Jt",
            "YXQoW3J1bGVzLmd0LCBydWxlcy5sdF0pIDogJycKvwEKGXRpbWVzdGFtcC5n",
            "dF9sdF9leGNsdXNpdmUaoQFoYXMocnVsZXMubHQpICYmIHJ1bGVzLmx0IDwg",
            "cnVsZXMuZ3QgJiYgKHJ1bGVzLmx0IDw9IHRoaXMgJiYgdGhpcyA8PSBydWxl",
            "cy5ndCk/ICd2YWx1ZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAlcyBvciBsZXNz",
            "IHRoYW4gJXMnLmZvcm1hdChbcnVsZXMuZ3QsIHJ1bGVzLmx0XSkgOiAnJwrH",
            "AQoQdGltZXN0YW1wLmd0X2x0ZRqyAWhhcyhydWxlcy5sdGUpICYmIHJ1bGVz",
            "Lmx0ZSA+PSBydWxlcy5ndCAmJiAodGhpcyA+IHJ1bGVzLmx0ZSB8fCB0aGlz",
            "IDw9IHJ1bGVzLmd0KT8gJ3ZhbHVlIG11c3QgYmUgZ3JlYXRlciB0aGFuICVz",
            "IGFuZCBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gJXMnLmZvcm1hdChbcnVsZXMu",
            "Z3QsIHJ1bGVzLmx0ZV0pIDogJycKzwEKGnRpbWVzdGFtcC5ndF9sdGVfZXhj",
            "bHVzaXZlGrABaGFzKHJ1bGVzLmx0ZSkgJiYgcnVsZXMubHRlIDwgcnVsZXMu",
            "Z3QgJiYgKHJ1bGVzLmx0ZSA8IHRoaXMgJiYgdGhpcyA8PSBydWxlcy5ndCk/",
            "ICd2YWx1ZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAlcyBvciBsZXNzIHRoYW4g",
            "b3IgZXF1YWwgdG8gJXMnLmZvcm1hdChbcnVsZXMuZ3QsIHJ1bGVzLmx0ZV0p",
            "IDogJydIAVICZ3QSmAgKA2d0ZRgGIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5U",
            "aW1lc3RhbXBC5wfCSOMHCowBCg10aW1lc3RhbXAuZ3RlGnshaGFzKHJ1bGVz",
            "Lmx0KSAmJiAhaGFzKHJ1bGVzLmx0ZSkgJiYgdGhpcyA8IHJ1bGVzLmd0ZT8g",
            "J3ZhbHVlIG11c3QgYmUgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvICVzJy5m",
            "b3JtYXQoW3J1bGVzLmd0ZV0pIDogJycKxgEKEHRpbWVzdGFtcC5ndGVfbHQa",
            "sQFoYXMocnVsZXMubHQpICYmIHJ1bGVzLmx0ID49IHJ1bGVzLmd0ZSAmJiAo",
            "dGhpcyA+PSBydWxlcy5sdCB8fCB0aGlzIDwgcnVsZXMuZ3RlKT8gJ3ZhbHVl",
            "IG11c3QgYmUgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvICVzIGFuZCBsZXNz",
            "IHRoYW4gJXMnLmZvcm1hdChbcnVsZXMuZ3RlLCBydWxlcy5sdF0pIDogJycK",
            "zgEKGnRpbWVzdGFtcC5ndGVfbHRfZXhjbHVzaXZlGq8BaGFzKHJ1bGVzLmx0",
            "KSAmJiBydWxlcy5sdCA8IHJ1bGVzLmd0ZSAmJiAocnVsZXMubHQgPD0gdGhp",
            "cyAmJiB0aGlzIDwgcnVsZXMuZ3RlKT8gJ3ZhbHVlIG11c3QgYmUgZ3JlYXRl",
            "ciB0aGFuIG9yIGVxdWFsIHRvICVzIG9yIGxlc3MgdGhhbiAlcycuZm9ybWF0",
            "KFtydWxlcy5ndGUsIHJ1bGVzLmx0XSkgOiAnJwrWAQoRdGltZXN0YW1wLmd0",
            "ZV9sdGUawAFoYXMocnVsZXMubHRlKSAmJiBydWxlcy5sdGUgPj0gcnVsZXMu",
            "Z3RlICYmICh0aGlzID4gcnVsZXMubHRlIHx8IHRoaXMgPCBydWxlcy5ndGUp",
            "PyAndmFsdWUgbXVzdCBiZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gJXMg",
            "YW5kIGxlc3MgdGhhbiBvciBlcXVhbCB0byAlcycuZm9ybWF0KFtydWxlcy5n",
            "dGUsIHJ1bGVzLmx0ZV0pIDogJycK3gEKG3RpbWVzdGFtcC5ndGVfbHRlX2V4",
            "Y2x1c2l2ZRq+AWhhcyhydWxlcy5sdGUpICYmIHJ1bGVzLmx0ZSA8IHJ1bGVz",
            "Lmd0ZSAmJiAocnVsZXMubHRlIDwgdGhpcyAmJiB0aGlzIDwgcnVsZXMuZ3Rl",
            "KT8gJ3ZhbHVlIG11c3QgYmUgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvICVz",
            "IG9yIGxlc3MgdGhhbiBvciBlcXVhbCB0byAlcycuZm9ybWF0KFtydWxlcy5n",
            "dGUsIHJ1bGVzLmx0ZV0pIDogJydIAVIDZ3RlEnYKBmd0X25vdxgIIAEoCEJd",
            "wkhaClgKEHRpbWVzdGFtcC5ndF9ub3caRChydWxlcy5ndF9ub3cgJiYgdGhp",
            "cyA8IG5vdykgPyAndmFsdWUgbXVzdCBiZSBncmVhdGVyIHRoYW4gbm93JyA6",
            "ICcnSAFSBWd0Tm93EsABCgZ3aXRoaW4YCSABKAsyGS5nb29nbGUucHJvdG9i",
            "dWYuRHVyYXRpb25CjAHCSIgBCoUBChB0aW1lc3RhbXAud2l0aGluGnF0aGlz",
            "IDwgbm93LXJ1bGVzLndpdGhpbiB8fCB0aGlzID4gbm93K3J1bGVzLndpdGhp",
            "biA/ICd2YWx1ZSBtdXN0IGJlIHdpdGhpbiAlcyBvZiBub3cnLmZvcm1hdChb",
            "cnVsZXMud2l0aGluXSkgOiAnJ1IGd2l0aGluElQKB2V4YW1wbGUYCiADKAsy",
            "Gi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wQh7CSBsKGQoRdGltZXN0YW1w",
            "LmV4YW1wbGUaBHRydWVSB2V4YW1wbGUqCQjoBxCAgICAAkILCglsZXNzX3Ro",
            "YW5CDgoMZ3JlYXRlcl90aGFuIkUKClZpb2xhdGlvbnMSNwoKdmlvbGF0aW9u",
            "cxgBIAMoCzIXLmJ1Zi52YWxpZGF0ZS5WaW9sYXRpb25SCnZpb2xhdGlvbnMi",
            "xQEKCVZpb2xhdGlvbhItCgVmaWVsZBgFIAEoCzIXLmJ1Zi52YWxpZGF0ZS5G",
            "aWVsZFBhdGhSBWZpZWxkEisKBHJ1bGUYBiABKAsyFy5idWYudmFsaWRhdGUu",
            "RmllbGRQYXRoUgRydWxlEhcKB3J1bGVfaWQYAiABKAlSBnJ1bGVJZBIYCgdt",
            "ZXNzYWdlGAMgASgJUgdtZXNzYWdlEhcKB2Zvcl9rZXkYBCABKAhSBmZvcktl",
            "eUoECAEQAlIKZmllbGRfcGF0aCJHCglGaWVsZFBhdGgSOgoIZWxlbWVudHMY",
            "ASADKAsyHi5idWYudmFsaWRhdGUuRmllbGRQYXRoRWxlbWVudFIIZWxlbWVu",
            "dHMizAMKEEZpZWxkUGF0aEVsZW1lbnQSIQoMZmllbGRfbnVtYmVyGAEgASgF",
            "UgtmaWVsZE51bWJlchIdCgpmaWVsZF9uYW1lGAIgASgJUglmaWVsZE5hbWUS",
            "SQoKZmllbGRfdHlwZRgDIAEoDjIqLmdvb2dsZS5wcm90b2J1Zi5GaWVsZERl",
            "c2NyaXB0b3JQcm90by5UeXBlUglmaWVsZFR5cGUSRQoIa2V5X3R5cGUYBCAB",
            "KA4yKi5nb29nbGUucHJvdG9idWYuRmllbGREZXNjcmlwdG9yUHJvdG8uVHlw",
            "ZVIHa2V5VHlwZRJJCgp2YWx1ZV90eXBlGAUgASgOMiouZ29vZ2xlLnByb3Rv",
            "YnVmLkZpZWxkRGVzY3JpcHRvclByb3RvLlR5cGVSCXZhbHVlVHlwZRIWCgVp",
            "bmRleBgGIAEoBEgAUgVpbmRleBIbCghib29sX2tleRgHIAEoCEgAUgdib29s",
            "S2V5EhkKB2ludF9rZXkYCCABKANIAFIGaW50S2V5EhsKCHVpbnRfa2V5GAkg",
            "ASgESABSB3VpbnRLZXkSHwoKc3RyaW5nX2tleRgKIAEoCUgAUglzdHJpbmdL",
            "ZXlCCwoJc3Vic2NyaXB0KocBCgZJZ25vcmUSFgoSSUdOT1JFX1VOU1BFQ0lG",
            "SUVEEAASGQoVSUdOT1JFX0lGX1VOUE9QVUxBVEVEEAESGwoXSUdOT1JFX0lG",
            "X0RFRkFVTFRfVkFMVUUQAhIRCg1JR05PUkVfQUxXQVlTEAMqGklHTk9SRV9F",
            "TVBUWUlHTk9SRV9ERUZBVUxUKm4KCktub3duUmVnZXgSGwoXS05PV05fUkVH",
            "RVhfVU5TUEVDSUZJRUQQABIgChxLTk9XTl9SRUdFWF9IVFRQX0hFQURFUl9O",
            "QU1FEAESIQodS05PV05fUkVHRVhfSFRUUF9IRUFERVJfVkFMVUUQAjpWCgdt",
            "ZXNzYWdlEh8uZ29vZ2xlLnByb3RvYnVmLk1lc3NhZ2VPcHRpb25zGIcJIAEo",
            "CzIaLmJ1Zi52YWxpZGF0ZS5NZXNzYWdlUnVsZXNSB21lc3NhZ2U6TgoFb25l",
            "b2YSHS5nb29nbGUucHJvdG9idWYuT25lb2ZPcHRpb25zGIcJIAEoCzIYLmJ1",
            "Zi52YWxpZGF0ZS5PbmVvZlJ1bGVzUgVvbmVvZjpOCgVmaWVsZBIdLmdvb2ds",
            "ZS5wcm90b2J1Zi5GaWVsZE9wdGlvbnMYhwkgASgLMhguYnVmLnZhbGlkYXRl",
            "LkZpZWxkUnVsZXNSBWZpZWxkOl0KCnByZWRlZmluZWQSHS5nb29nbGUucHJv",
            "dG9idWYuRmllbGRPcHRpb25zGIgJIAEoCzIdLmJ1Zi52YWxpZGF0ZS5QcmVk",
            "ZWZpbmVkUnVsZXNSCnByZWRlZmluZWRCbgoSYnVpbGQuYnVmLnZhbGlkYXRl",
            "Qg1WYWxpZGF0ZVByb3RvUAFaR2J1Zi5idWlsZC9nZW4vZ28vYnVmYnVpbGQv",
            "cHJvdG92YWxpZGF0ZS9wcm90b2NvbGJ1ZmZlcnMvZ28vYnVmL3ZhbGlkYXRl"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.Reflection.DescriptorReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.DurationReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Buf.Validate.Ignore), typeof(global::Buf.Validate.KnownRegex), }, new pb::Extension[] { ValidateExtensions.Message, ValidateExtensions.Oneof, ValidateExtensions.Field, ValidateExtensions.Predefined }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Buf.Validate.Rule), global::Buf.Validate.Rule.Parser, new[]{ "Id", "Message", "Expression" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buf.Validate.MessageRules), global::Buf.Validate.MessageRules.Parser, new[]{ "Disabled", "Cel" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buf.Validate.OneofRules), global::Buf.Validate.OneofRules.Parser, new[]{ "Required" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buf.Validate.FieldRules), global::Buf.Validate.FieldRules.Parser, new[]{ "Cel", "Required", "Ignore", "Float", "Double", "Int32", "Int64", "Uint32", "Uint64", "Sint32", "Sint64", "Fixed32", "Fixed64", "Sfixed32", "Sfixed64", "Bool", "String", "Bytes", "Enum", "Repeated", "Map", "Any", "Duration", "Timestamp" }, new[]{ "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buf.Validate.PredefinedRules), global::Buf.Validate.PredefinedRules.Parser, new[]{ "Cel" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buf.Validate.FloatRules), global::Buf.Validate.FloatRules.Parser, new[]{ "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn", "Finite", "Example" }, new[]{ "LessThan", "GreaterThan" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buf.Validate.DoubleRules), global::Buf.Validate.DoubleRules.Parser, new[]{ "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn", "Finite", "Example" }, new[]{ "LessThan", "GreaterThan" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buf.Validate.Int32Rules), global::Buf.Validate.Int32Rules.Parser, new[]{ "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn", "Example" }, new[]{ "LessThan", "GreaterThan" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buf.Validate.Int64Rules), global::Buf.Validate.Int64Rules.Parser, new[]{ "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn", "Example" }, new[]{ "LessThan", "GreaterThan" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buf.Validate.UInt32Rules), global::Buf.Validate.UInt32Rules.Parser, new[]{ "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn", "Example" }, new[]{ "LessThan", "GreaterThan" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buf.Validate.UInt64Rules), global::Buf.Validate.UInt64Rules.Parser, new[]{ "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn", "Example" }, new[]{ "LessThan", "GreaterThan" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buf.Validate.SInt32Rules), global::Buf.Validate.SInt32Rules.Parser, new[]{ "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn", "Example" }, new[]{ "LessThan", "GreaterThan" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buf.Validate.SInt64Rules), global::Buf.Validate.SInt64Rules.Parser, new[]{ "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn", "Example" }, new[]{ "LessThan", "GreaterThan" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buf.Validate.Fixed32Rules), global::Buf.Validate.Fixed32Rules.Parser, new[]{ "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn", "Example" }, new[]{ "LessThan", "GreaterThan" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buf.Validate.Fixed64Rules), global::Buf.Validate.Fixed64Rules.Parser, new[]{ "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn", "Example" }, new[]{ "LessThan", "GreaterThan" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buf.Validate.SFixed32Rules), global::Buf.Validate.SFixed32Rules.Parser, new[]{ "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn", "Example" }, new[]{ "LessThan", "GreaterThan" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buf.Validate.SFixed64Rules), global::Buf.Validate.SFixed64Rules.Parser, new[]{ "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn", "Example" }, new[]{ "LessThan", "GreaterThan" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buf.Validate.BoolRules), global::Buf.Validate.BoolRules.Parser, new[]{ "Const", "Example" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buf.Validate.StringRules), global::Buf.Validate.StringRules.Parser, new[]{ "Const", "Len", "MinLen", "MaxLen", "LenBytes", "MinBytes", "MaxBytes", "Pattern", "Prefix", "Suffix", "Contains", "NotContains", "In", "NotIn", "Email", "Hostname", "Ip", "Ipv4", "Ipv6", "Uri", "UriRef", "Address", "Uuid", "Tuuid", "IpWithPrefixlen", "Ipv4WithPrefixlen", "Ipv6WithPrefixlen", "IpPrefix", "Ipv4Prefix", "Ipv6Prefix", "HostAndPort", "WellKnownRegex", "Strict", "Example" }, new[]{ "WellKnown" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buf.Validate.BytesRules), global::Buf.Validate.BytesRules.Parser, new[]{ "Const", "Len", "MinLen", "MaxLen", "Pattern", "Prefix", "Suffix", "Contains", "In", "NotIn", "Ip", "Ipv4", "Ipv6", "Example" }, new[]{ "WellKnown" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buf.Validate.EnumRules), global::Buf.Validate.EnumRules.Parser, new[]{ "Const", "DefinedOnly", "In", "NotIn", "Example" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buf.Validate.RepeatedRules), global::Buf.Validate.RepeatedRules.Parser, new[]{ "MinItems", "MaxItems", "Unique", "Items" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buf.Validate.MapRules), global::Buf.Validate.MapRules.Parser, new[]{ "MinPairs", "MaxPairs", "Keys", "Values" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buf.Validate.AnyRules), global::Buf.Validate.AnyRules.Parser, new[]{ "In", "NotIn" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buf.Validate.DurationRules), global::Buf.Validate.DurationRules.Parser, new[]{ "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn", "Example" }, new[]{ "LessThan", "GreaterThan" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buf.Validate.TimestampRules), global::Buf.Validate.TimestampRules.Parser, new[]{ "Const", "Lt", "Lte", "LtNow", "Gt", "Gte", "GtNow", "Within", "Example" }, new[]{ "LessThan", "GreaterThan" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buf.Validate.Violations), global::Buf.Validate.Violations.Parser, new[]{ "Violations_" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buf.Validate.Violation), global::Buf.Validate.Violation.Parser, new[]{ "Field", "Rule", "RuleId", "Message", "ForKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buf.Validate.FieldPath), global::Buf.Validate.FieldPath.Parser, new[]{ "Elements" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Buf.Validate.FieldPathElement), global::Buf.Validate.FieldPathElement.Parser, new[]{ "FieldNumber", "FieldName", "FieldType", "KeyType", "ValueType", "Index", "BoolKey", "IntKey", "UintKey", "StringKey" }, new[]{ "Subscript" }, null, null, null)
          }));
    }
    #endregion

  }
  /// <summary>Holder for extension identifiers generated from the top level of buf/validate/validate.proto</summary>
  public static partial class ValidateExtensions {
    /// <summary>
    /// Rules specify the validations to be performed on this message. By default,
    /// no validation is performed against a message.
    /// </summary>
    public static readonly pb::Extension<global::Google.Protobuf.Reflection.MessageOptions, global::Buf.Validate.MessageRules> Message =
      new pb::Extension<global::Google.Protobuf.Reflection.MessageOptions, global::Buf.Validate.MessageRules>(1159, pb::FieldCodec.ForMessage(9274, global::Buf.Validate.MessageRules.Parser));
    /// <summary>
    /// Rules specify the validations to be performed on this oneof. By default,
    /// no validation is performed against a oneof.
    /// </summary>
    public static readonly pb::Extension<global::Google.Protobuf.Reflection.OneofOptions, global::Buf.Validate.OneofRules> Oneof =
      new pb::Extension<global::Google.Protobuf.Reflection.OneofOptions, global::Buf.Validate.OneofRules>(1159, pb::FieldCodec.ForMessage(9274, global::Buf.Validate.OneofRules.Parser));
    /// <summary>
    /// Rules specify the validations to be performed on this field. By default,
    /// no validation is performed against a field.
    /// </summary>
    public static readonly pb::Extension<global::Google.Protobuf.Reflection.FieldOptions, global::Buf.Validate.FieldRules> Field =
      new pb::Extension<global::Google.Protobuf.Reflection.FieldOptions, global::Buf.Validate.FieldRules>(1159, pb::FieldCodec.ForMessage(9274, global::Buf.Validate.FieldRules.Parser));
    /// <summary>
    /// Specifies predefined rules. When extending a standard rule message,
    /// this adds additional CEL expressions that apply when the extension is used.
    ///
    /// ```proto
    /// extend buf.validate.Int32Rules {
    ///   bool is_zero [(buf.validate.predefined).cel = {
    ///     id: "int32.is_zero",
    ///     message: "value must be zero",
    ///     expression: "!rule || this == 0",
    ///   }];
    /// }
    ///
    /// message Foo {
    ///   int32 reserved = 1 [(buf.validate.field).int32.(is_zero) = true];
    /// }
    /// ```
    /// </summary>
    public static readonly pb::Extension<global::Google.Protobuf.Reflection.FieldOptions, global::Buf.Validate.PredefinedRules> Predefined =
      new pb::Extension<global::Google.Protobuf.Reflection.FieldOptions, global::Buf.Validate.PredefinedRules>(1160, pb::FieldCodec.ForMessage(9282, global::Buf.Validate.PredefinedRules.Parser));
  }

  #region Enums
  /// <summary>
  /// Specifies how FieldRules.ignore behaves. See the documentation for
  /// FieldRules.required for definitions of "populated" and "nullable".
  /// </summary>
  public enum Ignore {
    /// <summary>
    /// Validation is only skipped if it's an unpopulated nullable fields.
    ///
    /// ```proto
    /// syntax="proto3";
    ///
    /// message Request {
    ///   // The uri rule applies to any value, including the empty string.
    ///   string foo = 1 [
    ///     (buf.validate.field).string.uri = true
    ///   ];
    ///
    ///   // The uri rule only applies if the field is set, including if it's
    ///   // set to the empty string.
    ///   optional string bar = 2 [
    ///     (buf.validate.field).string.uri = true
    ///   ];
    ///
    ///   // The min_items rule always applies, even if the list is empty.
    ///   repeated string baz = 3 [
    ///     (buf.validate.field).repeated.min_items = 3
    ///   ];
    ///
    ///   // The custom CEL rule applies only if the field is set, including if
    ///   // it's the "zero" value of that message.
    ///   SomeMessage quux = 4 [
    ///     (buf.validate.field).cel = {/* ... */}
    ///   ];
    /// }
    /// ```
    /// </summary>
    [pbr::OriginalName("IGNORE_UNSPECIFIED")] Unspecified = 0,
    /// <summary>
    /// Validation is skipped if the field is unpopulated. This rule is redundant
    /// if the field is already nullable.
    ///
    /// ```proto
    /// syntax="proto3
    ///
    /// message Request {
    ///   // The uri rule applies only if the value is not the empty string.
    ///   string foo = 1 [
    ///     (buf.validate.field).string.uri = true,
    ///     (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
    ///   ];
    ///
    ///   // IGNORE_IF_UNPOPULATED is equivalent to IGNORE_UNSPECIFIED in this
    ///   // case: the uri rule only applies if the field is set, including if
    ///   // it's set to the empty string.
    ///   optional string bar = 2 [
    ///     (buf.validate.field).string.uri = true,
    ///     (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
    ///   ];
    ///
    ///   // The min_items rule only applies if the list has at least one item.
    ///   repeated string baz = 3 [
    ///     (buf.validate.field).repeated.min_items = 3,
    ///     (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
    ///   ];
    ///
    ///   // IGNORE_IF_UNPOPULATED is equivalent to IGNORE_UNSPECIFIED in this
    ///   // case: the custom CEL rule applies only if the field is set, including
    ///   // if it's the "zero" value of that message.
    ///   SomeMessage quux = 4 [
    ///     (buf.validate.field).cel = {/* ... */},
    ///     (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
    ///   ];
    /// }
    /// ```
    /// </summary>
    [pbr::OriginalName("IGNORE_IF_UNPOPULATED")] IfUnpopulated = 1,
    /// <summary>
    /// Validation is skipped if the field is unpopulated or if it is a nullable
    /// field populated with its default value. This is typically the zero or
    /// empty value, but proto2 scalars support custom defaults. For messages, the
    /// default is a non-null message with all its fields unpopulated.
    ///
    /// ```proto
    /// syntax="proto3
    ///
    /// message Request {
    ///   // IGNORE_IF_DEFAULT_VALUE is equivalent to IGNORE_IF_UNPOPULATED in
    ///   // this case; the uri rule applies only if the value is not the empty
    ///   // string.
    ///   string foo = 1 [
    ///     (buf.validate.field).string.uri = true,
    ///     (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
    ///   ];
    ///
    ///   // The uri rule only applies if the field is set to a value other than
    ///   // the empty string.
    ///   optional string bar = 2 [
    ///     (buf.validate.field).string.uri = true,
    ///     (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
    ///   ];
    ///
    ///   // IGNORE_IF_DEFAULT_VALUE is equivalent to IGNORE_IF_UNPOPULATED in
    ///   // this case; the min_items rule only applies if the list has at least
    ///   // one item.
    ///   repeated string baz = 3 [
    ///     (buf.validate.field).repeated.min_items = 3,
    ///     (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
    ///   ];
    ///
    ///   // The custom CEL rule only applies if the field is set to a value other
    ///   // than an empty message (i.e., fields are unpopulated).
    ///   SomeMessage quux = 4 [
    ///     (buf.validate.field).cel = {/* ... */},
    ///     (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
    ///   ];
    /// }
    /// ```
    ///
    /// This rule is affected by proto2 custom default values:
    ///
    /// ```proto
    /// syntax="proto2";
    ///
    /// message Request {
    ///   // The gt rule only applies if the field is set and it's value is not
    ///   the default (i.e., not -42). The rule even applies if the field is set
    ///   to zero since the default value differs.
    ///   optional int32 value = 1 [
    ///     default = -42,
    ///     (buf.validate.field).int32.gt = 0,
    ///     (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
    ///   ];
    /// }
    /// </summary>
    [pbr::OriginalName("IGNORE_IF_DEFAULT_VALUE")] IfDefaultValue = 2,
    /// <summary>
    /// The validation rules of this field will be skipped and not evaluated. This
    /// is useful for situations that necessitate turning off the rules of a field
    /// containing a message that may not make sense in the current context, or to
    /// temporarily disable rules during development.
    ///
    /// ```proto
    /// message MyMessage {
    ///   // The field's rules will always be ignored, including any validation's
    ///   // on value's fields.
    ///   MyOtherMessage value = 1 [
    ///     (buf.validate.field).ignore = IGNORE_ALWAYS];
    /// }
    /// ```
    /// </summary>
    [pbr::OriginalName("IGNORE_ALWAYS")] Always = 3,
  }

  /// <summary>
  /// WellKnownRegex contain some well-known patterns.
  /// </summary>
  public enum KnownRegex {
    [pbr::OriginalName("KNOWN_REGEX_UNSPECIFIED")] Unspecified = 0,
    /// <summary>
    /// HTTP header name as defined by [RFC 7230](https://datatracker.ietf.org/doc/html/rfc7230#section-3.2).
    /// </summary>
    [pbr::OriginalName("KNOWN_REGEX_HTTP_HEADER_NAME")] HttpHeaderName = 1,
    /// <summary>
    /// HTTP header value as defined by [RFC 7230](https://datatracker.ietf.org/doc/html/rfc7230#section-3.2.4).
    /// </summary>
    [pbr::OriginalName("KNOWN_REGEX_HTTP_HEADER_VALUE")] HttpHeaderValue = 2,
  }

  #endregion

  #region Messages
  /// <summary>
  /// `Rule` represents a validation rule written in the Common Expression
  /// Language (CEL) syntax. Each Rule includes a unique identifier, an
  /// optional error message, and the CEL expression to evaluate. For more
  /// information on CEL, [see our documentation](https://github.com/bufbuild/protovalidate/blob/main/docs/cel.md).
  ///
  /// ```proto
  /// message Foo {
  ///   option (buf.validate.message).cel = {
  ///     id: "foo.bar"
  ///     message: "bar must be greater than 0"
  ///     expression: "this.bar > 0"
  ///   };
  ///   int32 bar = 1;
  /// }
  /// ```
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Rule : pb::IMessage<Rule>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Rule> _parser = new pb::MessageParser<Rule>(() => new Rule());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Rule> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Buf.Validate.ValidateReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Rule() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Rule(Rule other) : this() {
      id_ = other.id_;
      message_ = other.message_;
      expression_ = other.expression_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Rule Clone() {
      return new Rule(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static string IdDefaultValue = "";

    private string id_;
    /// <summary>
    /// `id` is a string that serves as a machine-readable name for this Rule.
    /// It should be unique within its scope, which could be either a message or a field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Id {
      get { return id_ ?? IdDefaultValue; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasId {
      get { return id_ != null; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearId() {
      id_ = null;
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 2;
    private readonly static string MessageDefaultValue = "";

    private string message_;
    /// <summary>
    /// `message` is an optional field that provides a human-readable error message
    /// for this Rule when the CEL expression evaluates to false. If a
    /// non-empty message is provided, any strings resulting from the CEL
    /// expression evaluation are ignored.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Message {
      get { return message_ ?? MessageDefaultValue; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "message" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMessage {
      get { return message_ != null; }
    }
    /// <summary>Clears the value of the "message" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMessage() {
      message_ = null;
    }

    /// <summary>Field number for the "expression" field.</summary>
    public const int ExpressionFieldNumber = 3;
    private readonly static string ExpressionDefaultValue = "";

    private string expression_;
    /// <summary>
    /// `expression` is the actual CEL expression that will be evaluated for
    /// validation. This string must resolve to either a boolean or a string
    /// value. If the expression evaluates to false or a non-empty string, the
    /// validation is considered failed, and the message is rejected.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Expression {
      get { return expression_ ?? ExpressionDefaultValue; }
      set {
        expression_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "expression" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasExpression {
      get { return expression_ != null; }
    }
    /// <summary>Clears the value of the "expression" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearExpression() {
      expression_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Rule);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Rule other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Message != other.Message) return false;
      if (Expression != other.Expression) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasMessage) hash ^= Message.GetHashCode();
      if (HasExpression) hash ^= Expression.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (HasMessage) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
      if (HasExpression) {
        output.WriteRawTag(26);
        output.WriteString(Expression);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (HasMessage) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
      if (HasExpression) {
        output.WriteRawTag(26);
        output.WriteString(Expression);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (HasMessage) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (HasExpression) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Expression);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Rule other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasMessage) {
        Message = other.Message;
      }
      if (other.HasExpression) {
        Expression = other.Expression;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
          case 26: {
            Expression = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
          case 26: {
            Expression = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// MessageRules represents validation rules that are applied to the entire message.
  /// It includes disabling options and a list of Rule messages representing Common Expression Language (CEL) validation rules.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class MessageRules : pb::IMessage<MessageRules>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MessageRules> _parser = new pb::MessageParser<MessageRules>(() => new MessageRules());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<MessageRules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Buf.Validate.ValidateReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MessageRules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MessageRules(MessageRules other) : this() {
      _hasBits0 = other._hasBits0;
      disabled_ = other.disabled_;
      cel_ = other.cel_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MessageRules Clone() {
      return new MessageRules(this);
    }

    /// <summary>Field number for the "disabled" field.</summary>
    public const int DisabledFieldNumber = 1;
    private readonly static bool DisabledDefaultValue = false;

    private bool disabled_;
    /// <summary>
    /// `disabled` is a boolean flag that, when set to true, nullifies any validation rules for this message.
    /// This includes any fields within the message that would otherwise support validation.
    ///
    /// ```proto
    /// message MyMessage {
    ///   // validation will be bypassed for this message
    ///   option (buf.validate.message).disabled = true;
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Disabled {
      get { if ((_hasBits0 & 1) != 0) { return disabled_; } else { return DisabledDefaultValue; } }
      set {
        _hasBits0 |= 1;
        disabled_ = value;
      }
    }
    /// <summary>Gets whether the "disabled" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDisabled {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "disabled" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDisabled() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "cel" field.</summary>
    public const int CelFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Buf.Validate.Rule> _repeated_cel_codec
        = pb::FieldCodec.ForMessage(26, global::Buf.Validate.Rule.Parser);
    private readonly pbc::RepeatedField<global::Buf.Validate.Rule> cel_ = new pbc::RepeatedField<global::Buf.Validate.Rule>();
    /// <summary>
    /// `cel` is a repeated field of type Rule. Each Rule specifies a validation rule to be applied to this message.
    /// These rules are written in Common Expression Language (CEL) syntax. For more information on
    /// CEL, [see our documentation](https://github.com/bufbuild/protovalidate/blob/main/docs/cel.md).
    ///
    /// ```proto
    /// message MyMessage {
    ///   // The field `foo` must be greater than 42.
    ///   option (buf.validate.message).cel = {
    ///     id: "my_message.value",
    ///     message: "value must be greater than 42",
    ///     expression: "this.foo > 42",
    ///   };
    ///   optional int32 foo = 1;
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Buf.Validate.Rule> Cel {
      get { return cel_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as MessageRules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(MessageRules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Disabled != other.Disabled) return false;
      if(!cel_.Equals(other.cel_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasDisabled) hash ^= Disabled.GetHashCode();
      hash ^= cel_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasDisabled) {
        output.WriteRawTag(8);
        output.WriteBool(Disabled);
      }
      cel_.WriteTo(output, _repeated_cel_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasDisabled) {
        output.WriteRawTag(8);
        output.WriteBool(Disabled);
      }
      cel_.WriteTo(ref output, _repeated_cel_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasDisabled) {
        size += 1 + 1;
      }
      size += cel_.CalculateSize(_repeated_cel_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(MessageRules other) {
      if (other == null) {
        return;
      }
      if (other.HasDisabled) {
        Disabled = other.Disabled;
      }
      cel_.Add(other.cel_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Disabled = input.ReadBool();
            break;
          }
          case 26: {
            cel_.AddEntriesFrom(input, _repeated_cel_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Disabled = input.ReadBool();
            break;
          }
          case 26: {
            cel_.AddEntriesFrom(ref input, _repeated_cel_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// The `OneofRules` message type enables you to manage rules for
  /// oneof fields in your protobuf messages.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class OneofRules : pb::IMessage<OneofRules>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OneofRules> _parser = new pb::MessageParser<OneofRules>(() => new OneofRules());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<OneofRules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Buf.Validate.ValidateReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OneofRules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OneofRules(OneofRules other) : this() {
      _hasBits0 = other._hasBits0;
      required_ = other.required_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OneofRules Clone() {
      return new OneofRules(this);
    }

    /// <summary>Field number for the "required" field.</summary>
    public const int RequiredFieldNumber = 1;
    private readonly static bool RequiredDefaultValue = false;

    private bool required_;
    /// <summary>
    /// If `required` is true, exactly one field of the oneof must be present. A
    /// validation error is returned if no fields in the oneof are present. The
    /// field itself may still be a default value; further rules
    /// should be placed on the fields themselves to ensure they are valid values,
    /// such as `min_len` or `gt`.
    ///
    /// ```proto
    /// message MyMessage {
    ///   oneof value {
    ///     // Either `a` or `b` must be set. If `a` is set, it must also be
    ///     // non-empty; whereas if `b` is set, it can still be an empty string.
    ///     option (buf.validate.oneof).required = true;
    ///     string a = 1 [(buf.validate.field).string.min_len = 1];
    ///     string b = 2;
    ///   }
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Required {
      get { if ((_hasBits0 & 1) != 0) { return required_; } else { return RequiredDefaultValue; } }
      set {
        _hasBits0 |= 1;
        required_ = value;
      }
    }
    /// <summary>Gets whether the "required" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRequired {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "required" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRequired() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as OneofRules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(OneofRules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Required != other.Required) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRequired) hash ^= Required.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasRequired) {
        output.WriteRawTag(8);
        output.WriteBool(Required);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasRequired) {
        output.WriteRawTag(8);
        output.WriteBool(Required);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasRequired) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(OneofRules other) {
      if (other == null) {
        return;
      }
      if (other.HasRequired) {
        Required = other.Required;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Required = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Required = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// FieldRules encapsulates the rules for each type of field. Depending on
  /// the field, the correct set should be used to ensure proper validations.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class FieldRules : pb::IMessage<FieldRules>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FieldRules> _parser = new pb::MessageParser<FieldRules>(() => new FieldRules());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<FieldRules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Buf.Validate.ValidateReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FieldRules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FieldRules(FieldRules other) : this() {
      _hasBits0 = other._hasBits0;
      cel_ = other.cel_.Clone();
      required_ = other.required_;
      ignore_ = other.ignore_;
      switch (other.TypeCase) {
        case TypeOneofCase.Float:
          Float = other.Float.Clone();
          break;
        case TypeOneofCase.Double:
          Double = other.Double.Clone();
          break;
        case TypeOneofCase.Int32:
          Int32 = other.Int32.Clone();
          break;
        case TypeOneofCase.Int64:
          Int64 = other.Int64.Clone();
          break;
        case TypeOneofCase.Uint32:
          Uint32 = other.Uint32.Clone();
          break;
        case TypeOneofCase.Uint64:
          Uint64 = other.Uint64.Clone();
          break;
        case TypeOneofCase.Sint32:
          Sint32 = other.Sint32.Clone();
          break;
        case TypeOneofCase.Sint64:
          Sint64 = other.Sint64.Clone();
          break;
        case TypeOneofCase.Fixed32:
          Fixed32 = other.Fixed32.Clone();
          break;
        case TypeOneofCase.Fixed64:
          Fixed64 = other.Fixed64.Clone();
          break;
        case TypeOneofCase.Sfixed32:
          Sfixed32 = other.Sfixed32.Clone();
          break;
        case TypeOneofCase.Sfixed64:
          Sfixed64 = other.Sfixed64.Clone();
          break;
        case TypeOneofCase.Bool:
          Bool = other.Bool.Clone();
          break;
        case TypeOneofCase.String:
          String = other.String.Clone();
          break;
        case TypeOneofCase.Bytes:
          Bytes = other.Bytes.Clone();
          break;
        case TypeOneofCase.Enum:
          Enum = other.Enum.Clone();
          break;
        case TypeOneofCase.Repeated:
          Repeated = other.Repeated.Clone();
          break;
        case TypeOneofCase.Map:
          Map = other.Map.Clone();
          break;
        case TypeOneofCase.Any:
          Any = other.Any.Clone();
          break;
        case TypeOneofCase.Duration:
          Duration = other.Duration.Clone();
          break;
        case TypeOneofCase.Timestamp:
          Timestamp = other.Timestamp.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FieldRules Clone() {
      return new FieldRules(this);
    }

    /// <summary>Field number for the "cel" field.</summary>
    public const int CelFieldNumber = 23;
    private static readonly pb::FieldCodec<global::Buf.Validate.Rule> _repeated_cel_codec
        = pb::FieldCodec.ForMessage(186, global::Buf.Validate.Rule.Parser);
    private readonly pbc::RepeatedField<global::Buf.Validate.Rule> cel_ = new pbc::RepeatedField<global::Buf.Validate.Rule>();
    /// <summary>
    /// `cel` is a repeated field used to represent a textual expression
    /// in the Common Expression Language (CEL) syntax. For more information on
    /// CEL, [see our documentation](https://github.com/bufbuild/protovalidate/blob/main/docs/cel.md).
    ///
    /// ```proto
    /// message MyMessage {
    ///   // The field `value` must be greater than 42.
    ///   optional int32 value = 1 [(buf.validate.field).cel = {
    ///     id: "my_message.value",
    ///     message: "value must be greater than 42",
    ///     expression: "this > 42",
    ///   }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Buf.Validate.Rule> Cel {
      get { return cel_; }
    }

    /// <summary>Field number for the "required" field.</summary>
    public const int RequiredFieldNumber = 25;
    private readonly static bool RequiredDefaultValue = false;

    private bool required_;
    /// <summary>
    /// If `required` is true, the field must be populated. A populated field can be
    /// described as "serialized in the wire format," which includes:
    ///
    /// - the following "nullable" fields must be explicitly set to be considered populated:
    ///   - singular message fields (whose fields may be unpopulated / default values)
    ///   - member fields of a oneof (may be their default value)
    ///   - proto3 optional fields (may be their default value)
    ///   - proto2 scalar fields (both optional and required)
    /// - proto3 scalar fields must be non-zero to be considered populated
    /// - repeated and map fields must be non-empty to be considered populated
    ///
    /// ```proto
    /// message MyMessage {
    ///   // The field `value` must be set to a non-null value.
    ///   optional MyOtherMessage value = 1 [(buf.validate.field).required = true];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Required {
      get { if ((_hasBits0 & 1) != 0) { return required_; } else { return RequiredDefaultValue; } }
      set {
        _hasBits0 |= 1;
        required_ = value;
      }
    }
    /// <summary>Gets whether the "required" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRequired {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "required" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRequired() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "ignore" field.</summary>
    public const int IgnoreFieldNumber = 27;
    private readonly static global::Buf.Validate.Ignore IgnoreDefaultValue = global::Buf.Validate.Ignore.Unspecified;

    private global::Buf.Validate.Ignore ignore_;
    /// <summary>
    /// Skip validation on the field if its value matches the specified criteria.
    /// See Ignore enum for details.
    ///
    /// ```proto
    /// message UpdateRequest {
    ///   // The uri rule only applies if the field is populated and not an empty
    ///   // string.
    ///   optional string url = 1 [
    ///     (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE,
    ///     (buf.validate.field).string.uri = true,
    ///   ];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Buf.Validate.Ignore Ignore {
      get { if ((_hasBits0 & 2) != 0) { return ignore_; } else { return IgnoreDefaultValue; } }
      set {
        _hasBits0 |= 2;
        ignore_ = value;
      }
    }
    /// <summary>Gets whether the "ignore" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIgnore {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "ignore" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIgnore() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "float" field.</summary>
    public const int FloatFieldNumber = 1;
    /// <summary>
    /// Scalar Field Types
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Buf.Validate.FloatRules Float {
      get { return typeCase_ == TypeOneofCase.Float ? (global::Buf.Validate.FloatRules) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Float;
      }
    }

    /// <summary>Field number for the "double" field.</summary>
    public const int DoubleFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Buf.Validate.DoubleRules Double {
      get { return typeCase_ == TypeOneofCase.Double ? (global::Buf.Validate.DoubleRules) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Double;
      }
    }

    /// <summary>Field number for the "int32" field.</summary>
    public const int Int32FieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Buf.Validate.Int32Rules Int32 {
      get { return typeCase_ == TypeOneofCase.Int32 ? (global::Buf.Validate.Int32Rules) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Int32;
      }
    }

    /// <summary>Field number for the "int64" field.</summary>
    public const int Int64FieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Buf.Validate.Int64Rules Int64 {
      get { return typeCase_ == TypeOneofCase.Int64 ? (global::Buf.Validate.Int64Rules) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Int64;
      }
    }

    /// <summary>Field number for the "uint32" field.</summary>
    public const int Uint32FieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Buf.Validate.UInt32Rules Uint32 {
      get { return typeCase_ == TypeOneofCase.Uint32 ? (global::Buf.Validate.UInt32Rules) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Uint32;
      }
    }

    /// <summary>Field number for the "uint64" field.</summary>
    public const int Uint64FieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Buf.Validate.UInt64Rules Uint64 {
      get { return typeCase_ == TypeOneofCase.Uint64 ? (global::Buf.Validate.UInt64Rules) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Uint64;
      }
    }

    /// <summary>Field number for the "sint32" field.</summary>
    public const int Sint32FieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Buf.Validate.SInt32Rules Sint32 {
      get { return typeCase_ == TypeOneofCase.Sint32 ? (global::Buf.Validate.SInt32Rules) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Sint32;
      }
    }

    /// <summary>Field number for the "sint64" field.</summary>
    public const int Sint64FieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Buf.Validate.SInt64Rules Sint64 {
      get { return typeCase_ == TypeOneofCase.Sint64 ? (global::Buf.Validate.SInt64Rules) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Sint64;
      }
    }

    /// <summary>Field number for the "fixed32" field.</summary>
    public const int Fixed32FieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Buf.Validate.Fixed32Rules Fixed32 {
      get { return typeCase_ == TypeOneofCase.Fixed32 ? (global::Buf.Validate.Fixed32Rules) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Fixed32;
      }
    }

    /// <summary>Field number for the "fixed64" field.</summary>
    public const int Fixed64FieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Buf.Validate.Fixed64Rules Fixed64 {
      get { return typeCase_ == TypeOneofCase.Fixed64 ? (global::Buf.Validate.Fixed64Rules) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Fixed64;
      }
    }

    /// <summary>Field number for the "sfixed32" field.</summary>
    public const int Sfixed32FieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Buf.Validate.SFixed32Rules Sfixed32 {
      get { return typeCase_ == TypeOneofCase.Sfixed32 ? (global::Buf.Validate.SFixed32Rules) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Sfixed32;
      }
    }

    /// <summary>Field number for the "sfixed64" field.</summary>
    public const int Sfixed64FieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Buf.Validate.SFixed64Rules Sfixed64 {
      get { return typeCase_ == TypeOneofCase.Sfixed64 ? (global::Buf.Validate.SFixed64Rules) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Sfixed64;
      }
    }

    /// <summary>Field number for the "bool" field.</summary>
    public const int BoolFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Buf.Validate.BoolRules Bool {
      get { return typeCase_ == TypeOneofCase.Bool ? (global::Buf.Validate.BoolRules) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Bool;
      }
    }

    /// <summary>Field number for the "string" field.</summary>
    public const int StringFieldNumber = 14;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Buf.Validate.StringRules String {
      get { return typeCase_ == TypeOneofCase.String ? (global::Buf.Validate.StringRules) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.String;
      }
    }

    /// <summary>Field number for the "bytes" field.</summary>
    public const int BytesFieldNumber = 15;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Buf.Validate.BytesRules Bytes {
      get { return typeCase_ == TypeOneofCase.Bytes ? (global::Buf.Validate.BytesRules) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Bytes;
      }
    }

    /// <summary>Field number for the "enum" field.</summary>
    public const int EnumFieldNumber = 16;
    /// <summary>
    /// Complex Field Types
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Buf.Validate.EnumRules Enum {
      get { return typeCase_ == TypeOneofCase.Enum ? (global::Buf.Validate.EnumRules) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Enum;
      }
    }

    /// <summary>Field number for the "repeated" field.</summary>
    public const int RepeatedFieldNumber = 18;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Buf.Validate.RepeatedRules Repeated {
      get { return typeCase_ == TypeOneofCase.Repeated ? (global::Buf.Validate.RepeatedRules) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Repeated;
      }
    }

    /// <summary>Field number for the "map" field.</summary>
    public const int MapFieldNumber = 19;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Buf.Validate.MapRules Map {
      get { return typeCase_ == TypeOneofCase.Map ? (global::Buf.Validate.MapRules) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Map;
      }
    }

    /// <summary>Field number for the "any" field.</summary>
    public const int AnyFieldNumber = 20;
    /// <summary>
    /// Well-Known Field Types
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Buf.Validate.AnyRules Any {
      get { return typeCase_ == TypeOneofCase.Any ? (global::Buf.Validate.AnyRules) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Any;
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 21;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Buf.Validate.DurationRules Duration {
      get { return typeCase_ == TypeOneofCase.Duration ? (global::Buf.Validate.DurationRules) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Duration;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 22;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Buf.Validate.TimestampRules Timestamp {
      get { return typeCase_ == TypeOneofCase.Timestamp ? (global::Buf.Validate.TimestampRules) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Timestamp;
      }
    }

    private object type_;
    /// <summary>Enum of possible cases for the "type" oneof.</summary>
    public enum TypeOneofCase {
      None = 0,
      Float = 1,
      Double = 2,
      Int32 = 3,
      Int64 = 4,
      Uint32 = 5,
      Uint64 = 6,
      Sint32 = 7,
      Sint64 = 8,
      Fixed32 = 9,
      Fixed64 = 10,
      Sfixed32 = 11,
      Sfixed64 = 12,
      Bool = 13,
      String = 14,
      Bytes = 15,
      Enum = 16,
      Repeated = 18,
      Map = 19,
      Any = 20,
      Duration = 21,
      Timestamp = 22,
    }
    private TypeOneofCase typeCase_ = TypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TypeOneofCase TypeCase {
      get { return typeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearType() {
      typeCase_ = TypeOneofCase.None;
      type_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as FieldRules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(FieldRules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cel_.Equals(other.cel_)) return false;
      if (Required != other.Required) return false;
      if (Ignore != other.Ignore) return false;
      if (!object.Equals(Float, other.Float)) return false;
      if (!object.Equals(Double, other.Double)) return false;
      if (!object.Equals(Int32, other.Int32)) return false;
      if (!object.Equals(Int64, other.Int64)) return false;
      if (!object.Equals(Uint32, other.Uint32)) return false;
      if (!object.Equals(Uint64, other.Uint64)) return false;
      if (!object.Equals(Sint32, other.Sint32)) return false;
      if (!object.Equals(Sint64, other.Sint64)) return false;
      if (!object.Equals(Fixed32, other.Fixed32)) return false;
      if (!object.Equals(Fixed64, other.Fixed64)) return false;
      if (!object.Equals(Sfixed32, other.Sfixed32)) return false;
      if (!object.Equals(Sfixed64, other.Sfixed64)) return false;
      if (!object.Equals(Bool, other.Bool)) return false;
      if (!object.Equals(String, other.String)) return false;
      if (!object.Equals(Bytes, other.Bytes)) return false;
      if (!object.Equals(Enum, other.Enum)) return false;
      if (!object.Equals(Repeated, other.Repeated)) return false;
      if (!object.Equals(Map, other.Map)) return false;
      if (!object.Equals(Any, other.Any)) return false;
      if (!object.Equals(Duration, other.Duration)) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      if (TypeCase != other.TypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= cel_.GetHashCode();
      if (HasRequired) hash ^= Required.GetHashCode();
      if (HasIgnore) hash ^= Ignore.GetHashCode();
      if (typeCase_ == TypeOneofCase.Float) hash ^= Float.GetHashCode();
      if (typeCase_ == TypeOneofCase.Double) hash ^= Double.GetHashCode();
      if (typeCase_ == TypeOneofCase.Int32) hash ^= Int32.GetHashCode();
      if (typeCase_ == TypeOneofCase.Int64) hash ^= Int64.GetHashCode();
      if (typeCase_ == TypeOneofCase.Uint32) hash ^= Uint32.GetHashCode();
      if (typeCase_ == TypeOneofCase.Uint64) hash ^= Uint64.GetHashCode();
      if (typeCase_ == TypeOneofCase.Sint32) hash ^= Sint32.GetHashCode();
      if (typeCase_ == TypeOneofCase.Sint64) hash ^= Sint64.GetHashCode();
      if (typeCase_ == TypeOneofCase.Fixed32) hash ^= Fixed32.GetHashCode();
      if (typeCase_ == TypeOneofCase.Fixed64) hash ^= Fixed64.GetHashCode();
      if (typeCase_ == TypeOneofCase.Sfixed32) hash ^= Sfixed32.GetHashCode();
      if (typeCase_ == TypeOneofCase.Sfixed64) hash ^= Sfixed64.GetHashCode();
      if (typeCase_ == TypeOneofCase.Bool) hash ^= Bool.GetHashCode();
      if (typeCase_ == TypeOneofCase.String) hash ^= String.GetHashCode();
      if (typeCase_ == TypeOneofCase.Bytes) hash ^= Bytes.GetHashCode();
      if (typeCase_ == TypeOneofCase.Enum) hash ^= Enum.GetHashCode();
      if (typeCase_ == TypeOneofCase.Repeated) hash ^= Repeated.GetHashCode();
      if (typeCase_ == TypeOneofCase.Map) hash ^= Map.GetHashCode();
      if (typeCase_ == TypeOneofCase.Any) hash ^= Any.GetHashCode();
      if (typeCase_ == TypeOneofCase.Duration) hash ^= Duration.GetHashCode();
      if (typeCase_ == TypeOneofCase.Timestamp) hash ^= Timestamp.GetHashCode();
      hash ^= (int) typeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (typeCase_ == TypeOneofCase.Float) {
        output.WriteRawTag(10);
        output.WriteMessage(Float);
      }
      if (typeCase_ == TypeOneofCase.Double) {
        output.WriteRawTag(18);
        output.WriteMessage(Double);
      }
      if (typeCase_ == TypeOneofCase.Int32) {
        output.WriteRawTag(26);
        output.WriteMessage(Int32);
      }
      if (typeCase_ == TypeOneofCase.Int64) {
        output.WriteRawTag(34);
        output.WriteMessage(Int64);
      }
      if (typeCase_ == TypeOneofCase.Uint32) {
        output.WriteRawTag(42);
        output.WriteMessage(Uint32);
      }
      if (typeCase_ == TypeOneofCase.Uint64) {
        output.WriteRawTag(50);
        output.WriteMessage(Uint64);
      }
      if (typeCase_ == TypeOneofCase.Sint32) {
        output.WriteRawTag(58);
        output.WriteMessage(Sint32);
      }
      if (typeCase_ == TypeOneofCase.Sint64) {
        output.WriteRawTag(66);
        output.WriteMessage(Sint64);
      }
      if (typeCase_ == TypeOneofCase.Fixed32) {
        output.WriteRawTag(74);
        output.WriteMessage(Fixed32);
      }
      if (typeCase_ == TypeOneofCase.Fixed64) {
        output.WriteRawTag(82);
        output.WriteMessage(Fixed64);
      }
      if (typeCase_ == TypeOneofCase.Sfixed32) {
        output.WriteRawTag(90);
        output.WriteMessage(Sfixed32);
      }
      if (typeCase_ == TypeOneofCase.Sfixed64) {
        output.WriteRawTag(98);
        output.WriteMessage(Sfixed64);
      }
      if (typeCase_ == TypeOneofCase.Bool) {
        output.WriteRawTag(106);
        output.WriteMessage(Bool);
      }
      if (typeCase_ == TypeOneofCase.String) {
        output.WriteRawTag(114);
        output.WriteMessage(String);
      }
      if (typeCase_ == TypeOneofCase.Bytes) {
        output.WriteRawTag(122);
        output.WriteMessage(Bytes);
      }
      if (typeCase_ == TypeOneofCase.Enum) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(Enum);
      }
      if (typeCase_ == TypeOneofCase.Repeated) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(Repeated);
      }
      if (typeCase_ == TypeOneofCase.Map) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(Map);
      }
      if (typeCase_ == TypeOneofCase.Any) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(Any);
      }
      if (typeCase_ == TypeOneofCase.Duration) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(Duration);
      }
      if (typeCase_ == TypeOneofCase.Timestamp) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(Timestamp);
      }
      cel_.WriteTo(output, _repeated_cel_codec);
      if (HasRequired) {
        output.WriteRawTag(200, 1);
        output.WriteBool(Required);
      }
      if (HasIgnore) {
        output.WriteRawTag(216, 1);
        output.WriteEnum((int) Ignore);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (typeCase_ == TypeOneofCase.Float) {
        output.WriteRawTag(10);
        output.WriteMessage(Float);
      }
      if (typeCase_ == TypeOneofCase.Double) {
        output.WriteRawTag(18);
        output.WriteMessage(Double);
      }
      if (typeCase_ == TypeOneofCase.Int32) {
        output.WriteRawTag(26);
        output.WriteMessage(Int32);
      }
      if (typeCase_ == TypeOneofCase.Int64) {
        output.WriteRawTag(34);
        output.WriteMessage(Int64);
      }
      if (typeCase_ == TypeOneofCase.Uint32) {
        output.WriteRawTag(42);
        output.WriteMessage(Uint32);
      }
      if (typeCase_ == TypeOneofCase.Uint64) {
        output.WriteRawTag(50);
        output.WriteMessage(Uint64);
      }
      if (typeCase_ == TypeOneofCase.Sint32) {
        output.WriteRawTag(58);
        output.WriteMessage(Sint32);
      }
      if (typeCase_ == TypeOneofCase.Sint64) {
        output.WriteRawTag(66);
        output.WriteMessage(Sint64);
      }
      if (typeCase_ == TypeOneofCase.Fixed32) {
        output.WriteRawTag(74);
        output.WriteMessage(Fixed32);
      }
      if (typeCase_ == TypeOneofCase.Fixed64) {
        output.WriteRawTag(82);
        output.WriteMessage(Fixed64);
      }
      if (typeCase_ == TypeOneofCase.Sfixed32) {
        output.WriteRawTag(90);
        output.WriteMessage(Sfixed32);
      }
      if (typeCase_ == TypeOneofCase.Sfixed64) {
        output.WriteRawTag(98);
        output.WriteMessage(Sfixed64);
      }
      if (typeCase_ == TypeOneofCase.Bool) {
        output.WriteRawTag(106);
        output.WriteMessage(Bool);
      }
      if (typeCase_ == TypeOneofCase.String) {
        output.WriteRawTag(114);
        output.WriteMessage(String);
      }
      if (typeCase_ == TypeOneofCase.Bytes) {
        output.WriteRawTag(122);
        output.WriteMessage(Bytes);
      }
      if (typeCase_ == TypeOneofCase.Enum) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(Enum);
      }
      if (typeCase_ == TypeOneofCase.Repeated) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(Repeated);
      }
      if (typeCase_ == TypeOneofCase.Map) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(Map);
      }
      if (typeCase_ == TypeOneofCase.Any) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(Any);
      }
      if (typeCase_ == TypeOneofCase.Duration) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(Duration);
      }
      if (typeCase_ == TypeOneofCase.Timestamp) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(Timestamp);
      }
      cel_.WriteTo(ref output, _repeated_cel_codec);
      if (HasRequired) {
        output.WriteRawTag(200, 1);
        output.WriteBool(Required);
      }
      if (HasIgnore) {
        output.WriteRawTag(216, 1);
        output.WriteEnum((int) Ignore);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += cel_.CalculateSize(_repeated_cel_codec);
      if (HasRequired) {
        size += 2 + 1;
      }
      if (HasIgnore) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Ignore);
      }
      if (typeCase_ == TypeOneofCase.Float) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Float);
      }
      if (typeCase_ == TypeOneofCase.Double) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Double);
      }
      if (typeCase_ == TypeOneofCase.Int32) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Int32);
      }
      if (typeCase_ == TypeOneofCase.Int64) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Int64);
      }
      if (typeCase_ == TypeOneofCase.Uint32) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Uint32);
      }
      if (typeCase_ == TypeOneofCase.Uint64) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Uint64);
      }
      if (typeCase_ == TypeOneofCase.Sint32) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sint32);
      }
      if (typeCase_ == TypeOneofCase.Sint64) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sint64);
      }
      if (typeCase_ == TypeOneofCase.Fixed32) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Fixed32);
      }
      if (typeCase_ == TypeOneofCase.Fixed64) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Fixed64);
      }
      if (typeCase_ == TypeOneofCase.Sfixed32) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sfixed32);
      }
      if (typeCase_ == TypeOneofCase.Sfixed64) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sfixed64);
      }
      if (typeCase_ == TypeOneofCase.Bool) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bool);
      }
      if (typeCase_ == TypeOneofCase.String) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(String);
      }
      if (typeCase_ == TypeOneofCase.Bytes) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bytes);
      }
      if (typeCase_ == TypeOneofCase.Enum) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Enum);
      }
      if (typeCase_ == TypeOneofCase.Repeated) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Repeated);
      }
      if (typeCase_ == TypeOneofCase.Map) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Map);
      }
      if (typeCase_ == TypeOneofCase.Any) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Any);
      }
      if (typeCase_ == TypeOneofCase.Duration) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Duration);
      }
      if (typeCase_ == TypeOneofCase.Timestamp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(FieldRules other) {
      if (other == null) {
        return;
      }
      cel_.Add(other.cel_);
      if (other.HasRequired) {
        Required = other.Required;
      }
      if (other.HasIgnore) {
        Ignore = other.Ignore;
      }
      switch (other.TypeCase) {
        case TypeOneofCase.Float:
          if (Float == null) {
            Float = new global::Buf.Validate.FloatRules();
          }
          Float.MergeFrom(other.Float);
          break;
        case TypeOneofCase.Double:
          if (Double == null) {
            Double = new global::Buf.Validate.DoubleRules();
          }
          Double.MergeFrom(other.Double);
          break;
        case TypeOneofCase.Int32:
          if (Int32 == null) {
            Int32 = new global::Buf.Validate.Int32Rules();
          }
          Int32.MergeFrom(other.Int32);
          break;
        case TypeOneofCase.Int64:
          if (Int64 == null) {
            Int64 = new global::Buf.Validate.Int64Rules();
          }
          Int64.MergeFrom(other.Int64);
          break;
        case TypeOneofCase.Uint32:
          if (Uint32 == null) {
            Uint32 = new global::Buf.Validate.UInt32Rules();
          }
          Uint32.MergeFrom(other.Uint32);
          break;
        case TypeOneofCase.Uint64:
          if (Uint64 == null) {
            Uint64 = new global::Buf.Validate.UInt64Rules();
          }
          Uint64.MergeFrom(other.Uint64);
          break;
        case TypeOneofCase.Sint32:
          if (Sint32 == null) {
            Sint32 = new global::Buf.Validate.SInt32Rules();
          }
          Sint32.MergeFrom(other.Sint32);
          break;
        case TypeOneofCase.Sint64:
          if (Sint64 == null) {
            Sint64 = new global::Buf.Validate.SInt64Rules();
          }
          Sint64.MergeFrom(other.Sint64);
          break;
        case TypeOneofCase.Fixed32:
          if (Fixed32 == null) {
            Fixed32 = new global::Buf.Validate.Fixed32Rules();
          }
          Fixed32.MergeFrom(other.Fixed32);
          break;
        case TypeOneofCase.Fixed64:
          if (Fixed64 == null) {
            Fixed64 = new global::Buf.Validate.Fixed64Rules();
          }
          Fixed64.MergeFrom(other.Fixed64);
          break;
        case TypeOneofCase.Sfixed32:
          if (Sfixed32 == null) {
            Sfixed32 = new global::Buf.Validate.SFixed32Rules();
          }
          Sfixed32.MergeFrom(other.Sfixed32);
          break;
        case TypeOneofCase.Sfixed64:
          if (Sfixed64 == null) {
            Sfixed64 = new global::Buf.Validate.SFixed64Rules();
          }
          Sfixed64.MergeFrom(other.Sfixed64);
          break;
        case TypeOneofCase.Bool:
          if (Bool == null) {
            Bool = new global::Buf.Validate.BoolRules();
          }
          Bool.MergeFrom(other.Bool);
          break;
        case TypeOneofCase.String:
          if (String == null) {
            String = new global::Buf.Validate.StringRules();
          }
          String.MergeFrom(other.String);
          break;
        case TypeOneofCase.Bytes:
          if (Bytes == null) {
            Bytes = new global::Buf.Validate.BytesRules();
          }
          Bytes.MergeFrom(other.Bytes);
          break;
        case TypeOneofCase.Enum:
          if (Enum == null) {
            Enum = new global::Buf.Validate.EnumRules();
          }
          Enum.MergeFrom(other.Enum);
          break;
        case TypeOneofCase.Repeated:
          if (Repeated == null) {
            Repeated = new global::Buf.Validate.RepeatedRules();
          }
          Repeated.MergeFrom(other.Repeated);
          break;
        case TypeOneofCase.Map:
          if (Map == null) {
            Map = new global::Buf.Validate.MapRules();
          }
          Map.MergeFrom(other.Map);
          break;
        case TypeOneofCase.Any:
          if (Any == null) {
            Any = new global::Buf.Validate.AnyRules();
          }
          Any.MergeFrom(other.Any);
          break;
        case TypeOneofCase.Duration:
          if (Duration == null) {
            Duration = new global::Buf.Validate.DurationRules();
          }
          Duration.MergeFrom(other.Duration);
          break;
        case TypeOneofCase.Timestamp:
          if (Timestamp == null) {
            Timestamp = new global::Buf.Validate.TimestampRules();
          }
          Timestamp.MergeFrom(other.Timestamp);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Buf.Validate.FloatRules subBuilder = new global::Buf.Validate.FloatRules();
            if (typeCase_ == TypeOneofCase.Float) {
              subBuilder.MergeFrom(Float);
            }
            input.ReadMessage(subBuilder);
            Float = subBuilder;
            break;
          }
          case 18: {
            global::Buf.Validate.DoubleRules subBuilder = new global::Buf.Validate.DoubleRules();
            if (typeCase_ == TypeOneofCase.Double) {
              subBuilder.MergeFrom(Double);
            }
            input.ReadMessage(subBuilder);
            Double = subBuilder;
            break;
          }
          case 26: {
            global::Buf.Validate.Int32Rules subBuilder = new global::Buf.Validate.Int32Rules();
            if (typeCase_ == TypeOneofCase.Int32) {
              subBuilder.MergeFrom(Int32);
            }
            input.ReadMessage(subBuilder);
            Int32 = subBuilder;
            break;
          }
          case 34: {
            global::Buf.Validate.Int64Rules subBuilder = new global::Buf.Validate.Int64Rules();
            if (typeCase_ == TypeOneofCase.Int64) {
              subBuilder.MergeFrom(Int64);
            }
            input.ReadMessage(subBuilder);
            Int64 = subBuilder;
            break;
          }
          case 42: {
            global::Buf.Validate.UInt32Rules subBuilder = new global::Buf.Validate.UInt32Rules();
            if (typeCase_ == TypeOneofCase.Uint32) {
              subBuilder.MergeFrom(Uint32);
            }
            input.ReadMessage(subBuilder);
            Uint32 = subBuilder;
            break;
          }
          case 50: {
            global::Buf.Validate.UInt64Rules subBuilder = new global::Buf.Validate.UInt64Rules();
            if (typeCase_ == TypeOneofCase.Uint64) {
              subBuilder.MergeFrom(Uint64);
            }
            input.ReadMessage(subBuilder);
            Uint64 = subBuilder;
            break;
          }
          case 58: {
            global::Buf.Validate.SInt32Rules subBuilder = new global::Buf.Validate.SInt32Rules();
            if (typeCase_ == TypeOneofCase.Sint32) {
              subBuilder.MergeFrom(Sint32);
            }
            input.ReadMessage(subBuilder);
            Sint32 = subBuilder;
            break;
          }
          case 66: {
            global::Buf.Validate.SInt64Rules subBuilder = new global::Buf.Validate.SInt64Rules();
            if (typeCase_ == TypeOneofCase.Sint64) {
              subBuilder.MergeFrom(Sint64);
            }
            input.ReadMessage(subBuilder);
            Sint64 = subBuilder;
            break;
          }
          case 74: {
            global::Buf.Validate.Fixed32Rules subBuilder = new global::Buf.Validate.Fixed32Rules();
            if (typeCase_ == TypeOneofCase.Fixed32) {
              subBuilder.MergeFrom(Fixed32);
            }
            input.ReadMessage(subBuilder);
            Fixed32 = subBuilder;
            break;
          }
          case 82: {
            global::Buf.Validate.Fixed64Rules subBuilder = new global::Buf.Validate.Fixed64Rules();
            if (typeCase_ == TypeOneofCase.Fixed64) {
              subBuilder.MergeFrom(Fixed64);
            }
            input.ReadMessage(subBuilder);
            Fixed64 = subBuilder;
            break;
          }
          case 90: {
            global::Buf.Validate.SFixed32Rules subBuilder = new global::Buf.Validate.SFixed32Rules();
            if (typeCase_ == TypeOneofCase.Sfixed32) {
              subBuilder.MergeFrom(Sfixed32);
            }
            input.ReadMessage(subBuilder);
            Sfixed32 = subBuilder;
            break;
          }
          case 98: {
            global::Buf.Validate.SFixed64Rules subBuilder = new global::Buf.Validate.SFixed64Rules();
            if (typeCase_ == TypeOneofCase.Sfixed64) {
              subBuilder.MergeFrom(Sfixed64);
            }
            input.ReadMessage(subBuilder);
            Sfixed64 = subBuilder;
            break;
          }
          case 106: {
            global::Buf.Validate.BoolRules subBuilder = new global::Buf.Validate.BoolRules();
            if (typeCase_ == TypeOneofCase.Bool) {
              subBuilder.MergeFrom(Bool);
            }
            input.ReadMessage(subBuilder);
            Bool = subBuilder;
            break;
          }
          case 114: {
            global::Buf.Validate.StringRules subBuilder = new global::Buf.Validate.StringRules();
            if (typeCase_ == TypeOneofCase.String) {
              subBuilder.MergeFrom(String);
            }
            input.ReadMessage(subBuilder);
            String = subBuilder;
            break;
          }
          case 122: {
            global::Buf.Validate.BytesRules subBuilder = new global::Buf.Validate.BytesRules();
            if (typeCase_ == TypeOneofCase.Bytes) {
              subBuilder.MergeFrom(Bytes);
            }
            input.ReadMessage(subBuilder);
            Bytes = subBuilder;
            break;
          }
          case 130: {
            global::Buf.Validate.EnumRules subBuilder = new global::Buf.Validate.EnumRules();
            if (typeCase_ == TypeOneofCase.Enum) {
              subBuilder.MergeFrom(Enum);
            }
            input.ReadMessage(subBuilder);
            Enum = subBuilder;
            break;
          }
          case 146: {
            global::Buf.Validate.RepeatedRules subBuilder = new global::Buf.Validate.RepeatedRules();
            if (typeCase_ == TypeOneofCase.Repeated) {
              subBuilder.MergeFrom(Repeated);
            }
            input.ReadMessage(subBuilder);
            Repeated = subBuilder;
            break;
          }
          case 154: {
            global::Buf.Validate.MapRules subBuilder = new global::Buf.Validate.MapRules();
            if (typeCase_ == TypeOneofCase.Map) {
              subBuilder.MergeFrom(Map);
            }
            input.ReadMessage(subBuilder);
            Map = subBuilder;
            break;
          }
          case 162: {
            global::Buf.Validate.AnyRules subBuilder = new global::Buf.Validate.AnyRules();
            if (typeCase_ == TypeOneofCase.Any) {
              subBuilder.MergeFrom(Any);
            }
            input.ReadMessage(subBuilder);
            Any = subBuilder;
            break;
          }
          case 170: {
            global::Buf.Validate.DurationRules subBuilder = new global::Buf.Validate.DurationRules();
            if (typeCase_ == TypeOneofCase.Duration) {
              subBuilder.MergeFrom(Duration);
            }
            input.ReadMessage(subBuilder);
            Duration = subBuilder;
            break;
          }
          case 178: {
            global::Buf.Validate.TimestampRules subBuilder = new global::Buf.Validate.TimestampRules();
            if (typeCase_ == TypeOneofCase.Timestamp) {
              subBuilder.MergeFrom(Timestamp);
            }
            input.ReadMessage(subBuilder);
            Timestamp = subBuilder;
            break;
          }
          case 186: {
            cel_.AddEntriesFrom(input, _repeated_cel_codec);
            break;
          }
          case 200: {
            Required = input.ReadBool();
            break;
          }
          case 216: {
            Ignore = (global::Buf.Validate.Ignore) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::Buf.Validate.FloatRules subBuilder = new global::Buf.Validate.FloatRules();
            if (typeCase_ == TypeOneofCase.Float) {
              subBuilder.MergeFrom(Float);
            }
            input.ReadMessage(subBuilder);
            Float = subBuilder;
            break;
          }
          case 18: {
            global::Buf.Validate.DoubleRules subBuilder = new global::Buf.Validate.DoubleRules();
            if (typeCase_ == TypeOneofCase.Double) {
              subBuilder.MergeFrom(Double);
            }
            input.ReadMessage(subBuilder);
            Double = subBuilder;
            break;
          }
          case 26: {
            global::Buf.Validate.Int32Rules subBuilder = new global::Buf.Validate.Int32Rules();
            if (typeCase_ == TypeOneofCase.Int32) {
              subBuilder.MergeFrom(Int32);
            }
            input.ReadMessage(subBuilder);
            Int32 = subBuilder;
            break;
          }
          case 34: {
            global::Buf.Validate.Int64Rules subBuilder = new global::Buf.Validate.Int64Rules();
            if (typeCase_ == TypeOneofCase.Int64) {
              subBuilder.MergeFrom(Int64);
            }
            input.ReadMessage(subBuilder);
            Int64 = subBuilder;
            break;
          }
          case 42: {
            global::Buf.Validate.UInt32Rules subBuilder = new global::Buf.Validate.UInt32Rules();
            if (typeCase_ == TypeOneofCase.Uint32) {
              subBuilder.MergeFrom(Uint32);
            }
            input.ReadMessage(subBuilder);
            Uint32 = subBuilder;
            break;
          }
          case 50: {
            global::Buf.Validate.UInt64Rules subBuilder = new global::Buf.Validate.UInt64Rules();
            if (typeCase_ == TypeOneofCase.Uint64) {
              subBuilder.MergeFrom(Uint64);
            }
            input.ReadMessage(subBuilder);
            Uint64 = subBuilder;
            break;
          }
          case 58: {
            global::Buf.Validate.SInt32Rules subBuilder = new global::Buf.Validate.SInt32Rules();
            if (typeCase_ == TypeOneofCase.Sint32) {
              subBuilder.MergeFrom(Sint32);
            }
            input.ReadMessage(subBuilder);
            Sint32 = subBuilder;
            break;
          }
          case 66: {
            global::Buf.Validate.SInt64Rules subBuilder = new global::Buf.Validate.SInt64Rules();
            if (typeCase_ == TypeOneofCase.Sint64) {
              subBuilder.MergeFrom(Sint64);
            }
            input.ReadMessage(subBuilder);
            Sint64 = subBuilder;
            break;
          }
          case 74: {
            global::Buf.Validate.Fixed32Rules subBuilder = new global::Buf.Validate.Fixed32Rules();
            if (typeCase_ == TypeOneofCase.Fixed32) {
              subBuilder.MergeFrom(Fixed32);
            }
            input.ReadMessage(subBuilder);
            Fixed32 = subBuilder;
            break;
          }
          case 82: {
            global::Buf.Validate.Fixed64Rules subBuilder = new global::Buf.Validate.Fixed64Rules();
            if (typeCase_ == TypeOneofCase.Fixed64) {
              subBuilder.MergeFrom(Fixed64);
            }
            input.ReadMessage(subBuilder);
            Fixed64 = subBuilder;
            break;
          }
          case 90: {
            global::Buf.Validate.SFixed32Rules subBuilder = new global::Buf.Validate.SFixed32Rules();
            if (typeCase_ == TypeOneofCase.Sfixed32) {
              subBuilder.MergeFrom(Sfixed32);
            }
            input.ReadMessage(subBuilder);
            Sfixed32 = subBuilder;
            break;
          }
          case 98: {
            global::Buf.Validate.SFixed64Rules subBuilder = new global::Buf.Validate.SFixed64Rules();
            if (typeCase_ == TypeOneofCase.Sfixed64) {
              subBuilder.MergeFrom(Sfixed64);
            }
            input.ReadMessage(subBuilder);
            Sfixed64 = subBuilder;
            break;
          }
          case 106: {
            global::Buf.Validate.BoolRules subBuilder = new global::Buf.Validate.BoolRules();
            if (typeCase_ == TypeOneofCase.Bool) {
              subBuilder.MergeFrom(Bool);
            }
            input.ReadMessage(subBuilder);
            Bool = subBuilder;
            break;
          }
          case 114: {
            global::Buf.Validate.StringRules subBuilder = new global::Buf.Validate.StringRules();
            if (typeCase_ == TypeOneofCase.String) {
              subBuilder.MergeFrom(String);
            }
            input.ReadMessage(subBuilder);
            String = subBuilder;
            break;
          }
          case 122: {
            global::Buf.Validate.BytesRules subBuilder = new global::Buf.Validate.BytesRules();
            if (typeCase_ == TypeOneofCase.Bytes) {
              subBuilder.MergeFrom(Bytes);
            }
            input.ReadMessage(subBuilder);
            Bytes = subBuilder;
            break;
          }
          case 130: {
            global::Buf.Validate.EnumRules subBuilder = new global::Buf.Validate.EnumRules();
            if (typeCase_ == TypeOneofCase.Enum) {
              subBuilder.MergeFrom(Enum);
            }
            input.ReadMessage(subBuilder);
            Enum = subBuilder;
            break;
          }
          case 146: {
            global::Buf.Validate.RepeatedRules subBuilder = new global::Buf.Validate.RepeatedRules();
            if (typeCase_ == TypeOneofCase.Repeated) {
              subBuilder.MergeFrom(Repeated);
            }
            input.ReadMessage(subBuilder);
            Repeated = subBuilder;
            break;
          }
          case 154: {
            global::Buf.Validate.MapRules subBuilder = new global::Buf.Validate.MapRules();
            if (typeCase_ == TypeOneofCase.Map) {
              subBuilder.MergeFrom(Map);
            }
            input.ReadMessage(subBuilder);
            Map = subBuilder;
            break;
          }
          case 162: {
            global::Buf.Validate.AnyRules subBuilder = new global::Buf.Validate.AnyRules();
            if (typeCase_ == TypeOneofCase.Any) {
              subBuilder.MergeFrom(Any);
            }
            input.ReadMessage(subBuilder);
            Any = subBuilder;
            break;
          }
          case 170: {
            global::Buf.Validate.DurationRules subBuilder = new global::Buf.Validate.DurationRules();
            if (typeCase_ == TypeOneofCase.Duration) {
              subBuilder.MergeFrom(Duration);
            }
            input.ReadMessage(subBuilder);
            Duration = subBuilder;
            break;
          }
          case 178: {
            global::Buf.Validate.TimestampRules subBuilder = new global::Buf.Validate.TimestampRules();
            if (typeCase_ == TypeOneofCase.Timestamp) {
              subBuilder.MergeFrom(Timestamp);
            }
            input.ReadMessage(subBuilder);
            Timestamp = subBuilder;
            break;
          }
          case 186: {
            cel_.AddEntriesFrom(ref input, _repeated_cel_codec);
            break;
          }
          case 200: {
            Required = input.ReadBool();
            break;
          }
          case 216: {
            Ignore = (global::Buf.Validate.Ignore) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// PredefinedRules are custom rules that can be re-used with
  /// multiple fields.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class PredefinedRules : pb::IMessage<PredefinedRules>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PredefinedRules> _parser = new pb::MessageParser<PredefinedRules>(() => new PredefinedRules());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<PredefinedRules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Buf.Validate.ValidateReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PredefinedRules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PredefinedRules(PredefinedRules other) : this() {
      cel_ = other.cel_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PredefinedRules Clone() {
      return new PredefinedRules(this);
    }

    /// <summary>Field number for the "cel" field.</summary>
    public const int CelFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Buf.Validate.Rule> _repeated_cel_codec
        = pb::FieldCodec.ForMessage(10, global::Buf.Validate.Rule.Parser);
    private readonly pbc::RepeatedField<global::Buf.Validate.Rule> cel_ = new pbc::RepeatedField<global::Buf.Validate.Rule>();
    /// <summary>
    /// `cel` is a repeated field used to represent a textual expression
    /// in the Common Expression Language (CEL) syntax. For more information on
    /// CEL, [see our documentation](https://github.com/bufbuild/protovalidate/blob/main/docs/cel.md).
    ///
    /// ```proto
    /// message MyMessage {
    ///   // The field `value` must be greater than 42.
    ///   optional int32 value = 1 [(buf.validate.predefined).cel = {
    ///     id: "my_message.value",
    ///     message: "value must be greater than 42",
    ///     expression: "this > 42",
    ///   }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Buf.Validate.Rule> Cel {
      get { return cel_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as PredefinedRules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(PredefinedRules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cel_.Equals(other.cel_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= cel_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      cel_.WriteTo(output, _repeated_cel_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      cel_.WriteTo(ref output, _repeated_cel_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += cel_.CalculateSize(_repeated_cel_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(PredefinedRules other) {
      if (other == null) {
        return;
      }
      cel_.Add(other.cel_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            cel_.AddEntriesFrom(input, _repeated_cel_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            cel_.AddEntriesFrom(ref input, _repeated_cel_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// FloatRules describes the rules applied to `float` values. These
  /// rules may also be applied to the `google.protobuf.FloatValue` Well-Known-Type.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class FloatRules : pb::IExtendableMessage<FloatRules>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FloatRules> _parser = new pb::MessageParser<FloatRules>(() => new FloatRules());
    private pb::UnknownFieldSet _unknownFields;
    private pb::ExtensionSet<FloatRules> _extensions;
    private pb::ExtensionSet<FloatRules> _Extensions { get { return _extensions; } }
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<FloatRules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Buf.Validate.ValidateReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FloatRules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FloatRules(FloatRules other) : this() {
      _hasBits0 = other._hasBits0;
      const_ = other.const_;
      in_ = other.in_.Clone();
      notIn_ = other.notIn_.Clone();
      finite_ = other.finite_;
      example_ = other.example_.Clone();
      switch (other.LessThanCase) {
        case LessThanOneofCase.Lt:
          Lt = other.Lt;
          break;
        case LessThanOneofCase.Lte:
          Lte = other.Lte;
          break;
      }

      switch (other.GreaterThanCase) {
        case GreaterThanOneofCase.Gt:
          Gt = other.Gt;
          break;
        case GreaterThanOneofCase.Gte:
          Gte = other.Gte;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      _extensions = pb::ExtensionSet.Clone(other._extensions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FloatRules Clone() {
      return new FloatRules(this);
    }

    /// <summary>Field number for the "const" field.</summary>
    public const int ConstFieldNumber = 1;
    private readonly static float ConstDefaultValue = 0F;

    private float const_;
    /// <summary>
    /// `const` requires the field value to exactly match the specified value. If
    /// the field value doesn't match, an error message is generated.
    ///
    /// ```proto
    /// message MyFloat {
    ///   // value must equal 42.0
    ///   float value = 1 [(buf.validate.field).float.const = 42.0];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Const {
      get { if ((_hasBits0 & 1) != 0) { return const_; } else { return ConstDefaultValue; } }
      set {
        _hasBits0 |= 1;
        const_ = value;
      }
    }
    /// <summary>Gets whether the "const" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasConst {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "const" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearConst() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "lt" field.</summary>
    public const int LtFieldNumber = 2;
    /// <summary>
    /// `lt` requires the field value to be less than the specified value (field &lt;
    /// value). If the field value is equal to or greater than the specified value,
    /// an error message is generated.
    ///
    /// ```proto
    /// message MyFloat {
    ///   // value must be less than 10.0
    ///   float value = 1 [(buf.validate.field).float.lt = 10.0];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Lt {
      get { return HasLt ? (float) lessThan_ : 0F; }
      set {
        lessThan_ = value;
        lessThanCase_ = LessThanOneofCase.Lt;
      }
    }
    /// <summary>Gets whether the "lt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLt {
      get { return lessThanCase_ == LessThanOneofCase.Lt; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "lt" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLt() {
      if (HasLt) {
        ClearLessThan();
      }
    }

    /// <summary>Field number for the "lte" field.</summary>
    public const int LteFieldNumber = 3;
    /// <summary>
    /// `lte` requires the field value to be less than or equal to the specified
    /// value (field &lt;= value). If the field value is greater than the specified
    /// value, an error message is generated.
    ///
    /// ```proto
    /// message MyFloat {
    ///   // value must be less than or equal to 10.0
    ///   float value = 1 [(buf.validate.field).float.lte = 10.0];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Lte {
      get { return HasLte ? (float) lessThan_ : 0F; }
      set {
        lessThan_ = value;
        lessThanCase_ = LessThanOneofCase.Lte;
      }
    }
    /// <summary>Gets whether the "lte" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLte {
      get { return lessThanCase_ == LessThanOneofCase.Lte; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "lte" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLte() {
      if (HasLte) {
        ClearLessThan();
      }
    }

    /// <summary>Field number for the "gt" field.</summary>
    public const int GtFieldNumber = 4;
    /// <summary>
    /// `gt` requires the field value to be greater than the specified value
    /// (exclusive). If the value of `gt` is larger than a specified `lt` or
    /// `lte`, the range is reversed, and the field value must be outside the
    /// specified range. If the field value doesn't meet the required conditions,
    /// an error message is generated.
    ///
    /// ```proto
    /// message MyFloat {
    ///   // value must be greater than 5.0 [float.gt]
    ///   float value = 1 [(buf.validate.field).float.gt = 5.0];
    ///
    ///   // value must be greater than 5 and less than 10.0 [float.gt_lt]
    ///   float other_value = 2 [(buf.validate.field).float = { gt: 5.0, lt: 10.0 }];
    ///
    ///   // value must be greater than 10 or less than 5.0 [float.gt_lt_exclusive]
    ///   float another_value = 3 [(buf.validate.field).float = { gt: 10.0, lt: 5.0 }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Gt {
      get { return HasGt ? (float) greaterThan_ : 0F; }
      set {
        greaterThan_ = value;
        greaterThanCase_ = GreaterThanOneofCase.Gt;
      }
    }
    /// <summary>Gets whether the "gt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGt {
      get { return greaterThanCase_ == GreaterThanOneofCase.Gt; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "gt" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGt() {
      if (HasGt) {
        ClearGreaterThan();
      }
    }

    /// <summary>Field number for the "gte" field.</summary>
    public const int GteFieldNumber = 5;
    /// <summary>
    /// `gte` requires the field value to be greater than or equal to the specified
    /// value (exclusive). If the value of `gte` is larger than a specified `lt`
    /// or `lte`, the range is reversed, and the field value must be outside the
    /// specified range. If the field value doesn't meet the required conditions,
    /// an error message is generated.
    ///
    /// ```proto
    /// message MyFloat {
    ///   // value must be greater than or equal to 5.0 [float.gte]
    ///   float value = 1 [(buf.validate.field).float.gte = 5.0];
    ///
    ///   // value must be greater than or equal to 5.0 and less than 10.0 [float.gte_lt]
    ///   float other_value = 2 [(buf.validate.field).float = { gte: 5.0, lt: 10.0 }];
    ///
    ///   // value must be greater than or equal to 10.0 or less than 5.0 [float.gte_lt_exclusive]
    ///   float another_value = 3 [(buf.validate.field).float = { gte: 10.0, lt: 5.0 }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Gte {
      get { return HasGte ? (float) greaterThan_ : 0F; }
      set {
        greaterThan_ = value;
        greaterThanCase_ = GreaterThanOneofCase.Gte;
      }
    }
    /// <summary>Gets whether the "gte" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGte {
      get { return greaterThanCase_ == GreaterThanOneofCase.Gte; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "gte" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGte() {
      if (HasGte) {
        ClearGreaterThan();
      }
    }

    /// <summary>Field number for the "in" field.</summary>
    public const int InFieldNumber = 6;
    private static readonly pb::FieldCodec<float> _repeated_in_codec
        = pb::FieldCodec.ForFloat(53);
    private readonly pbc::RepeatedField<float> in_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// `in` requires the field value to be equal to one of the specified values.
    /// If the field value isn't one of the specified values, an error message
    /// is generated.
    ///
    /// ```proto
    /// message MyFloat {
    ///   // value must be in list [1.0, 2.0, 3.0]
    ///   float value = 1 [(buf.validate.field).float = { in: [1.0, 2.0, 3.0] }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<float> In {
      get { return in_; }
    }

    /// <summary>Field number for the "not_in" field.</summary>
    public const int NotInFieldNumber = 7;
    private static readonly pb::FieldCodec<float> _repeated_notIn_codec
        = pb::FieldCodec.ForFloat(61);
    private readonly pbc::RepeatedField<float> notIn_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// `in` requires the field value to not be equal to any of the specified
    /// values. If the field value is one of the specified values, an error
    /// message is generated.
    ///
    /// ```proto
    /// message MyFloat {
    ///   // value must not be in list [1.0, 2.0, 3.0]
    ///   float value = 1 [(buf.validate.field).float = { not_in: [1.0, 2.0, 3.0] }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<float> NotIn {
      get { return notIn_; }
    }

    /// <summary>Field number for the "finite" field.</summary>
    public const int FiniteFieldNumber = 8;
    private readonly static bool FiniteDefaultValue = false;

    private bool finite_;
    /// <summary>
    /// `finite` requires the field value to be finite. If the field value is
    /// infinite or NaN, an error message is generated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Finite {
      get { if ((_hasBits0 & 2) != 0) { return finite_; } else { return FiniteDefaultValue; } }
      set {
        _hasBits0 |= 2;
        finite_ = value;
      }
    }
    /// <summary>Gets whether the "finite" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFinite {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "finite" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFinite() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "example" field.</summary>
    public const int ExampleFieldNumber = 9;
    private static readonly pb::FieldCodec<float> _repeated_example_codec
        = pb::FieldCodec.ForFloat(77);
    private readonly pbc::RepeatedField<float> example_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// `example` specifies values that the field may have. These values SHOULD
    /// conform to other rules. `example` values will not impact validation
    /// but may be used as helpful guidance on how to populate the given field.
    ///
    /// ```proto
    /// message MyFloat {
    ///   float value = 1 [
    ///     (buf.validate.field).float.example = 1.0,
    ///     (buf.validate.field).float.example = "Infinity"
    ///   ];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<float> Example {
      get { return example_; }
    }

    private object lessThan_;
    /// <summary>Enum of possible cases for the "less_than" oneof.</summary>
    public enum LessThanOneofCase {
      None = 0,
      Lt = 2,
      Lte = 3,
    }
    private LessThanOneofCase lessThanCase_ = LessThanOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LessThanOneofCase LessThanCase {
      get { return lessThanCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLessThan() {
      lessThanCase_ = LessThanOneofCase.None;
      lessThan_ = null;
    }

    private object greaterThan_;
    /// <summary>Enum of possible cases for the "greater_than" oneof.</summary>
    public enum GreaterThanOneofCase {
      None = 0,
      Gt = 4,
      Gte = 5,
    }
    private GreaterThanOneofCase greaterThanCase_ = GreaterThanOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GreaterThanOneofCase GreaterThanCase {
      get { return greaterThanCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGreaterThan() {
      greaterThanCase_ = GreaterThanOneofCase.None;
      greaterThan_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as FloatRules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(FloatRules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Const, other.Const)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Lt, other.Lt)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Lte, other.Lte)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Gt, other.Gt)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Gte, other.Gte)) return false;
      if(!in_.Equals(other.in_)) return false;
      if(!notIn_.Equals(other.notIn_)) return false;
      if (Finite != other.Finite) return false;
      if(!example_.Equals(other.example_)) return false;
      if (LessThanCase != other.LessThanCase) return false;
      if (GreaterThanCase != other.GreaterThanCase) return false;
      if (!Equals(_extensions, other._extensions)) {
        return false;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasConst) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Const);
      if (HasLt) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Lt);
      if (HasLte) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Lte);
      if (HasGt) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Gt);
      if (HasGte) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Gte);
      hash ^= in_.GetHashCode();
      hash ^= notIn_.GetHashCode();
      if (HasFinite) hash ^= Finite.GetHashCode();
      hash ^= example_.GetHashCode();
      hash ^= (int) lessThanCase_;
      hash ^= (int) greaterThanCase_;
      if (_extensions != null) {
        hash ^= _extensions.GetHashCode();
      }
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasConst) {
        output.WriteRawTag(13);
        output.WriteFloat(Const);
      }
      if (HasLt) {
        output.WriteRawTag(21);
        output.WriteFloat(Lt);
      }
      if (HasLte) {
        output.WriteRawTag(29);
        output.WriteFloat(Lte);
      }
      if (HasGt) {
        output.WriteRawTag(37);
        output.WriteFloat(Gt);
      }
      if (HasGte) {
        output.WriteRawTag(45);
        output.WriteFloat(Gte);
      }
      in_.WriteTo(output, _repeated_in_codec);
      notIn_.WriteTo(output, _repeated_notIn_codec);
      if (HasFinite) {
        output.WriteRawTag(64);
        output.WriteBool(Finite);
      }
      example_.WriteTo(output, _repeated_example_codec);
      if (_extensions != null) {
        _extensions.WriteTo(output);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasConst) {
        output.WriteRawTag(13);
        output.WriteFloat(Const);
      }
      if (HasLt) {
        output.WriteRawTag(21);
        output.WriteFloat(Lt);
      }
      if (HasLte) {
        output.WriteRawTag(29);
        output.WriteFloat(Lte);
      }
      if (HasGt) {
        output.WriteRawTag(37);
        output.WriteFloat(Gt);
      }
      if (HasGte) {
        output.WriteRawTag(45);
        output.WriteFloat(Gte);
      }
      in_.WriteTo(ref output, _repeated_in_codec);
      notIn_.WriteTo(ref output, _repeated_notIn_codec);
      if (HasFinite) {
        output.WriteRawTag(64);
        output.WriteBool(Finite);
      }
      example_.WriteTo(ref output, _repeated_example_codec);
      if (_extensions != null) {
        _extensions.WriteTo(ref output);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasConst) {
        size += 1 + 4;
      }
      if (HasLt) {
        size += 1 + 4;
      }
      if (HasLte) {
        size += 1 + 4;
      }
      if (HasGt) {
        size += 1 + 4;
      }
      if (HasGte) {
        size += 1 + 4;
      }
      size += in_.CalculateSize(_repeated_in_codec);
      size += notIn_.CalculateSize(_repeated_notIn_codec);
      if (HasFinite) {
        size += 1 + 1;
      }
      size += example_.CalculateSize(_repeated_example_codec);
      if (_extensions != null) {
        size += _extensions.CalculateSize();
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(FloatRules other) {
      if (other == null) {
        return;
      }
      if (other.HasConst) {
        Const = other.Const;
      }
      in_.Add(other.in_);
      notIn_.Add(other.notIn_);
      if (other.HasFinite) {
        Finite = other.Finite;
      }
      example_.Add(other.example_);
      switch (other.LessThanCase) {
        case LessThanOneofCase.Lt:
          Lt = other.Lt;
          break;
        case LessThanOneofCase.Lte:
          Lte = other.Lte;
          break;
      }

      switch (other.GreaterThanCase) {
        case GreaterThanOneofCase.Gt:
          Gt = other.Gt;
          break;
        case GreaterThanOneofCase.Gte:
          Gte = other.Gte;
          break;
      }

      pb::ExtensionSet.MergeFrom(ref _extensions, other._extensions);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            if (!pb::ExtensionSet.TryMergeFieldFrom(ref _extensions, input)) {
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            }
            break;
          case 13: {
            Const = input.ReadFloat();
            break;
          }
          case 21: {
            Lt = input.ReadFloat();
            break;
          }
          case 29: {
            Lte = input.ReadFloat();
            break;
          }
          case 37: {
            Gt = input.ReadFloat();
            break;
          }
          case 45: {
            Gte = input.ReadFloat();
            break;
          }
          case 50:
          case 53: {
            in_.AddEntriesFrom(input, _repeated_in_codec);
            break;
          }
          case 58:
          case 61: {
            notIn_.AddEntriesFrom(input, _repeated_notIn_codec);
            break;
          }
          case 64: {
            Finite = input.ReadBool();
            break;
          }
          case 74:
          case 77: {
            example_.AddEntriesFrom(input, _repeated_example_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            if (!pb::ExtensionSet.TryMergeFieldFrom(ref _extensions, ref input)) {
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            }
            break;
          case 13: {
            Const = input.ReadFloat();
            break;
          }
          case 21: {
            Lt = input.ReadFloat();
            break;
          }
          case 29: {
            Lte = input.ReadFloat();
            break;
          }
          case 37: {
            Gt = input.ReadFloat();
            break;
          }
          case 45: {
            Gte = input.ReadFloat();
            break;
          }
          case 50:
          case 53: {
            in_.AddEntriesFrom(ref input, _repeated_in_codec);
            break;
          }
          case 58:
          case 61: {
            notIn_.AddEntriesFrom(ref input, _repeated_notIn_codec);
            break;
          }
          case 64: {
            Finite = input.ReadBool();
            break;
          }
          case 74:
          case 77: {
            example_.AddEntriesFrom(ref input, _repeated_example_codec);
            break;
          }
        }
      }
    }
    #endif

    public TValue GetExtension<TValue>(pb::Extension<FloatRules, TValue> extension) {
      return pb::ExtensionSet.Get(ref _extensions, extension);
    }
    public pbc::RepeatedField<TValue> GetExtension<TValue>(pb::RepeatedExtension<FloatRules, TValue> extension) {
      return pb::ExtensionSet.Get(ref _extensions, extension);
    }
    public pbc::RepeatedField<TValue> GetOrInitializeExtension<TValue>(pb::RepeatedExtension<FloatRules, TValue> extension) {
      return pb::ExtensionSet.GetOrInitialize(ref _extensions, extension);
    }
    public void SetExtension<TValue>(pb::Extension<FloatRules, TValue> extension, TValue value) {
      pb::ExtensionSet.Set(ref _extensions, extension, value);
    }
    public bool HasExtension<TValue>(pb::Extension<FloatRules, TValue> extension) {
      return pb::ExtensionSet.Has(ref _extensions, extension);
    }
    public void ClearExtension<TValue>(pb::Extension<FloatRules, TValue> extension) {
      pb::ExtensionSet.Clear(ref _extensions, extension);
    }
    public void ClearExtension<TValue>(pb::RepeatedExtension<FloatRules, TValue> extension) {
      pb::ExtensionSet.Clear(ref _extensions, extension);
    }

  }

  /// <summary>
  /// DoubleRules describes the rules applied to `double` values. These
  /// rules may also be applied to the `google.protobuf.DoubleValue` Well-Known-Type.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class DoubleRules : pb::IExtendableMessage<DoubleRules>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DoubleRules> _parser = new pb::MessageParser<DoubleRules>(() => new DoubleRules());
    private pb::UnknownFieldSet _unknownFields;
    private pb::ExtensionSet<DoubleRules> _extensions;
    private pb::ExtensionSet<DoubleRules> _Extensions { get { return _extensions; } }
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<DoubleRules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Buf.Validate.ValidateReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DoubleRules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DoubleRules(DoubleRules other) : this() {
      _hasBits0 = other._hasBits0;
      const_ = other.const_;
      in_ = other.in_.Clone();
      notIn_ = other.notIn_.Clone();
      finite_ = other.finite_;
      example_ = other.example_.Clone();
      switch (other.LessThanCase) {
        case LessThanOneofCase.Lt:
          Lt = other.Lt;
          break;
        case LessThanOneofCase.Lte:
          Lte = other.Lte;
          break;
      }

      switch (other.GreaterThanCase) {
        case GreaterThanOneofCase.Gt:
          Gt = other.Gt;
          break;
        case GreaterThanOneofCase.Gte:
          Gte = other.Gte;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      _extensions = pb::ExtensionSet.Clone(other._extensions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DoubleRules Clone() {
      return new DoubleRules(this);
    }

    /// <summary>Field number for the "const" field.</summary>
    public const int ConstFieldNumber = 1;
    private readonly static double ConstDefaultValue = 0D;

    private double const_;
    /// <summary>
    /// `const` requires the field value to exactly match the specified value. If
    /// the field value doesn't match, an error message is generated.
    ///
    /// ```proto
    /// message MyDouble {
    ///   // value must equal 42.0
    ///   double value = 1 [(buf.validate.field).double.const = 42.0];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Const {
      get { if ((_hasBits0 & 1) != 0) { return const_; } else { return ConstDefaultValue; } }
      set {
        _hasBits0 |= 1;
        const_ = value;
      }
    }
    /// <summary>Gets whether the "const" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasConst {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "const" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearConst() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "lt" field.</summary>
    public const int LtFieldNumber = 2;
    /// <summary>
    /// `lt` requires the field value to be less than the specified value (field &lt;
    /// value). If the field value is equal to or greater than the specified
    /// value, an error message is generated.
    ///
    /// ```proto
    /// message MyDouble {
    ///   // value must be less than 10.0
    ///   double value = 1 [(buf.validate.field).double.lt = 10.0];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Lt {
      get { return HasLt ? (double) lessThan_ : 0D; }
      set {
        lessThan_ = value;
        lessThanCase_ = LessThanOneofCase.Lt;
      }
    }
    /// <summary>Gets whether the "lt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLt {
      get { return lessThanCase_ == LessThanOneofCase.Lt; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "lt" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLt() {
      if (HasLt) {
        ClearLessThan();
      }
    }

    /// <summary>Field number for the "lte" field.</summary>
    public const int LteFieldNumber = 3;
    /// <summary>
    /// `lte` requires the field value to be less than or equal to the specified value
    /// (field &lt;= value). If the field value is greater than the specified value,
    /// an error message is generated.
    ///
    /// ```proto
    /// message MyDouble {
    ///   // value must be less than or equal to 10.0
    ///   double value = 1 [(buf.validate.field).double.lte = 10.0];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Lte {
      get { return HasLte ? (double) lessThan_ : 0D; }
      set {
        lessThan_ = value;
        lessThanCase_ = LessThanOneofCase.Lte;
      }
    }
    /// <summary>Gets whether the "lte" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLte {
      get { return lessThanCase_ == LessThanOneofCase.Lte; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "lte" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLte() {
      if (HasLte) {
        ClearLessThan();
      }
    }

    /// <summary>Field number for the "gt" field.</summary>
    public const int GtFieldNumber = 4;
    /// <summary>
    /// `gt` requires the field value to be greater than the specified value
    /// (exclusive). If the value of `gt` is larger than a specified `lt` or `lte`,
    /// the range is reversed, and the field value must be outside the specified
    /// range. If the field value doesn't meet the required conditions, an error
    /// message is generated.
    ///
    /// ```proto
    /// message MyDouble {
    ///   // value must be greater than 5.0 [double.gt]
    ///   double value = 1 [(buf.validate.field).double.gt = 5.0];
    ///
    ///   // value must be greater than 5 and less than 10.0 [double.gt_lt]
    ///   double other_value = 2 [(buf.validate.field).double = { gt: 5.0, lt: 10.0 }];
    ///
    ///   // value must be greater than 10 or less than 5.0 [double.gt_lt_exclusive]
    ///   double another_value = 3 [(buf.validate.field).double = { gt: 10.0, lt: 5.0 }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Gt {
      get { return HasGt ? (double) greaterThan_ : 0D; }
      set {
        greaterThan_ = value;
        greaterThanCase_ = GreaterThanOneofCase.Gt;
      }
    }
    /// <summary>Gets whether the "gt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGt {
      get { return greaterThanCase_ == GreaterThanOneofCase.Gt; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "gt" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGt() {
      if (HasGt) {
        ClearGreaterThan();
      }
    }

    /// <summary>Field number for the "gte" field.</summary>
    public const int GteFieldNumber = 5;
    /// <summary>
    /// `gte` requires the field value to be greater than or equal to the specified
    /// value (exclusive). If the value of `gte` is larger than a specified `lt` or
    /// `lte`, the range is reversed, and the field value must be outside the
    /// specified range. If the field value doesn't meet the required conditions,
    /// an error message is generated.
    ///
    /// ```proto
    /// message MyDouble {
    ///   // value must be greater than or equal to 5.0 [double.gte]
    ///   double value = 1 [(buf.validate.field).double.gte = 5.0];
    ///
    ///   // value must be greater than or equal to 5.0 and less than 10.0 [double.gte_lt]
    ///   double other_value = 2 [(buf.validate.field).double = { gte: 5.0, lt: 10.0 }];
    ///
    ///   // value must be greater than or equal to 10.0 or less than 5.0 [double.gte_lt_exclusive]
    ///   double another_value = 3 [(buf.validate.field).double = { gte: 10.0, lt: 5.0 }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Gte {
      get { return HasGte ? (double) greaterThan_ : 0D; }
      set {
        greaterThan_ = value;
        greaterThanCase_ = GreaterThanOneofCase.Gte;
      }
    }
    /// <summary>Gets whether the "gte" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGte {
      get { return greaterThanCase_ == GreaterThanOneofCase.Gte; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "gte" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGte() {
      if (HasGte) {
        ClearGreaterThan();
      }
    }

    /// <summary>Field number for the "in" field.</summary>
    public const int InFieldNumber = 6;
    private static readonly pb::FieldCodec<double> _repeated_in_codec
        = pb::FieldCodec.ForDouble(49);
    private readonly pbc::RepeatedField<double> in_ = new pbc::RepeatedField<double>();
    /// <summary>
    /// `in` requires the field value to be equal to one of the specified values.
    /// If the field value isn't one of the specified values, an error message is
    /// generated.
    ///
    /// ```proto
    /// message MyDouble {
    ///   // value must be in list [1.0, 2.0, 3.0]
    ///   double value = 1 [(buf.validate.field).double = { in: [1.0, 2.0, 3.0] }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<double> In {
      get { return in_; }
    }

    /// <summary>Field number for the "not_in" field.</summary>
    public const int NotInFieldNumber = 7;
    private static readonly pb::FieldCodec<double> _repeated_notIn_codec
        = pb::FieldCodec.ForDouble(57);
    private readonly pbc::RepeatedField<double> notIn_ = new pbc::RepeatedField<double>();
    /// <summary>
    /// `not_in` requires the field value to not be equal to any of the specified
    /// values. If the field value is one of the specified values, an error
    /// message is generated.
    ///
    /// ```proto
    /// message MyDouble {
    ///   // value must not be in list [1.0, 2.0, 3.0]
    ///   double value = 1 [(buf.validate.field).double = { not_in: [1.0, 2.0, 3.0] }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<double> NotIn {
      get { return notIn_; }
    }

    /// <summary>Field number for the "finite" field.</summary>
    public const int FiniteFieldNumber = 8;
    private readonly static bool FiniteDefaultValue = false;

    private bool finite_;
    /// <summary>
    /// `finite` requires the field value to be finite. If the field value is
    /// infinite or NaN, an error message is generated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Finite {
      get { if ((_hasBits0 & 2) != 0) { return finite_; } else { return FiniteDefaultValue; } }
      set {
        _hasBits0 |= 2;
        finite_ = value;
      }
    }
    /// <summary>Gets whether the "finite" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFinite {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "finite" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFinite() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "example" field.</summary>
    public const int ExampleFieldNumber = 9;
    private static readonly pb::FieldCodec<double> _repeated_example_codec
        = pb::FieldCodec.ForDouble(73);
    private readonly pbc::RepeatedField<double> example_ = new pbc::RepeatedField<double>();
    /// <summary>
    /// `example` specifies values that the field may have. These values SHOULD
    /// conform to other rules. `example` values will not impact validation
    /// but may be used as helpful guidance on how to populate the given field.
    ///
    /// ```proto
    /// message MyDouble {
    ///   double value = 1 [
    ///     (buf.validate.field).double.example = 1.0,
    ///     (buf.validate.field).double.example = "Infinity"
    ///   ];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<double> Example {
      get { return example_; }
    }

    private object lessThan_;
    /// <summary>Enum of possible cases for the "less_than" oneof.</summary>
    public enum LessThanOneofCase {
      None = 0,
      Lt = 2,
      Lte = 3,
    }
    private LessThanOneofCase lessThanCase_ = LessThanOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LessThanOneofCase LessThanCase {
      get { return lessThanCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLessThan() {
      lessThanCase_ = LessThanOneofCase.None;
      lessThan_ = null;
    }

    private object greaterThan_;
    /// <summary>Enum of possible cases for the "greater_than" oneof.</summary>
    public enum GreaterThanOneofCase {
      None = 0,
      Gt = 4,
      Gte = 5,
    }
    private GreaterThanOneofCase greaterThanCase_ = GreaterThanOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GreaterThanOneofCase GreaterThanCase {
      get { return greaterThanCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGreaterThan() {
      greaterThanCase_ = GreaterThanOneofCase.None;
      greaterThan_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as DoubleRules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(DoubleRules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Const, other.Const)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Lt, other.Lt)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Lte, other.Lte)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Gt, other.Gt)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Gte, other.Gte)) return false;
      if(!in_.Equals(other.in_)) return false;
      if(!notIn_.Equals(other.notIn_)) return false;
      if (Finite != other.Finite) return false;
      if(!example_.Equals(other.example_)) return false;
      if (LessThanCase != other.LessThanCase) return false;
      if (GreaterThanCase != other.GreaterThanCase) return false;
      if (!Equals(_extensions, other._extensions)) {
        return false;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasConst) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Const);
      if (HasLt) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Lt);
      if (HasLte) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Lte);
      if (HasGt) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Gt);
      if (HasGte) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Gte);
      hash ^= in_.GetHashCode();
      hash ^= notIn_.GetHashCode();
      if (HasFinite) hash ^= Finite.GetHashCode();
      hash ^= example_.GetHashCode();
      hash ^= (int) lessThanCase_;
      hash ^= (int) greaterThanCase_;
      if (_extensions != null) {
        hash ^= _extensions.GetHashCode();
      }
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasConst) {
        output.WriteRawTag(9);
        output.WriteDouble(Const);
      }
      if (HasLt) {
        output.WriteRawTag(17);
        output.WriteDouble(Lt);
      }
      if (HasLte) {
        output.WriteRawTag(25);
        output.WriteDouble(Lte);
      }
      if (HasGt) {
        output.WriteRawTag(33);
        output.WriteDouble(Gt);
      }
      if (HasGte) {
        output.WriteRawTag(41);
        output.WriteDouble(Gte);
      }
      in_.WriteTo(output, _repeated_in_codec);
      notIn_.WriteTo(output, _repeated_notIn_codec);
      if (HasFinite) {
        output.WriteRawTag(64);
        output.WriteBool(Finite);
      }
      example_.WriteTo(output, _repeated_example_codec);
      if (_extensions != null) {
        _extensions.WriteTo(output);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasConst) {
        output.WriteRawTag(9);
        output.WriteDouble(Const);
      }
      if (HasLt) {
        output.WriteRawTag(17);
        output.WriteDouble(Lt);
      }
      if (HasLte) {
        output.WriteRawTag(25);
        output.WriteDouble(Lte);
      }
      if (HasGt) {
        output.WriteRawTag(33);
        output.WriteDouble(Gt);
      }
      if (HasGte) {
        output.WriteRawTag(41);
        output.WriteDouble(Gte);
      }
      in_.WriteTo(ref output, _repeated_in_codec);
      notIn_.WriteTo(ref output, _repeated_notIn_codec);
      if (HasFinite) {
        output.WriteRawTag(64);
        output.WriteBool(Finite);
      }
      example_.WriteTo(ref output, _repeated_example_codec);
      if (_extensions != null) {
        _extensions.WriteTo(ref output);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasConst) {
        size += 1 + 8;
      }
      if (HasLt) {
        size += 1 + 8;
      }
      if (HasLte) {
        size += 1 + 8;
      }
      if (HasGt) {
        size += 1 + 8;
      }
      if (HasGte) {
        size += 1 + 8;
      }
      size += in_.CalculateSize(_repeated_in_codec);
      size += notIn_.CalculateSize(_repeated_notIn_codec);
      if (HasFinite) {
        size += 1 + 1;
      }
      size += example_.CalculateSize(_repeated_example_codec);
      if (_extensions != null) {
        size += _extensions.CalculateSize();
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(DoubleRules other) {
      if (other == null) {
        return;
      }
      if (other.HasConst) {
        Const = other.Const;
      }
      in_.Add(other.in_);
      notIn_.Add(other.notIn_);
      if (other.HasFinite) {
        Finite = other.Finite;
      }
      example_.Add(other.example_);
      switch (other.LessThanCase) {
        case LessThanOneofCase.Lt:
          Lt = other.Lt;
          break;
        case LessThanOneofCase.Lte:
          Lte = other.Lte;
          break;
      }

      switch (other.GreaterThanCase) {
        case GreaterThanOneofCase.Gt:
          Gt = other.Gt;
          break;
        case GreaterThanOneofCase.Gte:
          Gte = other.Gte;
          break;
      }

      pb::ExtensionSet.MergeFrom(ref _extensions, other._extensions);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            if (!pb::ExtensionSet.TryMergeFieldFrom(ref _extensions, input)) {
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            }
            break;
          case 9: {
            Const = input.ReadDouble();
            break;
          }
          case 17: {
            Lt = input.ReadDouble();
            break;
          }
          case 25: {
            Lte = input.ReadDouble();
            break;
          }
          case 33: {
            Gt = input.ReadDouble();
            break;
          }
          case 41: {
            Gte = input.ReadDouble();
            break;
          }
          case 50:
          case 49: {
            in_.AddEntriesFrom(input, _repeated_in_codec);
            break;
          }
          case 58:
          case 57: {
            notIn_.AddEntriesFrom(input, _repeated_notIn_codec);
            break;
          }
          case 64: {
            Finite = input.ReadBool();
            break;
          }
          case 74:
          case 73: {
            example_.AddEntriesFrom(input, _repeated_example_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            if (!pb::ExtensionSet.TryMergeFieldFrom(ref _extensions, ref input)) {
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            }
            break;
          case 9: {
            Const = input.ReadDouble();
            break;
          }
          case 17: {
            Lt = input.ReadDouble();
            break;
          }
          case 25: {
            Lte = input.ReadDouble();
            break;
          }
          case 33: {
            Gt = input.ReadDouble();
            break;
          }
          case 41: {
            Gte = input.ReadDouble();
            break;
          }
          case 50:
          case 49: {
            in_.AddEntriesFrom(ref input, _repeated_in_codec);
            break;
          }
          case 58:
          case 57: {
            notIn_.AddEntriesFrom(ref input, _repeated_notIn_codec);
            break;
          }
          case 64: {
            Finite = input.ReadBool();
            break;
          }
          case 74:
          case 73: {
            example_.AddEntriesFrom(ref input, _repeated_example_codec);
            break;
          }
        }
      }
    }
    #endif

    public TValue GetExtension<TValue>(pb::Extension<DoubleRules, TValue> extension) {
      return pb::ExtensionSet.Get(ref _extensions, extension);
    }
    public pbc::RepeatedField<TValue> GetExtension<TValue>(pb::RepeatedExtension<DoubleRules, TValue> extension) {
      return pb::ExtensionSet.Get(ref _extensions, extension);
    }
    public pbc::RepeatedField<TValue> GetOrInitializeExtension<TValue>(pb::RepeatedExtension<DoubleRules, TValue> extension) {
      return pb::ExtensionSet.GetOrInitialize(ref _extensions, extension);
    }
    public void SetExtension<TValue>(pb::Extension<DoubleRules, TValue> extension, TValue value) {
      pb::ExtensionSet.Set(ref _extensions, extension, value);
    }
    public bool HasExtension<TValue>(pb::Extension<DoubleRules, TValue> extension) {
      return pb::ExtensionSet.Has(ref _extensions, extension);
    }
    public void ClearExtension<TValue>(pb::Extension<DoubleRules, TValue> extension) {
      pb::ExtensionSet.Clear(ref _extensions, extension);
    }
    public void ClearExtension<TValue>(pb::RepeatedExtension<DoubleRules, TValue> extension) {
      pb::ExtensionSet.Clear(ref _extensions, extension);
    }

  }

  /// <summary>
  /// Int32Rules describes the rules applied to `int32` values. These
  /// rules may also be applied to the `google.protobuf.Int32Value` Well-Known-Type.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Int32Rules : pb::IExtendableMessage<Int32Rules>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Int32Rules> _parser = new pb::MessageParser<Int32Rules>(() => new Int32Rules());
    private pb::UnknownFieldSet _unknownFields;
    private pb::ExtensionSet<Int32Rules> _extensions;
    private pb::ExtensionSet<Int32Rules> _Extensions { get { return _extensions; } }
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Int32Rules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Buf.Validate.ValidateReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Int32Rules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Int32Rules(Int32Rules other) : this() {
      _hasBits0 = other._hasBits0;
      const_ = other.const_;
      in_ = other.in_.Clone();
      notIn_ = other.notIn_.Clone();
      example_ = other.example_.Clone();
      switch (other.LessThanCase) {
        case LessThanOneofCase.Lt:
          Lt = other.Lt;
          break;
        case LessThanOneofCase.Lte:
          Lte = other.Lte;
          break;
      }

      switch (other.GreaterThanCase) {
        case GreaterThanOneofCase.Gt:
          Gt = other.Gt;
          break;
        case GreaterThanOneofCase.Gte:
          Gte = other.Gte;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      _extensions = pb::ExtensionSet.Clone(other._extensions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Int32Rules Clone() {
      return new Int32Rules(this);
    }

    /// <summary>Field number for the "const" field.</summary>
    public const int ConstFieldNumber = 1;
    private readonly static int ConstDefaultValue = 0;

    private int const_;
    /// <summary>
    /// `const` requires the field value to exactly match the specified value. If
    /// the field value doesn't match, an error message is generated.
    ///
    /// ```proto
    /// message MyInt32 {
    ///   // value must equal 42
    ///   int32 value = 1 [(buf.validate.field).int32.const = 42];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Const {
      get { if ((_hasBits0 & 1) != 0) { return const_; } else { return ConstDefaultValue; } }
      set {
        _hasBits0 |= 1;
        const_ = value;
      }
    }
    /// <summary>Gets whether the "const" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasConst {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "const" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearConst() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "lt" field.</summary>
    public const int LtFieldNumber = 2;
    /// <summary>
    /// `lt` requires the field value to be less than the specified value (field
    /// &lt; value). If the field value is equal to or greater than the specified
    /// value, an error message is generated.
    ///
    /// ```proto
    /// message MyInt32 {
    ///   // value must be less than 10
    ///   int32 value = 1 [(buf.validate.field).int32.lt = 10];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Lt {
      get { return HasLt ? (int) lessThan_ : 0; }
      set {
        lessThan_ = value;
        lessThanCase_ = LessThanOneofCase.Lt;
      }
    }
    /// <summary>Gets whether the "lt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLt {
      get { return lessThanCase_ == LessThanOneofCase.Lt; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "lt" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLt() {
      if (HasLt) {
        ClearLessThan();
      }
    }

    /// <summary>Field number for the "lte" field.</summary>
    public const int LteFieldNumber = 3;
    /// <summary>
    /// `lte` requires the field value to be less than or equal to the specified
    /// value (field &lt;= value). If the field value is greater than the specified
    /// value, an error message is generated.
    ///
    /// ```proto
    /// message MyInt32 {
    ///   // value must be less than or equal to 10
    ///   int32 value = 1 [(buf.validate.field).int32.lte = 10];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Lte {
      get { return HasLte ? (int) lessThan_ : 0; }
      set {
        lessThan_ = value;
        lessThanCase_ = LessThanOneofCase.Lte;
      }
    }
    /// <summary>Gets whether the "lte" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLte {
      get { return lessThanCase_ == LessThanOneofCase.Lte; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "lte" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLte() {
      if (HasLte) {
        ClearLessThan();
      }
    }

    /// <summary>Field number for the "gt" field.</summary>
    public const int GtFieldNumber = 4;
    /// <summary>
    /// `gt` requires the field value to be greater than the specified value
    /// (exclusive). If the value of `gt` is larger than a specified `lt` or
    /// `lte`, the range is reversed, and the field value must be outside the
    /// specified range. If the field value doesn't meet the required conditions,
    /// an error message is generated.
    ///
    /// ```proto
    /// message MyInt32 {
    ///   // value must be greater than 5 [int32.gt]
    ///   int32 value = 1 [(buf.validate.field).int32.gt = 5];
    ///
    ///   // value must be greater than 5 and less than 10 [int32.gt_lt]
    ///   int32 other_value = 2 [(buf.validate.field).int32 = { gt: 5, lt: 10 }];
    ///
    ///   // value must be greater than 10 or less than 5 [int32.gt_lt_exclusive]
    ///   int32 another_value = 3 [(buf.validate.field).int32 = { gt: 10, lt: 5 }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Gt {
      get { return HasGt ? (int) greaterThan_ : 0; }
      set {
        greaterThan_ = value;
        greaterThanCase_ = GreaterThanOneofCase.Gt;
      }
    }
    /// <summary>Gets whether the "gt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGt {
      get { return greaterThanCase_ == GreaterThanOneofCase.Gt; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "gt" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGt() {
      if (HasGt) {
        ClearGreaterThan();
      }
    }

    /// <summary>Field number for the "gte" field.</summary>
    public const int GteFieldNumber = 5;
    /// <summary>
    /// `gte` requires the field value to be greater than or equal to the specified value
    /// (exclusive). If the value of `gte` is larger than a specified `lt` or
    /// `lte`, the range is reversed, and the field value must be outside the
    /// specified range. If the field value doesn't meet the required conditions,
    /// an error message is generated.
    ///
    /// ```proto
    /// message MyInt32 {
    ///   // value must be greater than or equal to 5 [int32.gte]
    ///   int32 value = 1 [(buf.validate.field).int32.gte = 5];
    ///
    ///   // value must be greater than or equal to 5 and less than 10 [int32.gte_lt]
    ///   int32 other_value = 2 [(buf.validate.field).int32 = { gte: 5, lt: 10 }];
    ///
    ///   // value must be greater than or equal to 10 or less than 5 [int32.gte_lt_exclusive]
    ///   int32 another_value = 3 [(buf.validate.field).int32 = { gte: 10, lt: 5 }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Gte {
      get { return HasGte ? (int) greaterThan_ : 0; }
      set {
        greaterThan_ = value;
        greaterThanCase_ = GreaterThanOneofCase.Gte;
      }
    }
    /// <summary>Gets whether the "gte" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGte {
      get { return greaterThanCase_ == GreaterThanOneofCase.Gte; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "gte" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGte() {
      if (HasGte) {
        ClearGreaterThan();
      }
    }

    /// <summary>Field number for the "in" field.</summary>
    public const int InFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_in_codec
        = pb::FieldCodec.ForInt32(48);
    private readonly pbc::RepeatedField<int> in_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// `in` requires the field value to be equal to one of the specified values.
    /// If the field value isn't one of the specified values, an error message is
    /// generated.
    ///
    /// ```proto
    /// message MyInt32 {
    ///   // value must be in list [1, 2, 3]
    ///   int32 value = 1 [(buf.validate.field).int32 = { in: [1, 2, 3] }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> In {
      get { return in_; }
    }

    /// <summary>Field number for the "not_in" field.</summary>
    public const int NotInFieldNumber = 7;
    private static readonly pb::FieldCodec<int> _repeated_notIn_codec
        = pb::FieldCodec.ForInt32(56);
    private readonly pbc::RepeatedField<int> notIn_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// `not_in` requires the field value to not be equal to any of the specified
    /// values. If the field value is one of the specified values, an error message
    /// is generated.
    ///
    /// ```proto
    /// message MyInt32 {
    ///   // value must not be in list [1, 2, 3]
    ///   int32 value = 1 [(buf.validate.field).int32 = { not_in: [1, 2, 3] }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> NotIn {
      get { return notIn_; }
    }

    /// <summary>Field number for the "example" field.</summary>
    public const int ExampleFieldNumber = 8;
    private static readonly pb::FieldCodec<int> _repeated_example_codec
        = pb::FieldCodec.ForInt32(64);
    private readonly pbc::RepeatedField<int> example_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// `example` specifies values that the field may have. These values SHOULD
    /// conform to other rules. `example` values will not impact validation
    /// but may be used as helpful guidance on how to populate the given field.
    ///
    /// ```proto
    /// message MyInt32 {
    ///   int32 value = 1 [
    ///     (buf.validate.field).int32.example = 1,
    ///     (buf.validate.field).int32.example = -10
    ///   ];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> Example {
      get { return example_; }
    }

    private object lessThan_;
    /// <summary>Enum of possible cases for the "less_than" oneof.</summary>
    public enum LessThanOneofCase {
      None = 0,
      Lt = 2,
      Lte = 3,
    }
    private LessThanOneofCase lessThanCase_ = LessThanOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LessThanOneofCase LessThanCase {
      get { return lessThanCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLessThan() {
      lessThanCase_ = LessThanOneofCase.None;
      lessThan_ = null;
    }

    private object greaterThan_;
    /// <summary>Enum of possible cases for the "greater_than" oneof.</summary>
    public enum GreaterThanOneofCase {
      None = 0,
      Gt = 4,
      Gte = 5,
    }
    private GreaterThanOneofCase greaterThanCase_ = GreaterThanOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GreaterThanOneofCase GreaterThanCase {
      get { return greaterThanCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGreaterThan() {
      greaterThanCase_ = GreaterThanOneofCase.None;
      greaterThan_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Int32Rules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Int32Rules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Const != other.Const) return false;
      if (Lt != other.Lt) return false;
      if (Lte != other.Lte) return false;
      if (Gt != other.Gt) return false;
      if (Gte != other.Gte) return false;
      if(!in_.Equals(other.in_)) return false;
      if(!notIn_.Equals(other.notIn_)) return false;
      if(!example_.Equals(other.example_)) return false;
      if (LessThanCase != other.LessThanCase) return false;
      if (GreaterThanCase != other.GreaterThanCase) return false;
      if (!Equals(_extensions, other._extensions)) {
        return false;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasConst) hash ^= Const.GetHashCode();
      if (HasLt) hash ^= Lt.GetHashCode();
      if (HasLte) hash ^= Lte.GetHashCode();
      if (HasGt) hash ^= Gt.GetHashCode();
      if (HasGte) hash ^= Gte.GetHashCode();
      hash ^= in_.GetHashCode();
      hash ^= notIn_.GetHashCode();
      hash ^= example_.GetHashCode();
      hash ^= (int) lessThanCase_;
      hash ^= (int) greaterThanCase_;
      if (_extensions != null) {
        hash ^= _extensions.GetHashCode();
      }
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasConst) {
        output.WriteRawTag(8);
        output.WriteInt32(Const);
      }
      if (HasLt) {
        output.WriteRawTag(16);
        output.WriteInt32(Lt);
      }
      if (HasLte) {
        output.WriteRawTag(24);
        output.WriteInt32(Lte);
      }
      if (HasGt) {
        output.WriteRawTag(32);
        output.WriteInt32(Gt);
      }
      if (HasGte) {
        output.WriteRawTag(40);
        output.WriteInt32(Gte);
      }
      in_.WriteTo(output, _repeated_in_codec);
      notIn_.WriteTo(output, _repeated_notIn_codec);
      example_.WriteTo(output, _repeated_example_codec);
      if (_extensions != null) {
        _extensions.WriteTo(output);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasConst) {
        output.WriteRawTag(8);
        output.WriteInt32(Const);
      }
      if (HasLt) {
        output.WriteRawTag(16);
        output.WriteInt32(Lt);
      }
      if (HasLte) {
        output.WriteRawTag(24);
        output.WriteInt32(Lte);
      }
      if (HasGt) {
        output.WriteRawTag(32);
        output.WriteInt32(Gt);
      }
      if (HasGte) {
        output.WriteRawTag(40);
        output.WriteInt32(Gte);
      }
      in_.WriteTo(ref output, _repeated_in_codec);
      notIn_.WriteTo(ref output, _repeated_notIn_codec);
      example_.WriteTo(ref output, _repeated_example_codec);
      if (_extensions != null) {
        _extensions.WriteTo(ref output);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasConst) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Const);
      }
      if (HasLt) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lt);
      }
      if (HasLte) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lte);
      }
      if (HasGt) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gt);
      }
      if (HasGte) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gte);
      }
      size += in_.CalculateSize(_repeated_in_codec);
      size += notIn_.CalculateSize(_repeated_notIn_codec);
      size += example_.CalculateSize(_repeated_example_codec);
      if (_extensions != null) {
        size += _extensions.CalculateSize();
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Int32Rules other) {
      if (other == null) {
        return;
      }
      if (other.HasConst) {
        Const = other.Const;
      }
      in_.Add(other.in_);
      notIn_.Add(other.notIn_);
      example_.Add(other.example_);
      switch (other.LessThanCase) {
        case LessThanOneofCase.Lt:
          Lt = other.Lt;
          break;
        case LessThanOneofCase.Lte:
          Lte = other.Lte;
          break;
      }

      switch (other.GreaterThanCase) {
        case GreaterThanOneofCase.Gt:
          Gt = other.Gt;
          break;
        case GreaterThanOneofCase.Gte:
          Gte = other.Gte;
          break;
      }

      pb::ExtensionSet.MergeFrom(ref _extensions, other._extensions);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            if (!pb::ExtensionSet.TryMergeFieldFrom(ref _extensions, input)) {
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            }
            break;
          case 8: {
            Const = input.ReadInt32();
            break;
          }
          case 16: {
            Lt = input.ReadInt32();
            break;
          }
          case 24: {
            Lte = input.ReadInt32();
            break;
          }
          case 32: {
            Gt = input.ReadInt32();
            break;
          }
          case 40: {
            Gte = input.ReadInt32();
            break;
          }
          case 50:
          case 48: {
            in_.AddEntriesFrom(input, _repeated_in_codec);
            break;
          }
          case 58:
          case 56: {
            notIn_.AddEntriesFrom(input, _repeated_notIn_codec);
            break;
          }
          case 66:
          case 64: {
            example_.AddEntriesFrom(input, _repeated_example_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            if (!pb::ExtensionSet.TryMergeFieldFrom(ref _extensions, ref input)) {
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            }
            break;
          case 8: {
            Const = input.ReadInt32();
            break;
          }
          case 16: {
            Lt = input.ReadInt32();
            break;
          }
          case 24: {
            Lte = input.ReadInt32();
            break;
          }
          case 32: {
            Gt = input.ReadInt32();
            break;
          }
          case 40: {
            Gte = input.ReadInt32();
            break;
          }
          case 50:
          case 48: {
            in_.AddEntriesFrom(ref input, _repeated_in_codec);
            break;
          }
          case 58:
          case 56: {
            notIn_.AddEntriesFrom(ref input, _repeated_notIn_codec);
            break;
          }
          case 66:
          case 64: {
            example_.AddEntriesFrom(ref input, _repeated_example_codec);
            break;
          }
        }
      }
    }
    #endif

    public TValue GetExtension<TValue>(pb::Extension<Int32Rules, TValue> extension) {
      return pb::ExtensionSet.Get(ref _extensions, extension);
    }
    public pbc::RepeatedField<TValue> GetExtension<TValue>(pb::RepeatedExtension<Int32Rules, TValue> extension) {
      return pb::ExtensionSet.Get(ref _extensions, extension);
    }
    public pbc::RepeatedField<TValue> GetOrInitializeExtension<TValue>(pb::RepeatedExtension<Int32Rules, TValue> extension) {
      return pb::ExtensionSet.GetOrInitialize(ref _extensions, extension);
    }
    public void SetExtension<TValue>(pb::Extension<Int32Rules, TValue> extension, TValue value) {
      pb::ExtensionSet.Set(ref _extensions, extension, value);
    }
    public bool HasExtension<TValue>(pb::Extension<Int32Rules, TValue> extension) {
      return pb::ExtensionSet.Has(ref _extensions, extension);
    }
    public void ClearExtension<TValue>(pb::Extension<Int32Rules, TValue> extension) {
      pb::ExtensionSet.Clear(ref _extensions, extension);
    }
    public void ClearExtension<TValue>(pb::RepeatedExtension<Int32Rules, TValue> extension) {
      pb::ExtensionSet.Clear(ref _extensions, extension);
    }

  }

  /// <summary>
  /// Int64Rules describes the rules applied to `int64` values. These
  /// rules may also be applied to the `google.protobuf.Int64Value` Well-Known-Type.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Int64Rules : pb::IExtendableMessage<Int64Rules>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Int64Rules> _parser = new pb::MessageParser<Int64Rules>(() => new Int64Rules());
    private pb::UnknownFieldSet _unknownFields;
    private pb::ExtensionSet<Int64Rules> _extensions;
    private pb::ExtensionSet<Int64Rules> _Extensions { get { return _extensions; } }
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Int64Rules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Buf.Validate.ValidateReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Int64Rules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Int64Rules(Int64Rules other) : this() {
      _hasBits0 = other._hasBits0;
      const_ = other.const_;
      in_ = other.in_.Clone();
      notIn_ = other.notIn_.Clone();
      example_ = other.example_.Clone();
      switch (other.LessThanCase) {
        case LessThanOneofCase.Lt:
          Lt = other.Lt;
          break;
        case LessThanOneofCase.Lte:
          Lte = other.Lte;
          break;
      }

      switch (other.GreaterThanCase) {
        case GreaterThanOneofCase.Gt:
          Gt = other.Gt;
          break;
        case GreaterThanOneofCase.Gte:
          Gte = other.Gte;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      _extensions = pb::ExtensionSet.Clone(other._extensions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Int64Rules Clone() {
      return new Int64Rules(this);
    }

    /// <summary>Field number for the "const" field.</summary>
    public const int ConstFieldNumber = 1;
    private readonly static long ConstDefaultValue = 0L;

    private long const_;
    /// <summary>
    /// `const` requires the field value to exactly match the specified value. If
    /// the field value doesn't match, an error message is generated.
    ///
    /// ```proto
    /// message MyInt64 {
    ///   // value must equal 42
    ///   int64 value = 1 [(buf.validate.field).int64.const = 42];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Const {
      get { if ((_hasBits0 & 1) != 0) { return const_; } else { return ConstDefaultValue; } }
      set {
        _hasBits0 |= 1;
        const_ = value;
      }
    }
    /// <summary>Gets whether the "const" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasConst {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "const" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearConst() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "lt" field.</summary>
    public const int LtFieldNumber = 2;
    /// <summary>
    /// `lt` requires the field value to be less than the specified value (field &lt;
    /// value). If the field value is equal to or greater than the specified value,
    /// an error message is generated.
    ///
    /// ```proto
    /// message MyInt64 {
    ///   // value must be less than 10
    ///   int64 value = 1 [(buf.validate.field).int64.lt = 10];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Lt {
      get { return HasLt ? (long) lessThan_ : 0L; }
      set {
        lessThan_ = value;
        lessThanCase_ = LessThanOneofCase.Lt;
      }
    }
    /// <summary>Gets whether the "lt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLt {
      get { return lessThanCase_ == LessThanOneofCase.Lt; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "lt" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLt() {
      if (HasLt) {
        ClearLessThan();
      }
    }

    /// <summary>Field number for the "lte" field.</summary>
    public const int LteFieldNumber = 3;
    /// <summary>
    /// `lte` requires the field value to be less than or equal to the specified
    /// value (field &lt;= value). If the field value is greater than the specified
    /// value, an error message is generated.
    ///
    /// ```proto
    /// message MyInt64 {
    ///   // value must be less than or equal to 10
    ///   int64 value = 1 [(buf.validate.field).int64.lte = 10];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Lte {
      get { return HasLte ? (long) lessThan_ : 0L; }
      set {
        lessThan_ = value;
        lessThanCase_ = LessThanOneofCase.Lte;
      }
    }
    /// <summary>Gets whether the "lte" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLte {
      get { return lessThanCase_ == LessThanOneofCase.Lte; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "lte" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLte() {
      if (HasLte) {
        ClearLessThan();
      }
    }

    /// <summary>Field number for the "gt" field.</summary>
    public const int GtFieldNumber = 4;
    /// <summary>
    /// `gt` requires the field value to be greater than the specified value
    /// (exclusive). If the value of `gt` is larger than a specified `lt` or
    /// `lte`, the range is reversed, and the field value must be outside the
    /// specified range. If the field value doesn't meet the required conditions,
    /// an error message is generated.
    ///
    /// ```proto
    /// message MyInt64 {
    ///   // value must be greater than 5 [int64.gt]
    ///   int64 value = 1 [(buf.validate.field).int64.gt = 5];
    ///
    ///   // value must be greater than 5 and less than 10 [int64.gt_lt]
    ///   int64 other_value = 2 [(buf.validate.field).int64 = { gt: 5, lt: 10 }];
    ///
    ///   // value must be greater than 10 or less than 5 [int64.gt_lt_exclusive]
    ///   int64 another_value = 3 [(buf.validate.field).int64 = { gt: 10, lt: 5 }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Gt {
      get { return HasGt ? (long) greaterThan_ : 0L; }
      set {
        greaterThan_ = value;
        greaterThanCase_ = GreaterThanOneofCase.Gt;
      }
    }
    /// <summary>Gets whether the "gt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGt {
      get { return greaterThanCase_ == GreaterThanOneofCase.Gt; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "gt" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGt() {
      if (HasGt) {
        ClearGreaterThan();
      }
    }

    /// <summary>Field number for the "gte" field.</summary>
    public const int GteFieldNumber = 5;
    /// <summary>
    /// `gte` requires the field value to be greater than or equal to the specified
    /// value (exclusive). If the value of `gte` is larger than a specified `lt`
    /// or `lte`, the range is reversed, and the field value must be outside the
    /// specified range. If the field value doesn't meet the required conditions,
    /// an error message is generated.
    ///
    /// ```proto
    /// message MyInt64 {
    ///   // value must be greater than or equal to 5 [int64.gte]
    ///   int64 value = 1 [(buf.validate.field).int64.gte = 5];
    ///
    ///   // value must be greater than or equal to 5 and less than 10 [int64.gte_lt]
    ///   int64 other_value = 2 [(buf.validate.field).int64 = { gte: 5, lt: 10 }];
    ///
    ///   // value must be greater than or equal to 10 or less than 5 [int64.gte_lt_exclusive]
    ///   int64 another_value = 3 [(buf.validate.field).int64 = { gte: 10, lt: 5 }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Gte {
      get { return HasGte ? (long) greaterThan_ : 0L; }
      set {
        greaterThan_ = value;
        greaterThanCase_ = GreaterThanOneofCase.Gte;
      }
    }
    /// <summary>Gets whether the "gte" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGte {
      get { return greaterThanCase_ == GreaterThanOneofCase.Gte; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "gte" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGte() {
      if (HasGte) {
        ClearGreaterThan();
      }
    }

    /// <summary>Field number for the "in" field.</summary>
    public const int InFieldNumber = 6;
    private static readonly pb::FieldCodec<long> _repeated_in_codec
        = pb::FieldCodec.ForInt64(48);
    private readonly pbc::RepeatedField<long> in_ = new pbc::RepeatedField<long>();
    /// <summary>
    /// `in` requires the field value to be equal to one of the specified values.
    /// If the field value isn't one of the specified values, an error message is
    /// generated.
    ///
    /// ```proto
    /// message MyInt64 {
    ///   // value must be in list [1, 2, 3]
    ///   int64 value = 1 [(buf.validate.field).int64 = { in: [1, 2, 3] }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<long> In {
      get { return in_; }
    }

    /// <summary>Field number for the "not_in" field.</summary>
    public const int NotInFieldNumber = 7;
    private static readonly pb::FieldCodec<long> _repeated_notIn_codec
        = pb::FieldCodec.ForInt64(56);
    private readonly pbc::RepeatedField<long> notIn_ = new pbc::RepeatedField<long>();
    /// <summary>
    /// `not_in` requires the field value to not be equal to any of the specified
    /// values. If the field value is one of the specified values, an error
    /// message is generated.
    ///
    /// ```proto
    /// message MyInt64 {
    ///   // value must not be in list [1, 2, 3]
    ///   int64 value = 1 [(buf.validate.field).int64 = { not_in: [1, 2, 3] }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<long> NotIn {
      get { return notIn_; }
    }

    /// <summary>Field number for the "example" field.</summary>
    public const int ExampleFieldNumber = 9;
    private static readonly pb::FieldCodec<long> _repeated_example_codec
        = pb::FieldCodec.ForInt64(72);
    private readonly pbc::RepeatedField<long> example_ = new pbc::RepeatedField<long>();
    /// <summary>
    /// `example` specifies values that the field may have. These values SHOULD
    /// conform to other rules. `example` values will not impact validation
    /// but may be used as helpful guidance on how to populate the given field.
    ///
    /// ```proto
    /// message MyInt64 {
    ///   int64 value = 1 [
    ///     (buf.validate.field).int64.example = 1,
    ///     (buf.validate.field).int64.example = -10
    ///   ];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<long> Example {
      get { return example_; }
    }

    private object lessThan_;
    /// <summary>Enum of possible cases for the "less_than" oneof.</summary>
    public enum LessThanOneofCase {
      None = 0,
      Lt = 2,
      Lte = 3,
    }
    private LessThanOneofCase lessThanCase_ = LessThanOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LessThanOneofCase LessThanCase {
      get { return lessThanCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLessThan() {
      lessThanCase_ = LessThanOneofCase.None;
      lessThan_ = null;
    }

    private object greaterThan_;
    /// <summary>Enum of possible cases for the "greater_than" oneof.</summary>
    public enum GreaterThanOneofCase {
      None = 0,
      Gt = 4,
      Gte = 5,
    }
    private GreaterThanOneofCase greaterThanCase_ = GreaterThanOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GreaterThanOneofCase GreaterThanCase {
      get { return greaterThanCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGreaterThan() {
      greaterThanCase_ = GreaterThanOneofCase.None;
      greaterThan_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Int64Rules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Int64Rules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Const != other.Const) return false;
      if (Lt != other.Lt) return false;
      if (Lte != other.Lte) return false;
      if (Gt != other.Gt) return false;
      if (Gte != other.Gte) return false;
      if(!in_.Equals(other.in_)) return false;
      if(!notIn_.Equals(other.notIn_)) return false;
      if(!example_.Equals(other.example_)) return false;
      if (LessThanCase != other.LessThanCase) return false;
      if (GreaterThanCase != other.GreaterThanCase) return false;
      if (!Equals(_extensions, other._extensions)) {
        return false;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasConst) hash ^= Const.GetHashCode();
      if (HasLt) hash ^= Lt.GetHashCode();
      if (HasLte) hash ^= Lte.GetHashCode();
      if (HasGt) hash ^= Gt.GetHashCode();
      if (HasGte) hash ^= Gte.GetHashCode();
      hash ^= in_.GetHashCode();
      hash ^= notIn_.GetHashCode();
      hash ^= example_.GetHashCode();
      hash ^= (int) lessThanCase_;
      hash ^= (int) greaterThanCase_;
      if (_extensions != null) {
        hash ^= _extensions.GetHashCode();
      }
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasConst) {
        output.WriteRawTag(8);
        output.WriteInt64(Const);
      }
      if (HasLt) {
        output.WriteRawTag(16);
        output.WriteInt64(Lt);
      }
      if (HasLte) {
        output.WriteRawTag(24);
        output.WriteInt64(Lte);
      }
      if (HasGt) {
        output.WriteRawTag(32);
        output.WriteInt64(Gt);
      }
      if (HasGte) {
        output.WriteRawTag(40);
        output.WriteInt64(Gte);
      }
      in_.WriteTo(output, _repeated_in_codec);
      notIn_.WriteTo(output, _repeated_notIn_codec);
      example_.WriteTo(output, _repeated_example_codec);
      if (_extensions != null) {
        _extensions.WriteTo(output);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasConst) {
        output.WriteRawTag(8);
        output.WriteInt64(Const);
      }
      if (HasLt) {
        output.WriteRawTag(16);
        output.WriteInt64(Lt);
      }
      if (HasLte) {
        output.WriteRawTag(24);
        output.WriteInt64(Lte);
      }
      if (HasGt) {
        output.WriteRawTag(32);
        output.WriteInt64(Gt);
      }
      if (HasGte) {
        output.WriteRawTag(40);
        output.WriteInt64(Gte);
      }
      in_.WriteTo(ref output, _repeated_in_codec);
      notIn_.WriteTo(ref output, _repeated_notIn_codec);
      example_.WriteTo(ref output, _repeated_example_codec);
      if (_extensions != null) {
        _extensions.WriteTo(ref output);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasConst) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Const);
      }
      if (HasLt) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Lt);
      }
      if (HasLte) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Lte);
      }
      if (HasGt) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Gt);
      }
      if (HasGte) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Gte);
      }
      size += in_.CalculateSize(_repeated_in_codec);
      size += notIn_.CalculateSize(_repeated_notIn_codec);
      size += example_.CalculateSize(_repeated_example_codec);
      if (_extensions != null) {
        size += _extensions.CalculateSize();
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Int64Rules other) {
      if (other == null) {
        return;
      }
      if (other.HasConst) {
        Const = other.Const;
      }
      in_.Add(other.in_);
      notIn_.Add(other.notIn_);
      example_.Add(other.example_);
      switch (other.LessThanCase) {
        case LessThanOneofCase.Lt:
          Lt = other.Lt;
          break;
        case LessThanOneofCase.Lte:
          Lte = other.Lte;
          break;
      }

      switch (other.GreaterThanCase) {
        case GreaterThanOneofCase.Gt:
          Gt = other.Gt;
          break;
        case GreaterThanOneofCase.Gte:
          Gte = other.Gte;
          break;
      }

      pb::ExtensionSet.MergeFrom(ref _extensions, other._extensions);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            if (!pb::ExtensionSet.TryMergeFieldFrom(ref _extensions, input)) {
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            }
            break;
          case 8: {
            Const = input.ReadInt64();
            break;
          }
          case 16: {
            Lt = input.ReadInt64();
            break;
          }
          case 24: {
            Lte = input.ReadInt64();
            break;
          }
          case 32: {
            Gt = input.ReadInt64();
            break;
          }
          case 40: {
            Gte = input.ReadInt64();
            break;
          }
          case 50:
          case 48: {
            in_.AddEntriesFrom(input, _repeated_in_codec);
            break;
          }
          case 58:
          case 56: {
            notIn_.AddEntriesFrom(input, _repeated_notIn_codec);
            break;
          }
          case 74:
          case 72: {
            example_.AddEntriesFrom(input, _repeated_example_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            if (!pb::ExtensionSet.TryMergeFieldFrom(ref _extensions, ref input)) {
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            }
            break;
          case 8: {
            Const = input.ReadInt64();
            break;
          }
          case 16: {
            Lt = input.ReadInt64();
            break;
          }
          case 24: {
            Lte = input.ReadInt64();
            break;
          }
          case 32: {
            Gt = input.ReadInt64();
            break;
          }
          case 40: {
            Gte = input.ReadInt64();
            break;
          }
          case 50:
          case 48: {
            in_.AddEntriesFrom(ref input, _repeated_in_codec);
            break;
          }
          case 58:
          case 56: {
            notIn_.AddEntriesFrom(ref input, _repeated_notIn_codec);
            break;
          }
          case 74:
          case 72: {
            example_.AddEntriesFrom(ref input, _repeated_example_codec);
            break;
          }
        }
      }
    }
    #endif

    public TValue GetExtension<TValue>(pb::Extension<Int64Rules, TValue> extension) {
      return pb::ExtensionSet.Get(ref _extensions, extension);
    }
    public pbc::RepeatedField<TValue> GetExtension<TValue>(pb::RepeatedExtension<Int64Rules, TValue> extension) {
      return pb::ExtensionSet.Get(ref _extensions, extension);
    }
    public pbc::RepeatedField<TValue> GetOrInitializeExtension<TValue>(pb::RepeatedExtension<Int64Rules, TValue> extension) {
      return pb::ExtensionSet.GetOrInitialize(ref _extensions, extension);
    }
    public void SetExtension<TValue>(pb::Extension<Int64Rules, TValue> extension, TValue value) {
      pb::ExtensionSet.Set(ref _extensions, extension, value);
    }
    public bool HasExtension<TValue>(pb::Extension<Int64Rules, TValue> extension) {
      return pb::ExtensionSet.Has(ref _extensions, extension);
    }
    public void ClearExtension<TValue>(pb::Extension<Int64Rules, TValue> extension) {
      pb::ExtensionSet.Clear(ref _extensions, extension);
    }
    public void ClearExtension<TValue>(pb::RepeatedExtension<Int64Rules, TValue> extension) {
      pb::ExtensionSet.Clear(ref _extensions, extension);
    }

  }

  /// <summary>
  /// UInt32Rules describes the rules applied to `uint32` values. These
  /// rules may also be applied to the `google.protobuf.UInt32Value` Well-Known-Type.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class UInt32Rules : pb::IExtendableMessage<UInt32Rules>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UInt32Rules> _parser = new pb::MessageParser<UInt32Rules>(() => new UInt32Rules());
    private pb::UnknownFieldSet _unknownFields;
    private pb::ExtensionSet<UInt32Rules> _extensions;
    private pb::ExtensionSet<UInt32Rules> _Extensions { get { return _extensions; } }
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<UInt32Rules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Buf.Validate.ValidateReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UInt32Rules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UInt32Rules(UInt32Rules other) : this() {
      _hasBits0 = other._hasBits0;
      const_ = other.const_;
      in_ = other.in_.Clone();
      notIn_ = other.notIn_.Clone();
      example_ = other.example_.Clone();
      switch (other.LessThanCase) {
        case LessThanOneofCase.Lt:
          Lt = other.Lt;
          break;
        case LessThanOneofCase.Lte:
          Lte = other.Lte;
          break;
      }

      switch (other.GreaterThanCase) {
        case GreaterThanOneofCase.Gt:
          Gt = other.Gt;
          break;
        case GreaterThanOneofCase.Gte:
          Gte = other.Gte;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      _extensions = pb::ExtensionSet.Clone(other._extensions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UInt32Rules Clone() {
      return new UInt32Rules(this);
    }

    /// <summary>Field number for the "const" field.</summary>
    public const int ConstFieldNumber = 1;
    private readonly static uint ConstDefaultValue = 0;

    private uint const_;
    /// <summary>
    /// `const` requires the field value to exactly match the specified value. If
    /// the field value doesn't match, an error message is generated.
    ///
    /// ```proto
    /// message MyUInt32 {
    ///   // value must equal 42
    ///   uint32 value = 1 [(buf.validate.field).uint32.const = 42];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Const {
      get { if ((_hasBits0 & 1) != 0) { return const_; } else { return ConstDefaultValue; } }
      set {
        _hasBits0 |= 1;
        const_ = value;
      }
    }
    /// <summary>Gets whether the "const" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasConst {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "const" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearConst() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "lt" field.</summary>
    public const int LtFieldNumber = 2;
    /// <summary>
    /// `lt` requires the field value to be less than the specified value (field &lt;
    /// value). If the field value is equal to or greater than the specified value,
    /// an error message is generated.
    ///
    /// ```proto
    /// message MyUInt32 {
    ///   // value must be less than 10
    ///   uint32 value = 1 [(buf.validate.field).uint32.lt = 10];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Lt {
      get { return HasLt ? (uint) lessThan_ : 0; }
      set {
        lessThan_ = value;
        lessThanCase_ = LessThanOneofCase.Lt;
      }
    }
    /// <summary>Gets whether the "lt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLt {
      get { return lessThanCase_ == LessThanOneofCase.Lt; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "lt" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLt() {
      if (HasLt) {
        ClearLessThan();
      }
    }

    /// <summary>Field number for the "lte" field.</summary>
    public const int LteFieldNumber = 3;
    /// <summary>
    /// `lte` requires the field value to be less than or equal to the specified
    /// value (field &lt;= value). If the field value is greater than the specified
    /// value, an error message is generated.
    ///
    /// ```proto
    /// message MyUInt32 {
    ///   // value must be less than or equal to 10
    ///   uint32 value = 1 [(buf.validate.field).uint32.lte = 10];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Lte {
      get { return HasLte ? (uint) lessThan_ : 0; }
      set {
        lessThan_ = value;
        lessThanCase_ = LessThanOneofCase.Lte;
      }
    }
    /// <summary>Gets whether the "lte" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLte {
      get { return lessThanCase_ == LessThanOneofCase.Lte; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "lte" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLte() {
      if (HasLte) {
        ClearLessThan();
      }
    }

    /// <summary>Field number for the "gt" field.</summary>
    public const int GtFieldNumber = 4;
    /// <summary>
    /// `gt` requires the field value to be greater than the specified value
    /// (exclusive). If the value of `gt` is larger than a specified `lt` or
    /// `lte`, the range is reversed, and the field value must be outside the
    /// specified range. If the field value doesn't meet the required conditions,
    /// an error message is generated.
    ///
    /// ```proto
    /// message MyUInt32 {
    ///   // value must be greater than 5 [uint32.gt]
    ///   uint32 value = 1 [(buf.validate.field).uint32.gt = 5];
    ///
    ///   // value must be greater than 5 and less than 10 [uint32.gt_lt]
    ///   uint32 other_value = 2 [(buf.validate.field).uint32 = { gt: 5, lt: 10 }];
    ///
    ///   // value must be greater than 10 or less than 5 [uint32.gt_lt_exclusive]
    ///   uint32 another_value = 3 [(buf.validate.field).uint32 = { gt: 10, lt: 5 }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Gt {
      get { return HasGt ? (uint) greaterThan_ : 0; }
      set {
        greaterThan_ = value;
        greaterThanCase_ = GreaterThanOneofCase.Gt;
      }
    }
    /// <summary>Gets whether the "gt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGt {
      get { return greaterThanCase_ == GreaterThanOneofCase.Gt; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "gt" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGt() {
      if (HasGt) {
        ClearGreaterThan();
      }
    }

    /// <summary>Field number for the "gte" field.</summary>
    public const int GteFieldNumber = 5;
    /// <summary>
    /// `gte` requires the field value to be greater than or equal to the specified
    /// value (exclusive). If the value of `gte` is larger than a specified `lt`
    /// or `lte`, the range is reversed, and the field value must be outside the
    /// specified range. If the field value doesn't meet the required conditions,
    /// an error message is generated.
    ///
    /// ```proto
    /// message MyUInt32 {
    ///   // value must be greater than or equal to 5 [uint32.gte]
    ///   uint32 value = 1 [(buf.validate.field).uint32.gte = 5];
    ///
    ///   // value must be greater than or equal to 5 and less than 10 [uint32.gte_lt]
    ///   uint32 other_value = 2 [(buf.validate.field).uint32 = { gte: 5, lt: 10 }];
    ///
    ///   // value must be greater than or equal to 10 or less than 5 [uint32.gte_lt_exclusive]
    ///   uint32 another_value = 3 [(buf.validate.field).uint32 = { gte: 10, lt: 5 }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Gte {
      get { return HasGte ? (uint) greaterThan_ : 0; }
      set {
        greaterThan_ = value;
        greaterThanCase_ = GreaterThanOneofCase.Gte;
      }
    }
    /// <summary>Gets whether the "gte" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGte {
      get { return greaterThanCase_ == GreaterThanOneofCase.Gte; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "gte" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGte() {
      if (HasGte) {
        ClearGreaterThan();
      }
    }

    /// <summary>Field number for the "in" field.</summary>
    public const int InFieldNumber = 6;
    private static readonly pb::FieldCodec<uint> _repeated_in_codec
        = pb::FieldCodec.ForUInt32(48);
    private readonly pbc::RepeatedField<uint> in_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// `in` requires the field value to be equal to one of the specified values.
    /// If the field value isn't one of the specified values, an error message is
    /// generated.
    ///
    /// ```proto
    /// message MyUInt32 {
    ///   // value must be in list [1, 2, 3]
    ///   uint32 value = 1 [(buf.validate.field).uint32 = { in: [1, 2, 3] }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<uint> In {
      get { return in_; }
    }

    /// <summary>Field number for the "not_in" field.</summary>
    public const int NotInFieldNumber = 7;
    private static readonly pb::FieldCodec<uint> _repeated_notIn_codec
        = pb::FieldCodec.ForUInt32(56);
    private readonly pbc::RepeatedField<uint> notIn_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// `not_in` requires the field value to not be equal to any of the specified
    /// values. If the field value is one of the specified values, an error
    /// message is generated.
    ///
    /// ```proto
    /// message MyUInt32 {
    ///   // value must not be in list [1, 2, 3]
    ///   uint32 value = 1 [(buf.validate.field).uint32 = { not_in: [1, 2, 3] }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<uint> NotIn {
      get { return notIn_; }
    }

    /// <summary>Field number for the "example" field.</summary>
    public const int ExampleFieldNumber = 8;
    private static readonly pb::FieldCodec<uint> _repeated_example_codec
        = pb::FieldCodec.ForUInt32(64);
    private readonly pbc::RepeatedField<uint> example_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// `example` specifies values that the field may have. These values SHOULD
    /// conform to other rules. `example` values will not impact validation
    /// but may be used as helpful guidance on how to populate the given field.
    ///
    /// ```proto
    /// message MyUInt32 {
    ///   uint32 value = 1 [
    ///     (buf.validate.field).uint32.example = 1,
    ///     (buf.validate.field).uint32.example = 10
    ///   ];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<uint> Example {
      get { return example_; }
    }

    private object lessThan_;
    /// <summary>Enum of possible cases for the "less_than" oneof.</summary>
    public enum LessThanOneofCase {
      None = 0,
      Lt = 2,
      Lte = 3,
    }
    private LessThanOneofCase lessThanCase_ = LessThanOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LessThanOneofCase LessThanCase {
      get { return lessThanCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLessThan() {
      lessThanCase_ = LessThanOneofCase.None;
      lessThan_ = null;
    }

    private object greaterThan_;
    /// <summary>Enum of possible cases for the "greater_than" oneof.</summary>
    public enum GreaterThanOneofCase {
      None = 0,
      Gt = 4,
      Gte = 5,
    }
    private GreaterThanOneofCase greaterThanCase_ = GreaterThanOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GreaterThanOneofCase GreaterThanCase {
      get { return greaterThanCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGreaterThan() {
      greaterThanCase_ = GreaterThanOneofCase.None;
      greaterThan_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as UInt32Rules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(UInt32Rules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Const != other.Const) return false;
      if (Lt != other.Lt) return false;
      if (Lte != other.Lte) return false;
      if (Gt != other.Gt) return false;
      if (Gte != other.Gte) return false;
      if(!in_.Equals(other.in_)) return false;
      if(!notIn_.Equals(other.notIn_)) return false;
      if(!example_.Equals(other.example_)) return false;
      if (LessThanCase != other.LessThanCase) return false;
      if (GreaterThanCase != other.GreaterThanCase) return false;
      if (!Equals(_extensions, other._extensions)) {
        return false;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasConst) hash ^= Const.GetHashCode();
      if (HasLt) hash ^= Lt.GetHashCode();
      if (HasLte) hash ^= Lte.GetHashCode();
      if (HasGt) hash ^= Gt.GetHashCode();
      if (HasGte) hash ^= Gte.GetHashCode();
      hash ^= in_.GetHashCode();
      hash ^= notIn_.GetHashCode();
      hash ^= example_.GetHashCode();
      hash ^= (int) lessThanCase_;
      hash ^= (int) greaterThanCase_;
      if (_extensions != null) {
        hash ^= _extensions.GetHashCode();
      }
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasConst) {
        output.WriteRawTag(8);
        output.WriteUInt32(Const);
      }
      if (HasLt) {
        output.WriteRawTag(16);
        output.WriteUInt32(Lt);
      }
      if (HasLte) {
        output.WriteRawTag(24);
        output.WriteUInt32(Lte);
      }
      if (HasGt) {
        output.WriteRawTag(32);
        output.WriteUInt32(Gt);
      }
      if (HasGte) {
        output.WriteRawTag(40);
        output.WriteUInt32(Gte);
      }
      in_.WriteTo(output, _repeated_in_codec);
      notIn_.WriteTo(output, _repeated_notIn_codec);
      example_.WriteTo(output, _repeated_example_codec);
      if (_extensions != null) {
        _extensions.WriteTo(output);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasConst) {
        output.WriteRawTag(8);
        output.WriteUInt32(Const);
      }
      if (HasLt) {
        output.WriteRawTag(16);
        output.WriteUInt32(Lt);
      }
      if (HasLte) {
        output.WriteRawTag(24);
        output.WriteUInt32(Lte);
      }
      if (HasGt) {
        output.WriteRawTag(32);
        output.WriteUInt32(Gt);
      }
      if (HasGte) {
        output.WriteRawTag(40);
        output.WriteUInt32(Gte);
      }
      in_.WriteTo(ref output, _repeated_in_codec);
      notIn_.WriteTo(ref output, _repeated_notIn_codec);
      example_.WriteTo(ref output, _repeated_example_codec);
      if (_extensions != null) {
        _extensions.WriteTo(ref output);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasConst) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Const);
      }
      if (HasLt) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Lt);
      }
      if (HasLte) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Lte);
      }
      if (HasGt) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Gt);
      }
      if (HasGte) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Gte);
      }
      size += in_.CalculateSize(_repeated_in_codec);
      size += notIn_.CalculateSize(_repeated_notIn_codec);
      size += example_.CalculateSize(_repeated_example_codec);
      if (_extensions != null) {
        size += _extensions.CalculateSize();
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(UInt32Rules other) {
      if (other == null) {
        return;
      }
      if (other.HasConst) {
        Const = other.Const;
      }
      in_.Add(other.in_);
      notIn_.Add(other.notIn_);
      example_.Add(other.example_);
      switch (other.LessThanCase) {
        case LessThanOneofCase.Lt:
          Lt = other.Lt;
          break;
        case LessThanOneofCase.Lte:
          Lte = other.Lte;
          break;
      }

      switch (other.GreaterThanCase) {
        case GreaterThanOneofCase.Gt:
          Gt = other.Gt;
          break;
        case GreaterThanOneofCase.Gte:
          Gte = other.Gte;
          break;
      }

      pb::ExtensionSet.MergeFrom(ref _extensions, other._extensions);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            if (!pb::ExtensionSet.TryMergeFieldFrom(ref _extensions, input)) {
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            }
            break;
          case 8: {
            Const = input.ReadUInt32();
            break;
          }
          case 16: {
            Lt = input.ReadUInt32();
            break;
          }
          case 24: {
            Lte = input.ReadUInt32();
            break;
          }
          case 32: {
            Gt = input.ReadUInt32();
            break;
          }
          case 40: {
            Gte = input.ReadUInt32();
            break;
          }
          case 50:
          case 48: {
            in_.AddEntriesFrom(input, _repeated_in_codec);
            break;
          }
          case 58:
          case 56: {
            notIn_.AddEntriesFrom(input, _repeated_notIn_codec);
            break;
          }
          case 66:
          case 64: {
            example_.AddEntriesFrom(input, _repeated_example_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            if (!pb::ExtensionSet.TryMergeFieldFrom(ref _extensions, ref input)) {
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            }
            break;
          case 8: {
            Const = input.ReadUInt32();
            break;
          }
          case 16: {
            Lt = input.ReadUInt32();
            break;
          }
          case 24: {
            Lte = input.ReadUInt32();
            break;
          }
          case 32: {
            Gt = input.ReadUInt32();
            break;
          }
          case 40: {
            Gte = input.ReadUInt32();
            break;
          }
          case 50:
          case 48: {
            in_.AddEntriesFrom(ref input, _repeated_in_codec);
            break;
          }
          case 58:
          case 56: {
            notIn_.AddEntriesFrom(ref input, _repeated_notIn_codec);
            break;
          }
          case 66:
          case 64: {
            example_.AddEntriesFrom(ref input, _repeated_example_codec);
            break;
          }
        }
      }
    }
    #endif

    public TValue GetExtension<TValue>(pb::Extension<UInt32Rules, TValue> extension) {
      return pb::ExtensionSet.Get(ref _extensions, extension);
    }
    public pbc::RepeatedField<TValue> GetExtension<TValue>(pb::RepeatedExtension<UInt32Rules, TValue> extension) {
      return pb::ExtensionSet.Get(ref _extensions, extension);
    }
    public pbc::RepeatedField<TValue> GetOrInitializeExtension<TValue>(pb::RepeatedExtension<UInt32Rules, TValue> extension) {
      return pb::ExtensionSet.GetOrInitialize(ref _extensions, extension);
    }
    public void SetExtension<TValue>(pb::Extension<UInt32Rules, TValue> extension, TValue value) {
      pb::ExtensionSet.Set(ref _extensions, extension, value);
    }
    public bool HasExtension<TValue>(pb::Extension<UInt32Rules, TValue> extension) {
      return pb::ExtensionSet.Has(ref _extensions, extension);
    }
    public void ClearExtension<TValue>(pb::Extension<UInt32Rules, TValue> extension) {
      pb::ExtensionSet.Clear(ref _extensions, extension);
    }
    public void ClearExtension<TValue>(pb::RepeatedExtension<UInt32Rules, TValue> extension) {
      pb::ExtensionSet.Clear(ref _extensions, extension);
    }

  }

  /// <summary>
  /// UInt64Rules describes the rules applied to `uint64` values. These
  /// rules may also be applied to the `google.protobuf.UInt64Value` Well-Known-Type.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class UInt64Rules : pb::IExtendableMessage<UInt64Rules>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UInt64Rules> _parser = new pb::MessageParser<UInt64Rules>(() => new UInt64Rules());
    private pb::UnknownFieldSet _unknownFields;
    private pb::ExtensionSet<UInt64Rules> _extensions;
    private pb::ExtensionSet<UInt64Rules> _Extensions { get { return _extensions; } }
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<UInt64Rules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Buf.Validate.ValidateReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UInt64Rules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UInt64Rules(UInt64Rules other) : this() {
      _hasBits0 = other._hasBits0;
      const_ = other.const_;
      in_ = other.in_.Clone();
      notIn_ = other.notIn_.Clone();
      example_ = other.example_.Clone();
      switch (other.LessThanCase) {
        case LessThanOneofCase.Lt:
          Lt = other.Lt;
          break;
        case LessThanOneofCase.Lte:
          Lte = other.Lte;
          break;
      }

      switch (other.GreaterThanCase) {
        case GreaterThanOneofCase.Gt:
          Gt = other.Gt;
          break;
        case GreaterThanOneofCase.Gte:
          Gte = other.Gte;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      _extensions = pb::ExtensionSet.Clone(other._extensions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UInt64Rules Clone() {
      return new UInt64Rules(this);
    }

    /// <summary>Field number for the "const" field.</summary>
    public const int ConstFieldNumber = 1;
    private readonly static ulong ConstDefaultValue = 0UL;

    private ulong const_;
    /// <summary>
    /// `const` requires the field value to exactly match the specified value. If
    /// the field value doesn't match, an error message is generated.
    ///
    /// ```proto
    /// message MyUInt64 {
    ///   // value must equal 42
    ///   uint64 value = 1 [(buf.validate.field).uint64.const = 42];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong Const {
      get { if ((_hasBits0 & 1) != 0) { return const_; } else { return ConstDefaultValue; } }
      set {
        _hasBits0 |= 1;
        const_ = value;
      }
    }
    /// <summary>Gets whether the "const" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasConst {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "const" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearConst() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "lt" field.</summary>
    public const int LtFieldNumber = 2;
    /// <summary>
    /// `lt` requires the field value to be less than the specified value (field &lt;
    /// value). If the field value is equal to or greater than the specified value,
    /// an error message is generated.
    ///
    /// ```proto
    /// message MyUInt64 {
    ///   // value must be less than 10
    ///   uint64 value = 1 [(buf.validate.field).uint64.lt = 10];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong Lt {
      get { return HasLt ? (ulong) lessThan_ : 0UL; }
      set {
        lessThan_ = value;
        lessThanCase_ = LessThanOneofCase.Lt;
      }
    }
    /// <summary>Gets whether the "lt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLt {
      get { return lessThanCase_ == LessThanOneofCase.Lt; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "lt" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLt() {
      if (HasLt) {
        ClearLessThan();
      }
    }

    /// <summary>Field number for the "lte" field.</summary>
    public const int LteFieldNumber = 3;
    /// <summary>
    /// `lte` requires the field value to be less than or equal to the specified
    /// value (field &lt;= value). If the field value is greater than the specified
    /// value, an error message is generated.
    ///
    /// ```proto
    /// message MyUInt64 {
    ///   // value must be less than or equal to 10
    ///   uint64 value = 1 [(buf.validate.field).uint64.lte = 10];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong Lte {
      get { return HasLte ? (ulong) lessThan_ : 0UL; }
      set {
        lessThan_ = value;
        lessThanCase_ = LessThanOneofCase.Lte;
      }
    }
    /// <summary>Gets whether the "lte" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLte {
      get { return lessThanCase_ == LessThanOneofCase.Lte; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "lte" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLte() {
      if (HasLte) {
        ClearLessThan();
      }
    }

    /// <summary>Field number for the "gt" field.</summary>
    public const int GtFieldNumber = 4;
    /// <summary>
    /// `gt` requires the field value to be greater than the specified value
    /// (exclusive). If the value of `gt` is larger than a specified `lt` or
    /// `lte`, the range is reversed, and the field value must be outside the
    /// specified range. If the field value doesn't meet the required conditions,
    /// an error message is generated.
    ///
    /// ```proto
    /// message MyUInt64 {
    ///   // value must be greater than 5 [uint64.gt]
    ///   uint64 value = 1 [(buf.validate.field).uint64.gt = 5];
    ///
    ///   // value must be greater than 5 and less than 10 [uint64.gt_lt]
    ///   uint64 other_value = 2 [(buf.validate.field).uint64 = { gt: 5, lt: 10 }];
    ///
    ///   // value must be greater than 10 or less than 5 [uint64.gt_lt_exclusive]
    ///   uint64 another_value = 3 [(buf.validate.field).uint64 = { gt: 10, lt: 5 }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong Gt {
      get { return HasGt ? (ulong) greaterThan_ : 0UL; }
      set {
        greaterThan_ = value;
        greaterThanCase_ = GreaterThanOneofCase.Gt;
      }
    }
    /// <summary>Gets whether the "gt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGt {
      get { return greaterThanCase_ == GreaterThanOneofCase.Gt; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "gt" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGt() {
      if (HasGt) {
        ClearGreaterThan();
      }
    }

    /// <summary>Field number for the "gte" field.</summary>
    public const int GteFieldNumber = 5;
    /// <summary>
    /// `gte` requires the field value to be greater than or equal to the specified
    /// value (exclusive). If the value of `gte` is larger than a specified `lt`
    /// or `lte`, the range is reversed, and the field value must be outside the
    /// specified range. If the field value doesn't meet the required conditions,
    /// an error message is generated.
    ///
    /// ```proto
    /// message MyUInt64 {
    ///   // value must be greater than or equal to 5 [uint64.gte]
    ///   uint64 value = 1 [(buf.validate.field).uint64.gte = 5];
    ///
    ///   // value must be greater than or equal to 5 and less than 10 [uint64.gte_lt]
    ///   uint64 other_value = 2 [(buf.validate.field).uint64 = { gte: 5, lt: 10 }];
    ///
    ///   // value must be greater than or equal to 10 or less than 5 [uint64.gte_lt_exclusive]
    ///   uint64 another_value = 3 [(buf.validate.field).uint64 = { gte: 10, lt: 5 }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong Gte {
      get { return HasGte ? (ulong) greaterThan_ : 0UL; }
      set {
        greaterThan_ = value;
        greaterThanCase_ = GreaterThanOneofCase.Gte;
      }
    }
    /// <summary>Gets whether the "gte" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGte {
      get { return greaterThanCase_ == GreaterThanOneofCase.Gte; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "gte" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGte() {
      if (HasGte) {
        ClearGreaterThan();
      }
    }

    /// <summary>Field number for the "in" field.</summary>
    public const int InFieldNumber = 6;
    private static readonly pb::FieldCodec<ulong> _repeated_in_codec
        = pb::FieldCodec.ForUInt64(48);
    private readonly pbc::RepeatedField<ulong> in_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    /// `in` requires the field value to be equal to one of the specified values.
    /// If the field value isn't one of the specified values, an error message is
    /// generated.
    ///
    /// ```proto
    /// message MyUInt64 {
    ///   // value must be in list [1, 2, 3]
    ///   uint64 value = 1 [(buf.validate.field).uint64 = { in: [1, 2, 3] }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<ulong> In {
      get { return in_; }
    }

    /// <summary>Field number for the "not_in" field.</summary>
    public const int NotInFieldNumber = 7;
    private static readonly pb::FieldCodec<ulong> _repeated_notIn_codec
        = pb::FieldCodec.ForUInt64(56);
    private readonly pbc::RepeatedField<ulong> notIn_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    /// `not_in` requires the field value to not be equal to any of the specified
    /// values. If the field value is one of the specified values, an error
    /// message is generated.
    ///
    /// ```proto
    /// message MyUInt64 {
    ///   // value must not be in list [1, 2, 3]
    ///   uint64 value = 1 [(buf.validate.field).uint64 = { not_in: [1, 2, 3] }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<ulong> NotIn {
      get { return notIn_; }
    }

    /// <summary>Field number for the "example" field.</summary>
    public const int ExampleFieldNumber = 8;
    private static readonly pb::FieldCodec<ulong> _repeated_example_codec
        = pb::FieldCodec.ForUInt64(64);
    private readonly pbc::RepeatedField<ulong> example_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    /// `example` specifies values that the field may have. These values SHOULD
    /// conform to other rules. `example` values will not impact validation
    /// but may be used as helpful guidance on how to populate the given field.
    ///
    /// ```proto
    /// message MyUInt64 {
    ///   uint64 value = 1 [
    ///     (buf.validate.field).uint64.example = 1,
    ///     (buf.validate.field).uint64.example = -10
    ///   ];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<ulong> Example {
      get { return example_; }
    }

    private object lessThan_;
    /// <summary>Enum of possible cases for the "less_than" oneof.</summary>
    public enum LessThanOneofCase {
      None = 0,
      Lt = 2,
      Lte = 3,
    }
    private LessThanOneofCase lessThanCase_ = LessThanOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LessThanOneofCase LessThanCase {
      get { return lessThanCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLessThan() {
      lessThanCase_ = LessThanOneofCase.None;
      lessThan_ = null;
    }

    private object greaterThan_;
    /// <summary>Enum of possible cases for the "greater_than" oneof.</summary>
    public enum GreaterThanOneofCase {
      None = 0,
      Gt = 4,
      Gte = 5,
    }
    private GreaterThanOneofCase greaterThanCase_ = GreaterThanOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GreaterThanOneofCase GreaterThanCase {
      get { return greaterThanCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGreaterThan() {
      greaterThanCase_ = GreaterThanOneofCase.None;
      greaterThan_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as UInt64Rules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(UInt64Rules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Const != other.Const) return false;
      if (Lt != other.Lt) return false;
      if (Lte != other.Lte) return false;
      if (Gt != other.Gt) return false;
      if (Gte != other.Gte) return false;
      if(!in_.Equals(other.in_)) return false;
      if(!notIn_.Equals(other.notIn_)) return false;
      if(!example_.Equals(other.example_)) return false;
      if (LessThanCase != other.LessThanCase) return false;
      if (GreaterThanCase != other.GreaterThanCase) return false;
      if (!Equals(_extensions, other._extensions)) {
        return false;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasConst) hash ^= Const.GetHashCode();
      if (HasLt) hash ^= Lt.GetHashCode();
      if (HasLte) hash ^= Lte.GetHashCode();
      if (HasGt) hash ^= Gt.GetHashCode();
      if (HasGte) hash ^= Gte.GetHashCode();
      hash ^= in_.GetHashCode();
      hash ^= notIn_.GetHashCode();
      hash ^= example_.GetHashCode();
      hash ^= (int) lessThanCase_;
      hash ^= (int) greaterThanCase_;
      if (_extensions != null) {
        hash ^= _extensions.GetHashCode();
      }
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasConst) {
        output.WriteRawTag(8);
        output.WriteUInt64(Const);
      }
      if (HasLt) {
        output.WriteRawTag(16);
        output.WriteUInt64(Lt);
      }
      if (HasLte) {
        output.WriteRawTag(24);
        output.WriteUInt64(Lte);
      }
      if (HasGt) {
        output.WriteRawTag(32);
        output.WriteUInt64(Gt);
      }
      if (HasGte) {
        output.WriteRawTag(40);
        output.WriteUInt64(Gte);
      }
      in_.WriteTo(output, _repeated_in_codec);
      notIn_.WriteTo(output, _repeated_notIn_codec);
      example_.WriteTo(output, _repeated_example_codec);
      if (_extensions != null) {
        _extensions.WriteTo(output);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasConst) {
        output.WriteRawTag(8);
        output.WriteUInt64(Const);
      }
      if (HasLt) {
        output.WriteRawTag(16);
        output.WriteUInt64(Lt);
      }
      if (HasLte) {
        output.WriteRawTag(24);
        output.WriteUInt64(Lte);
      }
      if (HasGt) {
        output.WriteRawTag(32);
        output.WriteUInt64(Gt);
      }
      if (HasGte) {
        output.WriteRawTag(40);
        output.WriteUInt64(Gte);
      }
      in_.WriteTo(ref output, _repeated_in_codec);
      notIn_.WriteTo(ref output, _repeated_notIn_codec);
      example_.WriteTo(ref output, _repeated_example_codec);
      if (_extensions != null) {
        _extensions.WriteTo(ref output);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasConst) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Const);
      }
      if (HasLt) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Lt);
      }
      if (HasLte) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Lte);
      }
      if (HasGt) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Gt);
      }
      if (HasGte) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Gte);
      }
      size += in_.CalculateSize(_repeated_in_codec);
      size += notIn_.CalculateSize(_repeated_notIn_codec);
      size += example_.CalculateSize(_repeated_example_codec);
      if (_extensions != null) {
        size += _extensions.CalculateSize();
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(UInt64Rules other) {
      if (other == null) {
        return;
      }
      if (other.HasConst) {
        Const = other.Const;
      }
      in_.Add(other.in_);
      notIn_.Add(other.notIn_);
      example_.Add(other.example_);
      switch (other.LessThanCase) {
        case LessThanOneofCase.Lt:
          Lt = other.Lt;
          break;
        case LessThanOneofCase.Lte:
          Lte = other.Lte;
          break;
      }

      switch (other.GreaterThanCase) {
        case GreaterThanOneofCase.Gt:
          Gt = other.Gt;
          break;
        case GreaterThanOneofCase.Gte:
          Gte = other.Gte;
          break;
      }

      pb::ExtensionSet.MergeFrom(ref _extensions, other._extensions);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            if (!pb::ExtensionSet.TryMergeFieldFrom(ref _extensions, input)) {
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            }
            break;
          case 8: {
            Const = input.ReadUInt64();
            break;
          }
          case 16: {
            Lt = input.ReadUInt64();
            break;
          }
          case 24: {
            Lte = input.ReadUInt64();
            break;
          }
          case 32: {
            Gt = input.ReadUInt64();
            break;
          }
          case 40: {
            Gte = input.ReadUInt64();
            break;
          }
          case 50:
          case 48: {
            in_.AddEntriesFrom(input, _repeated_in_codec);
            break;
          }
          case 58:
          case 56: {
            notIn_.AddEntriesFrom(input, _repeated_notIn_codec);
            break;
          }
          case 66:
          case 64: {
            example_.AddEntriesFrom(input, _repeated_example_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            if (!pb::ExtensionSet.TryMergeFieldFrom(ref _extensions, ref input)) {
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            }
            break;
          case 8: {
            Const = input.ReadUInt64();
            break;
          }
          case 16: {
            Lt = input.ReadUInt64();
            break;
          }
          case 24: {
            Lte = input.ReadUInt64();
            break;
          }
          case 32: {
            Gt = input.ReadUInt64();
            break;
          }
          case 40: {
            Gte = input.ReadUInt64();
            break;
          }
          case 50:
          case 48: {
            in_.AddEntriesFrom(ref input, _repeated_in_codec);
            break;
          }
          case 58:
          case 56: {
            notIn_.AddEntriesFrom(ref input, _repeated_notIn_codec);
            break;
          }
          case 66:
          case 64: {
            example_.AddEntriesFrom(ref input, _repeated_example_codec);
            break;
          }
        }
      }
    }
    #endif

    public TValue GetExtension<TValue>(pb::Extension<UInt64Rules, TValue> extension) {
      return pb::ExtensionSet.Get(ref _extensions, extension);
    }
    public pbc::RepeatedField<TValue> GetExtension<TValue>(pb::RepeatedExtension<UInt64Rules, TValue> extension) {
      return pb::ExtensionSet.Get(ref _extensions, extension);
    }
    public pbc::RepeatedField<TValue> GetOrInitializeExtension<TValue>(pb::RepeatedExtension<UInt64Rules, TValue> extension) {
      return pb::ExtensionSet.GetOrInitialize(ref _extensions, extension);
    }
    public void SetExtension<TValue>(pb::Extension<UInt64Rules, TValue> extension, TValue value) {
      pb::ExtensionSet.Set(ref _extensions, extension, value);
    }
    public bool HasExtension<TValue>(pb::Extension<UInt64Rules, TValue> extension) {
      return pb::ExtensionSet.Has(ref _extensions, extension);
    }
    public void ClearExtension<TValue>(pb::Extension<UInt64Rules, TValue> extension) {
      pb::ExtensionSet.Clear(ref _extensions, extension);
    }
    public void ClearExtension<TValue>(pb::RepeatedExtension<UInt64Rules, TValue> extension) {
      pb::ExtensionSet.Clear(ref _extensions, extension);
    }

  }

  /// <summary>
  /// SInt32Rules describes the rules applied to `sint32` values.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class SInt32Rules : pb::IExtendableMessage<SInt32Rules>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SInt32Rules> _parser = new pb::MessageParser<SInt32Rules>(() => new SInt32Rules());
    private pb::UnknownFieldSet _unknownFields;
    private pb::ExtensionSet<SInt32Rules> _extensions;
    private pb::ExtensionSet<SInt32Rules> _Extensions { get { return _extensions; } }
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SInt32Rules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Buf.Validate.ValidateReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SInt32Rules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SInt32Rules(SInt32Rules other) : this() {
      _hasBits0 = other._hasBits0;
      const_ = other.const_;
      in_ = other.in_.Clone();
      notIn_ = other.notIn_.Clone();
      example_ = other.example_.Clone();
      switch (other.LessThanCase) {
        case LessThanOneofCase.Lt:
          Lt = other.Lt;
          break;
        case LessThanOneofCase.Lte:
          Lte = other.Lte;
          break;
      }

      switch (other.GreaterThanCase) {
        case GreaterThanOneofCase.Gt:
          Gt = other.Gt;
          break;
        case GreaterThanOneofCase.Gte:
          Gte = other.Gte;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      _extensions = pb::ExtensionSet.Clone(other._extensions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SInt32Rules Clone() {
      return new SInt32Rules(this);
    }

    /// <summary>Field number for the "const" field.</summary>
    public const int ConstFieldNumber = 1;
    private readonly static int ConstDefaultValue = 0;

    private int const_;
    /// <summary>
    /// `const` requires the field value to exactly match the specified value. If
    /// the field value doesn't match, an error message is generated.
    ///
    /// ```proto
    /// message MySInt32 {
    ///   // value must equal 42
    ///   sint32 value = 1 [(buf.validate.field).sint32.const = 42];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Const {
      get { if ((_hasBits0 & 1) != 0) { return const_; } else { return ConstDefaultValue; } }
      set {
        _hasBits0 |= 1;
        const_ = value;
      }
    }
    /// <summary>Gets whether the "const" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasConst {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "const" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearConst() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "lt" field.</summary>
    public const int LtFieldNumber = 2;
    /// <summary>
    /// `lt` requires the field value to be less than the specified value (field
    /// &lt; value). If the field value is equal to or greater than the specified
    /// value, an error message is generated.
    ///
    /// ```proto
    /// message MySInt32 {
    ///   // value must be less than 10
    ///   sint32 value = 1 [(buf.validate.field).sint32.lt = 10];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Lt {
      get { return HasLt ? (int) lessThan_ : 0; }
      set {
        lessThan_ = value;
        lessThanCase_ = LessThanOneofCase.Lt;
      }
    }
    /// <summary>Gets whether the "lt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLt {
      get { return lessThanCase_ == LessThanOneofCase.Lt; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "lt" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLt() {
      if (HasLt) {
        ClearLessThan();
      }
    }

    /// <summary>Field number for the "lte" field.</summary>
    public const int LteFieldNumber = 3;
    /// <summary>
    /// `lte` requires the field value to be less than or equal to the specified
    /// value (field &lt;= value). If the field value is greater than the specified
    /// value, an error message is generated.
    ///
    /// ```proto
    /// message MySInt32 {
    ///   // value must be less than or equal to 10
    ///   sint32 value = 1 [(buf.validate.field).sint32.lte = 10];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Lte {
      get { return HasLte ? (int) lessThan_ : 0; }
      set {
        lessThan_ = value;
        lessThanCase_ = LessThanOneofCase.Lte;
      }
    }
    /// <summary>Gets whether the "lte" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLte {
      get { return lessThanCase_ == LessThanOneofCase.Lte; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "lte" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLte() {
      if (HasLte) {
        ClearLessThan();
      }
    }

    /// <summary>Field number for the "gt" field.</summary>
    public const int GtFieldNumber = 4;
    /// <summary>
    /// `gt` requires the field value to be greater than the specified value
    /// (exclusive). If the value of `gt` is larger than a specified `lt` or
    /// `lte`, the range is reversed, and the field value must be outside the
    /// specified range. If the field value doesn't meet the required conditions,
    /// an error message is generated.
    ///
    /// ```proto
    /// message MySInt32 {
    ///   // value must be greater than 5 [sint32.gt]
    ///   sint32 value = 1 [(buf.validate.field).sint32.gt = 5];
    ///
    ///   // value must be greater than 5 and less than 10 [sint32.gt_lt]
    ///   sint32 other_value = 2 [(buf.validate.field).sint32 = { gt: 5, lt: 10 }];
    ///
    ///   // value must be greater than 10 or less than 5 [sint32.gt_lt_exclusive]
    ///   sint32 another_value = 3 [(buf.validate.field).sint32 = { gt: 10, lt: 5 }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Gt {
      get { return HasGt ? (int) greaterThan_ : 0; }
      set {
        greaterThan_ = value;
        greaterThanCase_ = GreaterThanOneofCase.Gt;
      }
    }
    /// <summary>Gets whether the "gt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGt {
      get { return greaterThanCase_ == GreaterThanOneofCase.Gt; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "gt" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGt() {
      if (HasGt) {
        ClearGreaterThan();
      }
    }

    /// <summary>Field number for the "gte" field.</summary>
    public const int GteFieldNumber = 5;
    /// <summary>
    /// `gte` requires the field value to be greater than or equal to the specified
    /// value (exclusive). If the value of `gte` is larger than a specified `lt`
    /// or `lte`, the range is reversed, and the field value must be outside the
    /// specified range. If the field value doesn't meet the required conditions,
    /// an error message is generated.
    ///
    /// ```proto
    /// message MySInt32 {
    ///  // value must be greater than or equal to 5 [sint32.gte]
    ///  sint32 value = 1 [(buf.validate.field).sint32.gte = 5];
    ///
    ///  // value must be greater than or equal to 5 and less than 10 [sint32.gte_lt]
    ///  sint32 other_value = 2 [(buf.validate.field).sint32 = { gte: 5, lt: 10 }];
    ///
    ///  // value must be greater than or equal to 10 or less than 5 [sint32.gte_lt_exclusive]
    ///  sint32 another_value = 3 [(buf.validate.field).sint32 = { gte: 10, lt: 5 }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Gte {
      get { return HasGte ? (int) greaterThan_ : 0; }
      set {
        greaterThan_ = value;
        greaterThanCase_ = GreaterThanOneofCase.Gte;
      }
    }
    /// <summary>Gets whether the "gte" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGte {
      get { return greaterThanCase_ == GreaterThanOneofCase.Gte; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "gte" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGte() {
      if (HasGte) {
        ClearGreaterThan();
      }
    }

    /// <summary>Field number for the "in" field.</summary>
    public const int InFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_in_codec
        = pb::FieldCodec.ForSInt32(48);
    private readonly pbc::RepeatedField<int> in_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// `in` requires the field value to be equal to one of the specified values.
    /// If the field value isn't one of the specified values, an error message is
    /// generated.
    ///
    /// ```proto
    /// message MySInt32 {
    ///   // value must be in list [1, 2, 3]
    ///   sint32 value = 1 [(buf.validate.field).sint32 = { in: [1, 2, 3] }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> In {
      get { return in_; }
    }

    /// <summary>Field number for the "not_in" field.</summary>
    public const int NotInFieldNumber = 7;
    private static readonly pb::FieldCodec<int> _repeated_notIn_codec
        = pb::FieldCodec.ForSInt32(56);
    private readonly pbc::RepeatedField<int> notIn_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// `not_in` requires the field value to not be equal to any of the specified
    /// values. If the field value is one of the specified values, an error
    /// message is generated.
    ///
    /// ```proto
    /// message MySInt32 {
    ///   // value must not be in list [1, 2, 3]
    ///   sint32 value = 1 [(buf.validate.field).sint32 = { not_in: [1, 2, 3] }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> NotIn {
      get { return notIn_; }
    }

    /// <summary>Field number for the "example" field.</summary>
    public const int ExampleFieldNumber = 8;
    private static readonly pb::FieldCodec<int> _repeated_example_codec
        = pb::FieldCodec.ForSInt32(64);
    private readonly pbc::RepeatedField<int> example_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// `example` specifies values that the field may have. These values SHOULD
    /// conform to other rules. `example` values will not impact validation
    /// but may be used as helpful guidance on how to populate the given field.
    ///
    /// ```proto
    /// message MySInt32 {
    ///   sint32 value = 1 [
    ///     (buf.validate.field).sint32.example = 1,
    ///     (buf.validate.field).sint32.example = -10
    ///   ];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> Example {
      get { return example_; }
    }

    private object lessThan_;
    /// <summary>Enum of possible cases for the "less_than" oneof.</summary>
    public enum LessThanOneofCase {
      None = 0,
      Lt = 2,
      Lte = 3,
    }
    private LessThanOneofCase lessThanCase_ = LessThanOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LessThanOneofCase LessThanCase {
      get { return lessThanCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLessThan() {
      lessThanCase_ = LessThanOneofCase.None;
      lessThan_ = null;
    }

    private object greaterThan_;
    /// <summary>Enum of possible cases for the "greater_than" oneof.</summary>
    public enum GreaterThanOneofCase {
      None = 0,
      Gt = 4,
      Gte = 5,
    }
    private GreaterThanOneofCase greaterThanCase_ = GreaterThanOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GreaterThanOneofCase GreaterThanCase {
      get { return greaterThanCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGreaterThan() {
      greaterThanCase_ = GreaterThanOneofCase.None;
      greaterThan_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SInt32Rules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SInt32Rules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Const != other.Const) return false;
      if (Lt != other.Lt) return false;
      if (Lte != other.Lte) return false;
      if (Gt != other.Gt) return false;
      if (Gte != other.Gte) return false;
      if(!in_.Equals(other.in_)) return false;
      if(!notIn_.Equals(other.notIn_)) return false;
      if(!example_.Equals(other.example_)) return false;
      if (LessThanCase != other.LessThanCase) return false;
      if (GreaterThanCase != other.GreaterThanCase) return false;
      if (!Equals(_extensions, other._extensions)) {
        return false;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasConst) hash ^= Const.GetHashCode();
      if (HasLt) hash ^= Lt.GetHashCode();
      if (HasLte) hash ^= Lte.GetHashCode();
      if (HasGt) hash ^= Gt.GetHashCode();
      if (HasGte) hash ^= Gte.GetHashCode();
      hash ^= in_.GetHashCode();
      hash ^= notIn_.GetHashCode();
      hash ^= example_.GetHashCode();
      hash ^= (int) lessThanCase_;
      hash ^= (int) greaterThanCase_;
      if (_extensions != null) {
        hash ^= _extensions.GetHashCode();
      }
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasConst) {
        output.WriteRawTag(8);
        output.WriteSInt32(Const);
      }
      if (HasLt) {
        output.WriteRawTag(16);
        output.WriteSInt32(Lt);
      }
      if (HasLte) {
        output.WriteRawTag(24);
        output.WriteSInt32(Lte);
      }
      if (HasGt) {
        output.WriteRawTag(32);
        output.WriteSInt32(Gt);
      }
      if (HasGte) {
        output.WriteRawTag(40);
        output.WriteSInt32(Gte);
      }
      in_.WriteTo(output, _repeated_in_codec);
      notIn_.WriteTo(output, _repeated_notIn_codec);
      example_.WriteTo(output, _repeated_example_codec);
      if (_extensions != null) {
        _extensions.WriteTo(output);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasConst) {
        output.WriteRawTag(8);
        output.WriteSInt32(Const);
      }
      if (HasLt) {
        output.WriteRawTag(16);
        output.WriteSInt32(Lt);
      }
      if (HasLte) {
        output.WriteRawTag(24);
        output.WriteSInt32(Lte);
      }
      if (HasGt) {
        output.WriteRawTag(32);
        output.WriteSInt32(Gt);
      }
      if (HasGte) {
        output.WriteRawTag(40);
        output.WriteSInt32(Gte);
      }
      in_.WriteTo(ref output, _repeated_in_codec);
      notIn_.WriteTo(ref output, _repeated_notIn_codec);
      example_.WriteTo(ref output, _repeated_example_codec);
      if (_extensions != null) {
        _extensions.WriteTo(ref output);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasConst) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Const);
      }
      if (HasLt) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Lt);
      }
      if (HasLte) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Lte);
      }
      if (HasGt) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Gt);
      }
      if (HasGte) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Gte);
      }
      size += in_.CalculateSize(_repeated_in_codec);
      size += notIn_.CalculateSize(_repeated_notIn_codec);
      size += example_.CalculateSize(_repeated_example_codec);
      if (_extensions != null) {
        size += _extensions.CalculateSize();
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SInt32Rules other) {
      if (other == null) {
        return;
      }
      if (other.HasConst) {
        Const = other.Const;
      }
      in_.Add(other.in_);
      notIn_.Add(other.notIn_);
      example_.Add(other.example_);
      switch (other.LessThanCase) {
        case LessThanOneofCase.Lt:
          Lt = other.Lt;
          break;
        case LessThanOneofCase.Lte:
          Lte = other.Lte;
          break;
      }

      switch (other.GreaterThanCase) {
        case GreaterThanOneofCase.Gt:
          Gt = other.Gt;
          break;
        case GreaterThanOneofCase.Gte:
          Gte = other.Gte;
          break;
      }

      pb::ExtensionSet.MergeFrom(ref _extensions, other._extensions);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            if (!pb::ExtensionSet.TryMergeFieldFrom(ref _extensions, input)) {
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            }
            break;
          case 8: {
            Const = input.ReadSInt32();
            break;
          }
          case 16: {
            Lt = input.ReadSInt32();
            break;
          }
          case 24: {
            Lte = input.ReadSInt32();
            break;
          }
          case 32: {
            Gt = input.ReadSInt32();
            break;
          }
          case 40: {
            Gte = input.ReadSInt32();
            break;
          }
          case 50:
          case 48: {
            in_.AddEntriesFrom(input, _repeated_in_codec);
            break;
          }
          case 58:
          case 56: {
            notIn_.AddEntriesFrom(input, _repeated_notIn_codec);
            break;
          }
          case 66:
          case 64: {
            example_.AddEntriesFrom(input, _repeated_example_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            if (!pb::ExtensionSet.TryMergeFieldFrom(ref _extensions, ref input)) {
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            }
            break;
          case 8: {
            Const = input.ReadSInt32();
            break;
          }
          case 16: {
            Lt = input.ReadSInt32();
            break;
          }
          case 24: {
            Lte = input.ReadSInt32();
            break;
          }
          case 32: {
            Gt = input.ReadSInt32();
            break;
          }
          case 40: {
            Gte = input.ReadSInt32();
            break;
          }
          case 50:
          case 48: {
            in_.AddEntriesFrom(ref input, _repeated_in_codec);
            break;
          }
          case 58:
          case 56: {
            notIn_.AddEntriesFrom(ref input, _repeated_notIn_codec);
            break;
          }
          case 66:
          case 64: {
            example_.AddEntriesFrom(ref input, _repeated_example_codec);
            break;
          }
        }
      }
    }
    #endif

    public TValue GetExtension<TValue>(pb::Extension<SInt32Rules, TValue> extension) {
      return pb::ExtensionSet.Get(ref _extensions, extension);
    }
    public pbc::RepeatedField<TValue> GetExtension<TValue>(pb::RepeatedExtension<SInt32Rules, TValue> extension) {
      return pb::ExtensionSet.Get(ref _extensions, extension);
    }
    public pbc::RepeatedField<TValue> GetOrInitializeExtension<TValue>(pb::RepeatedExtension<SInt32Rules, TValue> extension) {
      return pb::ExtensionSet.GetOrInitialize(ref _extensions, extension);
    }
    public void SetExtension<TValue>(pb::Extension<SInt32Rules, TValue> extension, TValue value) {
      pb::ExtensionSet.Set(ref _extensions, extension, value);
    }
    public bool HasExtension<TValue>(pb::Extension<SInt32Rules, TValue> extension) {
      return pb::ExtensionSet.Has(ref _extensions, extension);
    }
    public void ClearExtension<TValue>(pb::Extension<SInt32Rules, TValue> extension) {
      pb::ExtensionSet.Clear(ref _extensions, extension);
    }
    public void ClearExtension<TValue>(pb::RepeatedExtension<SInt32Rules, TValue> extension) {
      pb::ExtensionSet.Clear(ref _extensions, extension);
    }

  }

  /// <summary>
  /// SInt64Rules describes the rules applied to `sint64` values.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class SInt64Rules : pb::IExtendableMessage<SInt64Rules>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SInt64Rules> _parser = new pb::MessageParser<SInt64Rules>(() => new SInt64Rules());
    private pb::UnknownFieldSet _unknownFields;
    private pb::ExtensionSet<SInt64Rules> _extensions;
    private pb::ExtensionSet<SInt64Rules> _Extensions { get { return _extensions; } }
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SInt64Rules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Buf.Validate.ValidateReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SInt64Rules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SInt64Rules(SInt64Rules other) : this() {
      _hasBits0 = other._hasBits0;
      const_ = other.const_;
      in_ = other.in_.Clone();
      notIn_ = other.notIn_.Clone();
      example_ = other.example_.Clone();
      switch (other.LessThanCase) {
        case LessThanOneofCase.Lt:
          Lt = other.Lt;
          break;
        case LessThanOneofCase.Lte:
          Lte = other.Lte;
          break;
      }

      switch (other.GreaterThanCase) {
        case GreaterThanOneofCase.Gt:
          Gt = other.Gt;
          break;
        case GreaterThanOneofCase.Gte:
          Gte = other.Gte;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      _extensions = pb::ExtensionSet.Clone(other._extensions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SInt64Rules Clone() {
      return new SInt64Rules(this);
    }

    /// <summary>Field number for the "const" field.</summary>
    public const int ConstFieldNumber = 1;
    private readonly static long ConstDefaultValue = 0L;

    private long const_;
    /// <summary>
    /// `const` requires the field value to exactly match the specified value. If
    /// the field value doesn't match, an error message is generated.
    ///
    /// ```proto
    /// message MySInt64 {
    ///   // value must equal 42
    ///   sint64 value = 1 [(buf.validate.field).sint64.const = 42];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Const {
      get { if ((_hasBits0 & 1) != 0) { return const_; } else { return ConstDefaultValue; } }
      set {
        _hasBits0 |= 1;
        const_ = value;
      }
    }
    /// <summary>Gets whether the "const" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasConst {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "const" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearConst() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "lt" field.</summary>
    public const int LtFieldNumber = 2;
    /// <summary>
    /// `lt` requires the field value to be less than the specified value (field
    /// &lt; value). If the field value is equal to or greater than the specified
    /// value, an error message is generated.
    ///
    /// ```proto
    /// message MySInt64 {
    ///   // value must be less than 10
    ///   sint64 value = 1 [(buf.validate.field).sint64.lt = 10];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Lt {
      get { return HasLt ? (long) lessThan_ : 0L; }
      set {
        lessThan_ = value;
        lessThanCase_ = LessThanOneofCase.Lt;
      }
    }
    /// <summary>Gets whether the "lt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLt {
      get { return lessThanCase_ == LessThanOneofCase.Lt; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "lt" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLt() {
      if (HasLt) {
        ClearLessThan();
      }
    }

    /// <summary>Field number for the "lte" field.</summary>
    public const int LteFieldNumber = 3;
    /// <summary>
    /// `lte` requires the field value to be less than or equal to the specified
    /// value (field &lt;= value). If the field value is greater than the specified
    /// value, an error message is generated.
    ///
    /// ```proto
    /// message MySInt64 {
    ///   // value must be less than or equal to 10
    ///   sint64 value = 1 [(buf.validate.field).sint64.lte = 10];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Lte {
      get { return HasLte ? (long) lessThan_ : 0L; }
      set {
        lessThan_ = value;
        lessThanCase_ = LessThanOneofCase.Lte;
      }
    }
    /// <summary>Gets whether the "lte" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLte {
      get { return lessThanCase_ == LessThanOneofCase.Lte; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "lte" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLte() {
      if (HasLte) {
        ClearLessThan();
      }
    }

    /// <summary>Field number for the "gt" field.</summary>
    public const int GtFieldNumber = 4;
    /// <summary>
    /// `gt` requires the field value to be greater than the specified value
    /// (exclusive). If the value of `gt` is larger than a specified `lt` or
    /// `lte`, the range is reversed, and the field value must be outside the
    /// specified range. If the field value doesn't meet the required conditions,
    /// an error message is generated.
    ///
    /// ```proto
    /// message MySInt64 {
    ///   // value must be greater than 5 [sint64.gt]
    ///   sint64 value = 1 [(buf.validate.field).sint64.gt = 5];
    ///
    ///   // value must be greater than 5 and less than 10 [sint64.gt_lt]
    ///   sint64 other_value = 2 [(buf.validate.field).sint64 = { gt: 5, lt: 10 }];
    ///
    ///   // value must be greater than 10 or less than 5 [sint64.gt_lt_exclusive]
    ///   sint64 another_value = 3 [(buf.validate.field).sint64 = { gt: 10, lt: 5 }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Gt {
      get { return HasGt ? (long) greaterThan_ : 0L; }
      set {
        greaterThan_ = value;
        greaterThanCase_ = GreaterThanOneofCase.Gt;
      }
    }
    /// <summary>Gets whether the "gt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGt {
      get { return greaterThanCase_ == GreaterThanOneofCase.Gt; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "gt" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGt() {
      if (HasGt) {
        ClearGreaterThan();
      }
    }

    /// <summary>Field number for the "gte" field.</summary>
    public const int GteFieldNumber = 5;
    /// <summary>
    /// `gte` requires the field value to be greater than or equal to the specified
    /// value (exclusive). If the value of `gte` is larger than a specified `lt`
    /// or `lte`, the range is reversed, and the field value must be outside the
    /// specified range. If the field value doesn't meet the required conditions,
    /// an error message is generated.
    ///
    /// ```proto
    /// message MySInt64 {
    ///   // value must be greater than or equal to 5 [sint64.gte]
    ///   sint64 value = 1 [(buf.validate.field).sint64.gte = 5];
    ///
    ///   // value must be greater than or equal to 5 and less than 10 [sint64.gte_lt]
    ///   sint64 other_value = 2 [(buf.validate.field).sint64 = { gte: 5, lt: 10 }];
    ///
    ///   // value must be greater than or equal to 10 or less than 5 [sint64.gte_lt_exclusive]
    ///   sint64 another_value = 3 [(buf.validate.field).sint64 = { gte: 10, lt: 5 }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Gte {
      get { return HasGte ? (long) greaterThan_ : 0L; }
      set {
        greaterThan_ = value;
        greaterThanCase_ = GreaterThanOneofCase.Gte;
      }
    }
    /// <summary>Gets whether the "gte" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGte {
      get { return greaterThanCase_ == GreaterThanOneofCase.Gte; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "gte" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGte() {
      if (HasGte) {
        ClearGreaterThan();
      }
    }

    /// <summary>Field number for the "in" field.</summary>
    public const int InFieldNumber = 6;
    private static readonly pb::FieldCodec<long> _repeated_in_codec
        = pb::FieldCodec.ForSInt64(48);
    private readonly pbc::RepeatedField<long> in_ = new pbc::RepeatedField<long>();
    /// <summary>
    /// `in` requires the field value to be equal to one of the specified values.
    /// If the field value isn't one of the specified values, an error message
    /// is generated.
    ///
    /// ```proto
    /// message MySInt64 {
    ///   // value must be in list [1, 2, 3]
    ///   sint64 value = 1 [(buf.validate.field).sint64 = { in: [1, 2, 3] }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<long> In {
      get { return in_; }
    }

    /// <summary>Field number for the "not_in" field.</summary>
    public const int NotInFieldNumber = 7;
    private static readonly pb::FieldCodec<long> _repeated_notIn_codec
        = pb::FieldCodec.ForSInt64(56);
    private readonly pbc::RepeatedField<long> notIn_ = new pbc::RepeatedField<long>();
    /// <summary>
    /// `not_in` requires the field value to not be equal to any of the specified
    /// values. If the field value is one of the specified values, an error
    /// message is generated.
    ///
    /// ```proto
    /// message MySInt64 {
    ///   // value must not be in list [1, 2, 3]
    ///   sint64 value = 1 [(buf.validate.field).sint64 = { not_in: [1, 2, 3] }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<long> NotIn {
      get { return notIn_; }
    }

    /// <summary>Field number for the "example" field.</summary>
    public const int ExampleFieldNumber = 8;
    private static readonly pb::FieldCodec<long> _repeated_example_codec
        = pb::FieldCodec.ForSInt64(64);
    private readonly pbc::RepeatedField<long> example_ = new pbc::RepeatedField<long>();
    /// <summary>
    /// `example` specifies values that the field may have. These values SHOULD
    /// conform to other rules. `example` values will not impact validation
    /// but may be used as helpful guidance on how to populate the given field.
    ///
    /// ```proto
    /// message MySInt64 {
    ///   sint64 value = 1 [
    ///     (buf.validate.field).sint64.example = 1,
    ///     (buf.validate.field).sint64.example = -10
    ///   ];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<long> Example {
      get { return example_; }
    }

    private object lessThan_;
    /// <summary>Enum of possible cases for the "less_than" oneof.</summary>
    public enum LessThanOneofCase {
      None = 0,
      Lt = 2,
      Lte = 3,
    }
    private LessThanOneofCase lessThanCase_ = LessThanOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LessThanOneofCase LessThanCase {
      get { return lessThanCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLessThan() {
      lessThanCase_ = LessThanOneofCase.None;
      lessThan_ = null;
    }

    private object greaterThan_;
    /// <summary>Enum of possible cases for the "greater_than" oneof.</summary>
    public enum GreaterThanOneofCase {
      None = 0,
      Gt = 4,
      Gte = 5,
    }
    private GreaterThanOneofCase greaterThanCase_ = GreaterThanOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GreaterThanOneofCase GreaterThanCase {
      get { return greaterThanCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGreaterThan() {
      greaterThanCase_ = GreaterThanOneofCase.None;
      greaterThan_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SInt64Rules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SInt64Rules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Const != other.Const) return false;
      if (Lt != other.Lt) return false;
      if (Lte != other.Lte) return false;
      if (Gt != other.Gt) return false;
      if (Gte != other.Gte) return false;
      if(!in_.Equals(other.in_)) return false;
      if(!notIn_.Equals(other.notIn_)) return false;
      if(!example_.Equals(other.example_)) return false;
      if (LessThanCase != other.LessThanCase) return false;
      if (GreaterThanCase != other.GreaterThanCase) return false;
      if (!Equals(_extensions, other._extensions)) {
        return false;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasConst) hash ^= Const.GetHashCode();
      if (HasLt) hash ^= Lt.GetHashCode();
      if (HasLte) hash ^= Lte.GetHashCode();
      if (HasGt) hash ^= Gt.GetHashCode();
      if (HasGte) hash ^= Gte.GetHashCode();
      hash ^= in_.GetHashCode();
      hash ^= notIn_.GetHashCode();
      hash ^= example_.GetHashCode();
      hash ^= (int) lessThanCase_;
      hash ^= (int) greaterThanCase_;
      if (_extensions != null) {
        hash ^= _extensions.GetHashCode();
      }
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasConst) {
        output.WriteRawTag(8);
        output.WriteSInt64(Const);
      }
      if (HasLt) {
        output.WriteRawTag(16);
        output.WriteSInt64(Lt);
      }
      if (HasLte) {
        output.WriteRawTag(24);
        output.WriteSInt64(Lte);
      }
      if (HasGt) {
        output.WriteRawTag(32);
        output.WriteSInt64(Gt);
      }
      if (HasGte) {
        output.WriteRawTag(40);
        output.WriteSInt64(Gte);
      }
      in_.WriteTo(output, _repeated_in_codec);
      notIn_.WriteTo(output, _repeated_notIn_codec);
      example_.WriteTo(output, _repeated_example_codec);
      if (_extensions != null) {
        _extensions.WriteTo(output);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasConst) {
        output.WriteRawTag(8);
        output.WriteSInt64(Const);
      }
      if (HasLt) {
        output.WriteRawTag(16);
        output.WriteSInt64(Lt);
      }
      if (HasLte) {
        output.WriteRawTag(24);
        output.WriteSInt64(Lte);
      }
      if (HasGt) {
        output.WriteRawTag(32);
        output.WriteSInt64(Gt);
      }
      if (HasGte) {
        output.WriteRawTag(40);
        output.WriteSInt64(Gte);
      }
      in_.WriteTo(ref output, _repeated_in_codec);
      notIn_.WriteTo(ref output, _repeated_notIn_codec);
      example_.WriteTo(ref output, _repeated_example_codec);
      if (_extensions != null) {
        _extensions.WriteTo(ref output);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasConst) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Const);
      }
      if (HasLt) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Lt);
      }
      if (HasLte) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Lte);
      }
      if (HasGt) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Gt);
      }
      if (HasGte) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Gte);
      }
      size += in_.CalculateSize(_repeated_in_codec);
      size += notIn_.CalculateSize(_repeated_notIn_codec);
      size += example_.CalculateSize(_repeated_example_codec);
      if (_extensions != null) {
        size += _extensions.CalculateSize();
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SInt64Rules other) {
      if (other == null) {
        return;
      }
      if (other.HasConst) {
        Const = other.Const;
      }
      in_.Add(other.in_);
      notIn_.Add(other.notIn_);
      example_.Add(other.example_);
      switch (other.LessThanCase) {
        case LessThanOneofCase.Lt:
          Lt = other.Lt;
          break;
        case LessThanOneofCase.Lte:
          Lte = other.Lte;
          break;
      }

      switch (other.GreaterThanCase) {
        case GreaterThanOneofCase.Gt:
          Gt = other.Gt;
          break;
        case GreaterThanOneofCase.Gte:
          Gte = other.Gte;
          break;
      }

      pb::ExtensionSet.MergeFrom(ref _extensions, other._extensions);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            if (!pb::ExtensionSet.TryMergeFieldFrom(ref _extensions, input)) {
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            }
            break;
          case 8: {
            Const = input.ReadSInt64();
            break;
          }
          case 16: {
            Lt = input.ReadSInt64();
            break;
          }
          case 24: {
            Lte = input.ReadSInt64();
            break;
          }
          case 32: {
            Gt = input.ReadSInt64();
            break;
          }
          case 40: {
            Gte = input.ReadSInt64();
            break;
          }
          case 50:
          case 48: {
            in_.AddEntriesFrom(input, _repeated_in_codec);
            break;
          }
          case 58:
          case 56: {
            notIn_.AddEntriesFrom(input, _repeated_notIn_codec);
            break;
          }
          case 66:
          case 64: {
            example_.AddEntriesFrom(input, _repeated_example_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            if (!pb::ExtensionSet.TryMergeFieldFrom(ref _extensions, ref input)) {
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            }
            break;
          case 8: {
            Const = input.ReadSInt64();
            break;
          }
          case 16: {
            Lt = input.ReadSInt64();
            break;
          }
          case 24: {
            Lte = input.ReadSInt64();
            break;
          }
          case 32: {
            Gt = input.ReadSInt64();
            break;
          }
          case 40: {
            Gte = input.ReadSInt64();
            break;
          }
          case 50:
          case 48: {
            in_.AddEntriesFrom(ref input, _repeated_in_codec);
            break;
          }
          case 58:
          case 56: {
            notIn_.AddEntriesFrom(ref input, _repeated_notIn_codec);
            break;
          }
          case 66:
          case 64: {
            example_.AddEntriesFrom(ref input, _repeated_example_codec);
            break;
          }
        }
      }
    }
    #endif

    public TValue GetExtension<TValue>(pb::Extension<SInt64Rules, TValue> extension) {
      return pb::ExtensionSet.Get(ref _extensions, extension);
    }
    public pbc::RepeatedField<TValue> GetExtension<TValue>(pb::RepeatedExtension<SInt64Rules, TValue> extension) {
      return pb::ExtensionSet.Get(ref _extensions, extension);
    }
    public pbc::RepeatedField<TValue> GetOrInitializeExtension<TValue>(pb::RepeatedExtension<SInt64Rules, TValue> extension) {
      return pb::ExtensionSet.GetOrInitialize(ref _extensions, extension);
    }
    public void SetExtension<TValue>(pb::Extension<SInt64Rules, TValue> extension, TValue value) {
      pb::ExtensionSet.Set(ref _extensions, extension, value);
    }
    public bool HasExtension<TValue>(pb::Extension<SInt64Rules, TValue> extension) {
      return pb::ExtensionSet.Has(ref _extensions, extension);
    }
    public void ClearExtension<TValue>(pb::Extension<SInt64Rules, TValue> extension) {
      pb::ExtensionSet.Clear(ref _extensions, extension);
    }
    public void ClearExtension<TValue>(pb::RepeatedExtension<SInt64Rules, TValue> extension) {
      pb::ExtensionSet.Clear(ref _extensions, extension);
    }

  }

  /// <summary>
  /// Fixed32Rules describes the rules applied to `fixed32` values.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Fixed32Rules : pb::IExtendableMessage<Fixed32Rules>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Fixed32Rules> _parser = new pb::MessageParser<Fixed32Rules>(() => new Fixed32Rules());
    private pb::UnknownFieldSet _unknownFields;
    private pb::ExtensionSet<Fixed32Rules> _extensions;
    private pb::ExtensionSet<Fixed32Rules> _Extensions { get { return _extensions; } }
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Fixed32Rules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Buf.Validate.ValidateReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Fixed32Rules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Fixed32Rules(Fixed32Rules other) : this() {
      _hasBits0 = other._hasBits0;
      const_ = other.const_;
      in_ = other.in_.Clone();
      notIn_ = other.notIn_.Clone();
      example_ = other.example_.Clone();
      switch (other.LessThanCase) {
        case LessThanOneofCase.Lt:
          Lt = other.Lt;
          break;
        case LessThanOneofCase.Lte:
          Lte = other.Lte;
          break;
      }

      switch (other.GreaterThanCase) {
        case GreaterThanOneofCase.Gt:
          Gt = other.Gt;
          break;
        case GreaterThanOneofCase.Gte:
          Gte = other.Gte;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      _extensions = pb::ExtensionSet.Clone(other._extensions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Fixed32Rules Clone() {
      return new Fixed32Rules(this);
    }

    /// <summary>Field number for the "const" field.</summary>
    public const int ConstFieldNumber = 1;
    private readonly static uint ConstDefaultValue = 0;

    private uint const_;
    /// <summary>
    /// `const` requires the field value to exactly match the specified value.
    /// If the field value doesn't match, an error message is generated.
    ///
    /// ```proto
    /// message MyFixed32 {
    ///   // value must equal 42
    ///   fixed32 value = 1 [(buf.validate.field).fixed32.const = 42];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Const {
      get { if ((_hasBits0 & 1) != 0) { return const_; } else { return ConstDefaultValue; } }
      set {
        _hasBits0 |= 1;
        const_ = value;
      }
    }
    /// <summary>Gets whether the "const" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasConst {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "const" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearConst() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "lt" field.</summary>
    public const int LtFieldNumber = 2;
    /// <summary>
    /// `lt` requires the field value to be less than the specified value (field &lt;
    /// value). If the field value is equal to or greater than the specified value,
    /// an error message is generated.
    ///
    /// ```proto
    /// message MyFixed32 {
    ///   // value must be less than 10
    ///   fixed32 value = 1 [(buf.validate.field).fixed32.lt = 10];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Lt {
      get { return HasLt ? (uint) lessThan_ : 0; }
      set {
        lessThan_ = value;
        lessThanCase_ = LessThanOneofCase.Lt;
      }
    }
    /// <summary>Gets whether the "lt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLt {
      get { return lessThanCase_ == LessThanOneofCase.Lt; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "lt" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLt() {
      if (HasLt) {
        ClearLessThan();
      }
    }

    /// <summary>Field number for the "lte" field.</summary>
    public const int LteFieldNumber = 3;
    /// <summary>
    /// `lte` requires the field value to be less than or equal to the specified
    /// value (field &lt;= value). If the field value is greater than the specified
    /// value, an error message is generated.
    ///
    /// ```proto
    /// message MyFixed32 {
    ///   // value must be less than or equal to 10
    ///   fixed32 value = 1 [(buf.validate.field).fixed32.lte = 10];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Lte {
      get { return HasLte ? (uint) lessThan_ : 0; }
      set {
        lessThan_ = value;
        lessThanCase_ = LessThanOneofCase.Lte;
      }
    }
    /// <summary>Gets whether the "lte" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLte {
      get { return lessThanCase_ == LessThanOneofCase.Lte; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "lte" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLte() {
      if (HasLte) {
        ClearLessThan();
      }
    }

    /// <summary>Field number for the "gt" field.</summary>
    public const int GtFieldNumber = 4;
    /// <summary>
    /// `gt` requires the field value to be greater than the specified value
    /// (exclusive). If the value of `gt` is larger than a specified `lt` or
    /// `lte`, the range is reversed, and the field value must be outside the
    /// specified range. If the field value doesn't meet the required conditions,
    /// an error message is generated.
    ///
    /// ```proto
    /// message MyFixed32 {
    ///   // value must be greater than 5 [fixed32.gt]
    ///   fixed32 value = 1 [(buf.validate.field).fixed32.gt = 5];
    ///
    ///   // value must be greater than 5 and less than 10 [fixed32.gt_lt]
    ///   fixed32 other_value = 2 [(buf.validate.field).fixed32 = { gt: 5, lt: 10 }];
    ///
    ///   // value must be greater than 10 or less than 5 [fixed32.gt_lt_exclusive]
    ///   fixed32 another_value = 3 [(buf.validate.field).fixed32 = { gt: 10, lt: 5 }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Gt {
      get { return HasGt ? (uint) greaterThan_ : 0; }
      set {
        greaterThan_ = value;
        greaterThanCase_ = GreaterThanOneofCase.Gt;
      }
    }
    /// <summary>Gets whether the "gt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGt {
      get { return greaterThanCase_ == GreaterThanOneofCase.Gt; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "gt" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGt() {
      if (HasGt) {
        ClearGreaterThan();
      }
    }

    /// <summary>Field number for the "gte" field.</summary>
    public const int GteFieldNumber = 5;
    /// <summary>
    /// `gte` requires the field value to be greater than or equal to the specified
    /// value (exclusive). If the value of `gte` is larger than a specified `lt`
    /// or `lte`, the range is reversed, and the field value must be outside the
    /// specified range. If the field value doesn't meet the required conditions,
    /// an error message is generated.
    ///
    /// ```proto
    /// message MyFixed32 {
    ///   // value must be greater than or equal to 5 [fixed32.gte]
    ///   fixed32 value = 1 [(buf.validate.field).fixed32.gte = 5];
    ///
    ///   // value must be greater than or equal to 5 and less than 10 [fixed32.gte_lt]
    ///   fixed32 other_value = 2 [(buf.validate.field).fixed32 = { gte: 5, lt: 10 }];
    ///
    ///   // value must be greater than or equal to 10 or less than 5 [fixed32.gte_lt_exclusive]
    ///   fixed32 another_value = 3 [(buf.validate.field).fixed32 = { gte: 10, lt: 5 }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Gte {
      get { return HasGte ? (uint) greaterThan_ : 0; }
      set {
        greaterThan_ = value;
        greaterThanCase_ = GreaterThanOneofCase.Gte;
      }
    }
    /// <summary>Gets whether the "gte" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGte {
      get { return greaterThanCase_ == GreaterThanOneofCase.Gte; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "gte" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGte() {
      if (HasGte) {
        ClearGreaterThan();
      }
    }

    /// <summary>Field number for the "in" field.</summary>
    public const int InFieldNumber = 6;
    private static readonly pb::FieldCodec<uint> _repeated_in_codec
        = pb::FieldCodec.ForFixed32(53);
    private readonly pbc::RepeatedField<uint> in_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// `in` requires the field value to be equal to one of the specified values.
    /// If the field value isn't one of the specified values, an error message
    /// is generated.
    ///
    /// ```proto
    /// message MyFixed32 {
    ///   // value must be in list [1, 2, 3]
    ///   fixed32 value = 1 [(buf.validate.field).fixed32 = { in: [1, 2, 3] }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<uint> In {
      get { return in_; }
    }

    /// <summary>Field number for the "not_in" field.</summary>
    public const int NotInFieldNumber = 7;
    private static readonly pb::FieldCodec<uint> _repeated_notIn_codec
        = pb::FieldCodec.ForFixed32(61);
    private readonly pbc::RepeatedField<uint> notIn_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// `not_in` requires the field value to not be equal to any of the specified
    /// values. If the field value is one of the specified values, an error
    /// message is generated.
    ///
    /// ```proto
    /// message MyFixed32 {
    ///   // value must not be in list [1, 2, 3]
    ///   fixed32 value = 1 [(buf.validate.field).fixed32 = { not_in: [1, 2, 3] }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<uint> NotIn {
      get { return notIn_; }
    }

    /// <summary>Field number for the "example" field.</summary>
    public const int ExampleFieldNumber = 8;
    private static readonly pb::FieldCodec<uint> _repeated_example_codec
        = pb::FieldCodec.ForFixed32(69);
    private readonly pbc::RepeatedField<uint> example_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// `example` specifies values that the field may have. These values SHOULD
    /// conform to other rules. `example` values will not impact validation
    /// but may be used as helpful guidance on how to populate the given field.
    ///
    /// ```proto
    /// message MyFixed32 {
    ///   fixed32 value = 1 [
    ///     (buf.validate.field).fixed32.example = 1,
    ///     (buf.validate.field).fixed32.example = 2
    ///   ];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<uint> Example {
      get { return example_; }
    }

    private object lessThan_;
    /// <summary>Enum of possible cases for the "less_than" oneof.</summary>
    public enum LessThanOneofCase {
      None = 0,
      Lt = 2,
      Lte = 3,
    }
    private LessThanOneofCase lessThanCase_ = LessThanOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LessThanOneofCase LessThanCase {
      get { return lessThanCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLessThan() {
      lessThanCase_ = LessThanOneofCase.None;
      lessThan_ = null;
    }

    private object greaterThan_;
    /// <summary>Enum of possible cases for the "greater_than" oneof.</summary>
    public enum GreaterThanOneofCase {
      None = 0,
      Gt = 4,
      Gte = 5,
    }
    private GreaterThanOneofCase greaterThanCase_ = GreaterThanOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GreaterThanOneofCase GreaterThanCase {
      get { return greaterThanCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGreaterThan() {
      greaterThanCase_ = GreaterThanOneofCase.None;
      greaterThan_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Fixed32Rules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Fixed32Rules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Const != other.Const) return false;
      if (Lt != other.Lt) return false;
      if (Lte != other.Lte) return false;
      if (Gt != other.Gt) return false;
      if (Gte != other.Gte) return false;
      if(!in_.Equals(other.in_)) return false;
      if(!notIn_.Equals(other.notIn_)) return false;
      if(!example_.Equals(other.example_)) return false;
      if (LessThanCase != other.LessThanCase) return false;
      if (GreaterThanCase != other.GreaterThanCase) return false;
      if (!Equals(_extensions, other._extensions)) {
        return false;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasConst) hash ^= Const.GetHashCode();
      if (HasLt) hash ^= Lt.GetHashCode();
      if (HasLte) hash ^= Lte.GetHashCode();
      if (HasGt) hash ^= Gt.GetHashCode();
      if (HasGte) hash ^= Gte.GetHashCode();
      hash ^= in_.GetHashCode();
      hash ^= notIn_.GetHashCode();
      hash ^= example_.GetHashCode();
      hash ^= (int) lessThanCase_;
      hash ^= (int) greaterThanCase_;
      if (_extensions != null) {
        hash ^= _extensions.GetHashCode();
      }
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasConst) {
        output.WriteRawTag(13);
        output.WriteFixed32(Const);
      }
      if (HasLt) {
        output.WriteRawTag(21);
        output.WriteFixed32(Lt);
      }
      if (HasLte) {
        output.WriteRawTag(29);
        output.WriteFixed32(Lte);
      }
      if (HasGt) {
        output.WriteRawTag(37);
        output.WriteFixed32(Gt);
      }
      if (HasGte) {
        output.WriteRawTag(45);
        output.WriteFixed32(Gte);
      }
      in_.WriteTo(output, _repeated_in_codec);
      notIn_.WriteTo(output, _repeated_notIn_codec);
      example_.WriteTo(output, _repeated_example_codec);
      if (_extensions != null) {
        _extensions.WriteTo(output);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasConst) {
        output.WriteRawTag(13);
        output.WriteFixed32(Const);
      }
      if (HasLt) {
        output.WriteRawTag(21);
        output.WriteFixed32(Lt);
      }
      if (HasLte) {
        output.WriteRawTag(29);
        output.WriteFixed32(Lte);
      }
      if (HasGt) {
        output.WriteRawTag(37);
        output.WriteFixed32(Gt);
      }
      if (HasGte) {
        output.WriteRawTag(45);
        output.WriteFixed32(Gte);
      }
      in_.WriteTo(ref output, _repeated_in_codec);
      notIn_.WriteTo(ref output, _repeated_notIn_codec);
      example_.WriteTo(ref output, _repeated_example_codec);
      if (_extensions != null) {
        _extensions.WriteTo(ref output);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasConst) {
        size += 1 + 4;
      }
      if (HasLt) {
        size += 1 + 4;
      }
      if (HasLte) {
        size += 1 + 4;
      }
      if (HasGt) {
        size += 1 + 4;
      }
      if (HasGte) {
        size += 1 + 4;
      }
      size += in_.CalculateSize(_repeated_in_codec);
      size += notIn_.CalculateSize(_repeated_notIn_codec);
      size += example_.CalculateSize(_repeated_example_codec);
      if (_extensions != null) {
        size += _extensions.CalculateSize();
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Fixed32Rules other) {
      if (other == null) {
        return;
      }
      if (other.HasConst) {
        Const = other.Const;
      }
      in_.Add(other.in_);
      notIn_.Add(other.notIn_);
      example_.Add(other.example_);
      switch (other.LessThanCase) {
        case LessThanOneofCase.Lt:
          Lt = other.Lt;
          break;
        case LessThanOneofCase.Lte:
          Lte = other.Lte;
          break;
      }

      switch (other.GreaterThanCase) {
        case GreaterThanOneofCase.Gt:
          Gt = other.Gt;
          break;
        case GreaterThanOneofCase.Gte:
          Gte = other.Gte;
          break;
      }

      pb::ExtensionSet.MergeFrom(ref _extensions, other._extensions);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            if (!pb::ExtensionSet.TryMergeFieldFrom(ref _extensions, input)) {
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            }
            break;
          case 13: {
            Const = input.ReadFixed32();
            break;
          }
          case 21: {
            Lt = input.ReadFixed32();
            break;
          }
          case 29: {
            Lte = input.ReadFixed32();
            break;
          }
          case 37: {
            Gt = input.ReadFixed32();
            break;
          }
          case 45: {
            Gte = input.ReadFixed32();
            break;
          }
          case 50:
          case 53: {
            in_.AddEntriesFrom(input, _repeated_in_codec);
            break;
          }
          case 58:
          case 61: {
            notIn_.AddEntriesFrom(input, _repeated_notIn_codec);
            break;
          }
          case 66:
          case 69: {
            example_.AddEntriesFrom(input, _repeated_example_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            if (!pb::ExtensionSet.TryMergeFieldFrom(ref _extensions, ref input)) {
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            }
            break;
          case 13: {
            Const = input.ReadFixed32();
            break;
          }
          case 21: {
            Lt = input.ReadFixed32();
            break;
          }
          case 29: {
            Lte = input.ReadFixed32();
            break;
          }
          case 37: {
            Gt = input.ReadFixed32();
            break;
          }
          case 45: {
            Gte = input.ReadFixed32();
            break;
          }
          case 50:
          case 53: {
            in_.AddEntriesFrom(ref input, _repeated_in_codec);
            break;
          }
          case 58:
          case 61: {
            notIn_.AddEntriesFrom(ref input, _repeated_notIn_codec);
            break;
          }
          case 66:
          case 69: {
            example_.AddEntriesFrom(ref input, _repeated_example_codec);
            break;
          }
        }
      }
    }
    #endif

    public TValue GetExtension<TValue>(pb::Extension<Fixed32Rules, TValue> extension) {
      return pb::ExtensionSet.Get(ref _extensions, extension);
    }
    public pbc::RepeatedField<TValue> GetExtension<TValue>(pb::RepeatedExtension<Fixed32Rules, TValue> extension) {
      return pb::ExtensionSet.Get(ref _extensions, extension);
    }
    public pbc::RepeatedField<TValue> GetOrInitializeExtension<TValue>(pb::RepeatedExtension<Fixed32Rules, TValue> extension) {
      return pb::ExtensionSet.GetOrInitialize(ref _extensions, extension);
    }
    public void SetExtension<TValue>(pb::Extension<Fixed32Rules, TValue> extension, TValue value) {
      pb::ExtensionSet.Set(ref _extensions, extension, value);
    }
    public bool HasExtension<TValue>(pb::Extension<Fixed32Rules, TValue> extension) {
      return pb::ExtensionSet.Has(ref _extensions, extension);
    }
    public void ClearExtension<TValue>(pb::Extension<Fixed32Rules, TValue> extension) {
      pb::ExtensionSet.Clear(ref _extensions, extension);
    }
    public void ClearExtension<TValue>(pb::RepeatedExtension<Fixed32Rules, TValue> extension) {
      pb::ExtensionSet.Clear(ref _extensions, extension);
    }

  }

  /// <summary>
  /// Fixed64Rules describes the rules applied to `fixed64` values.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Fixed64Rules : pb::IExtendableMessage<Fixed64Rules>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Fixed64Rules> _parser = new pb::MessageParser<Fixed64Rules>(() => new Fixed64Rules());
    private pb::UnknownFieldSet _unknownFields;
    private pb::ExtensionSet<Fixed64Rules> _extensions;
    private pb::ExtensionSet<Fixed64Rules> _Extensions { get { return _extensions; } }
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Fixed64Rules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Buf.Validate.ValidateReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Fixed64Rules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Fixed64Rules(Fixed64Rules other) : this() {
      _hasBits0 = other._hasBits0;
      const_ = other.const_;
      in_ = other.in_.Clone();
      notIn_ = other.notIn_.Clone();
      example_ = other.example_.Clone();
      switch (other.LessThanCase) {
        case LessThanOneofCase.Lt:
          Lt = other.Lt;
          break;
        case LessThanOneofCase.Lte:
          Lte = other.Lte;
          break;
      }

      switch (other.GreaterThanCase) {
        case GreaterThanOneofCase.Gt:
          Gt = other.Gt;
          break;
        case GreaterThanOneofCase.Gte:
          Gte = other.Gte;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      _extensions = pb::ExtensionSet.Clone(other._extensions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Fixed64Rules Clone() {
      return new Fixed64Rules(this);
    }

    /// <summary>Field number for the "const" field.</summary>
    public const int ConstFieldNumber = 1;
    private readonly static ulong ConstDefaultValue = 0UL;

    private ulong const_;
    /// <summary>
    /// `const` requires the field value to exactly match the specified value. If
    /// the field value doesn't match, an error message is generated.
    ///
    /// ```proto
    /// message MyFixed64 {
    ///   // value must equal 42
    ///   fixed64 value = 1 [(buf.validate.field).fixed64.const = 42];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong Const {
      get { if ((_hasBits0 & 1) != 0) { return const_; } else { return ConstDefaultValue; } }
      set {
        _hasBits0 |= 1;
        const_ = value;
      }
    }
    /// <summary>Gets whether the "const" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasConst {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "const" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearConst() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "lt" field.</summary>
    public const int LtFieldNumber = 2;
    /// <summary>
    /// `lt` requires the field value to be less than the specified value (field &lt;
    /// value). If the field value is equal to or greater than the specified value,
    /// an error message is generated.
    ///
    /// ```proto
    /// message MyFixed64 {
    ///   // value must be less than 10
    ///   fixed64 value = 1 [(buf.validate.field).fixed64.lt = 10];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong Lt {
      get { return HasLt ? (ulong) lessThan_ : 0UL; }
      set {
        lessThan_ = value;
        lessThanCase_ = LessThanOneofCase.Lt;
      }
    }
    /// <summary>Gets whether the "lt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLt {
      get { return lessThanCase_ == LessThanOneofCase.Lt; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "lt" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLt() {
      if (HasLt) {
        ClearLessThan();
      }
    }

    /// <summary>Field number for the "lte" field.</summary>
    public const int LteFieldNumber = 3;
    /// <summary>
    /// `lte` requires the field value to be less than or equal to the specified
    /// value (field &lt;= value). If the field value is greater than the specified
    /// value, an error message is generated.
    ///
    /// ```proto
    /// message MyFixed64 {
    ///   // value must be less than or equal to 10
    ///   fixed64 value = 1 [(buf.validate.field).fixed64.lte = 10];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong Lte {
      get { return HasLte ? (ulong) lessThan_ : 0UL; }
      set {
        lessThan_ = value;
        lessThanCase_ = LessThanOneofCase.Lte;
      }
    }
    /// <summary>Gets whether the "lte" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLte {
      get { return lessThanCase_ == LessThanOneofCase.Lte; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "lte" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLte() {
      if (HasLte) {
        ClearLessThan();
      }
    }

    /// <summary>Field number for the "gt" field.</summary>
    public const int GtFieldNumber = 4;
    /// <summary>
    /// `gt` requires the field value to be greater than the specified value
    /// (exclusive). If the value of `gt` is larger than a specified `lt` or
    /// `lte`, the range is reversed, and the field value must be outside the
    /// specified range. If the field value doesn't meet the required conditions,
    /// an error message is generated.
    ///
    /// ```proto
    /// message MyFixed64 {
    ///   // value must be greater than 5 [fixed64.gt]
    ///   fixed64 value = 1 [(buf.validate.field).fixed64.gt = 5];
    ///
    ///   // value must be greater than 5 and less than 10 [fixed64.gt_lt]
    ///   fixed64 other_value = 2 [(buf.validate.field).fixed64 = { gt: 5, lt: 10 }];
    ///
    ///   // value must be greater than 10 or less than 5 [fixed64.gt_lt_exclusive]
    ///   fixed64 another_value = 3 [(buf.validate.field).fixed64 = { gt: 10, lt: 5 }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong Gt {
      get { return HasGt ? (ulong) greaterThan_ : 0UL; }
      set {
        greaterThan_ = value;
        greaterThanCase_ = GreaterThanOneofCase.Gt;
      }
    }
    /// <summary>Gets whether the "gt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGt {
      get { return greaterThanCase_ == GreaterThanOneofCase.Gt; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "gt" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGt() {
      if (HasGt) {
        ClearGreaterThan();
      }
    }

    /// <summary>Field number for the "gte" field.</summary>
    public const int GteFieldNumber = 5;
    /// <summary>
    /// `gte` requires the field value to be greater than or equal to the specified
    /// value (exclusive). If the value of `gte` is larger than a specified `lt`
    /// or `lte`, the range is reversed, and the field value must be outside the
    /// specified range. If the field value doesn't meet the required conditions,
    /// an error message is generated.
    ///
    /// ```proto
    /// message MyFixed64 {
    ///   // value must be greater than or equal to 5 [fixed64.gte]
    ///   fixed64 value = 1 [(buf.validate.field).fixed64.gte = 5];
    ///
    ///   // value must be greater than or equal to 5 and less than 10 [fixed64.gte_lt]
    ///   fixed64 other_value = 2 [(buf.validate.field).fixed64 = { gte: 5, lt: 10 }];
    ///
    ///   // value must be greater than or equal to 10 or less than 5 [fixed64.gte_lt_exclusive]
    ///   fixed64 another_value = 3 [(buf.validate.field).fixed64 = { gte: 10, lt: 5 }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong Gte {
      get { return HasGte ? (ulong) greaterThan_ : 0UL; }
      set {
        greaterThan_ = value;
        greaterThanCase_ = GreaterThanOneofCase.Gte;
      }
    }
    /// <summary>Gets whether the "gte" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGte {
      get { return greaterThanCase_ == GreaterThanOneofCase.Gte; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "gte" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGte() {
      if (HasGte) {
        ClearGreaterThan();
      }
    }

    /// <summary>Field number for the "in" field.</summary>
    public const int InFieldNumber = 6;
    private static readonly pb::FieldCodec<ulong> _repeated_in_codec
        = pb::FieldCodec.ForFixed64(49);
    private readonly pbc::RepeatedField<ulong> in_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    /// `in` requires the field value to be equal to one of the specified values.
    /// If the field value isn't one of the specified values, an error message is
    /// generated.
    ///
    /// ```proto
    /// message MyFixed64 {
    ///   // value must be in list [1, 2, 3]
    ///   fixed64 value = 1 [(buf.validate.field).fixed64 = { in: [1, 2, 3] }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<ulong> In {
      get { return in_; }
    }

    /// <summary>Field number for the "not_in" field.</summary>
    public const int NotInFieldNumber = 7;
    private static readonly pb::FieldCodec<ulong> _repeated_notIn_codec
        = pb::FieldCodec.ForFixed64(57);
    private readonly pbc::RepeatedField<ulong> notIn_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    /// `not_in` requires the field value to not be equal to any of the specified
    /// values. If the field value is one of the specified values, an error
    /// message is generated.
    ///
    /// ```proto
    /// message MyFixed64 {
    ///   // value must not be in list [1, 2, 3]
    ///   fixed64 value = 1 [(buf.validate.field).fixed64 = { not_in: [1, 2, 3] }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<ulong> NotIn {
      get { return notIn_; }
    }

    /// <summary>Field number for the "example" field.</summary>
    public const int ExampleFieldNumber = 8;
    private static readonly pb::FieldCodec<ulong> _repeated_example_codec
        = pb::FieldCodec.ForFixed64(65);
    private readonly pbc::RepeatedField<ulong> example_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    /// `example` specifies values that the field may have. These values SHOULD
    /// conform to other rules. `example` values will not impact validation
    /// but may be used as helpful guidance on how to populate the given field.
    ///
    /// ```proto
    /// message MyFixed64 {
    ///   fixed64 value = 1 [
    ///     (buf.validate.field).fixed64.example = 1,
    ///     (buf.validate.field).fixed64.example = 2
    ///   ];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<ulong> Example {
      get { return example_; }
    }

    private object lessThan_;
    /// <summary>Enum of possible cases for the "less_than" oneof.</summary>
    public enum LessThanOneofCase {
      None = 0,
      Lt = 2,
      Lte = 3,
    }
    private LessThanOneofCase lessThanCase_ = LessThanOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LessThanOneofCase LessThanCase {
      get { return lessThanCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLessThan() {
      lessThanCase_ = LessThanOneofCase.None;
      lessThan_ = null;
    }

    private object greaterThan_;
    /// <summary>Enum of possible cases for the "greater_than" oneof.</summary>
    public enum GreaterThanOneofCase {
      None = 0,
      Gt = 4,
      Gte = 5,
    }
    private GreaterThanOneofCase greaterThanCase_ = GreaterThanOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GreaterThanOneofCase GreaterThanCase {
      get { return greaterThanCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGreaterThan() {
      greaterThanCase_ = GreaterThanOneofCase.None;
      greaterThan_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Fixed64Rules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Fixed64Rules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Const != other.Const) return false;
      if (Lt != other.Lt) return false;
      if (Lte != other.Lte) return false;
      if (Gt != other.Gt) return false;
      if (Gte != other.Gte) return false;
      if(!in_.Equals(other.in_)) return false;
      if(!notIn_.Equals(other.notIn_)) return false;
      if(!example_.Equals(other.example_)) return false;
      if (LessThanCase != other.LessThanCase) return false;
      if (GreaterThanCase != other.GreaterThanCase) return false;
      if (!Equals(_extensions, other._extensions)) {
        return false;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasConst) hash ^= Const.GetHashCode();
      if (HasLt) hash ^= Lt.GetHashCode();
      if (HasLte) hash ^= Lte.GetHashCode();
      if (HasGt) hash ^= Gt.GetHashCode();
      if (HasGte) hash ^= Gte.GetHashCode();
      hash ^= in_.GetHashCode();
      hash ^= notIn_.GetHashCode();
      hash ^= example_.GetHashCode();
      hash ^= (int) lessThanCase_;
      hash ^= (int) greaterThanCase_;
      if (_extensions != null) {
        hash ^= _extensions.GetHashCode();
      }
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasConst) {
        output.WriteRawTag(9);
        output.WriteFixed64(Const);
      }
      if (HasLt) {
        output.WriteRawTag(17);
        output.WriteFixed64(Lt);
      }
      if (HasLte) {
        output.WriteRawTag(25);
        output.WriteFixed64(Lte);
      }
      if (HasGt) {
        output.WriteRawTag(33);
        output.WriteFixed64(Gt);
      }
      if (HasGte) {
        output.WriteRawTag(41);
        output.WriteFixed64(Gte);
      }
      in_.WriteTo(output, _repeated_in_codec);
      notIn_.WriteTo(output, _repeated_notIn_codec);
      example_.WriteTo(output, _repeated_example_codec);
      if (_extensions != null) {
        _extensions.WriteTo(output);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasConst) {
        output.WriteRawTag(9);
        output.WriteFixed64(Const);
      }
      if (HasLt) {
        output.WriteRawTag(17);
        output.WriteFixed64(Lt);
      }
      if (HasLte) {
        output.WriteRawTag(25);
        output.WriteFixed64(Lte);
      }
      if (HasGt) {
        output.WriteRawTag(33);
        output.WriteFixed64(Gt);
      }
      if (HasGte) {
        output.WriteRawTag(41);
        output.WriteFixed64(Gte);
      }
      in_.WriteTo(ref output, _repeated_in_codec);
      notIn_.WriteTo(ref output, _repeated_notIn_codec);
      example_.WriteTo(ref output, _repeated_example_codec);
      if (_extensions != null) {
        _extensions.WriteTo(ref output);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasConst) {
        size += 1 + 8;
      }
      if (HasLt) {
        size += 1 + 8;
      }
      if (HasLte) {
        size += 1 + 8;
      }
      if (HasGt) {
        size += 1 + 8;
      }
      if (HasGte) {
        size += 1 + 8;
      }
      size += in_.CalculateSize(_repeated_in_codec);
      size += notIn_.CalculateSize(_repeated_notIn_codec);
      size += example_.CalculateSize(_repeated_example_codec);
      if (_extensions != null) {
        size += _extensions.CalculateSize();
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Fixed64Rules other) {
      if (other == null) {
        return;
      }
      if (other.HasConst) {
        Const = other.Const;
      }
      in_.Add(other.in_);
      notIn_.Add(other.notIn_);
      example_.Add(other.example_);
      switch (other.LessThanCase) {
        case LessThanOneofCase.Lt:
          Lt = other.Lt;
          break;
        case LessThanOneofCase.Lte:
          Lte = other.Lte;
          break;
      }

      switch (other.GreaterThanCase) {
        case GreaterThanOneofCase.Gt:
          Gt = other.Gt;
          break;
        case GreaterThanOneofCase.Gte:
          Gte = other.Gte;
          break;
      }

      pb::ExtensionSet.MergeFrom(ref _extensions, other._extensions);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            if (!pb::ExtensionSet.TryMergeFieldFrom(ref _extensions, input)) {
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            }
            break;
          case 9: {
            Const = input.ReadFixed64();
            break;
          }
          case 17: {
            Lt = input.ReadFixed64();
            break;
          }
          case 25: {
            Lte = input.ReadFixed64();
            break;
          }
          case 33: {
            Gt = input.ReadFixed64();
            break;
          }
          case 41: {
            Gte = input.ReadFixed64();
            break;
          }
          case 50:
          case 49: {
            in_.AddEntriesFrom(input, _repeated_in_codec);
            break;
          }
          case 58:
          case 57: {
            notIn_.AddEntriesFrom(input, _repeated_notIn_codec);
            break;
          }
          case 66:
          case 65: {
            example_.AddEntriesFrom(input, _repeated_example_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            if (!pb::ExtensionSet.TryMergeFieldFrom(ref _extensions, ref input)) {
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            }
            break;
          case 9: {
            Const = input.ReadFixed64();
            break;
          }
          case 17: {
            Lt = input.ReadFixed64();
            break;
          }
          case 25: {
            Lte = input.ReadFixed64();
            break;
          }
          case 33: {
            Gt = input.ReadFixed64();
            break;
          }
          case 41: {
            Gte = input.ReadFixed64();
            break;
          }
          case 50:
          case 49: {
            in_.AddEntriesFrom(ref input, _repeated_in_codec);
            break;
          }
          case 58:
          case 57: {
            notIn_.AddEntriesFrom(ref input, _repeated_notIn_codec);
            break;
          }
          case 66:
          case 65: {
            example_.AddEntriesFrom(ref input, _repeated_example_codec);
            break;
          }
        }
      }
    }
    #endif

    public TValue GetExtension<TValue>(pb::Extension<Fixed64Rules, TValue> extension) {
      return pb::ExtensionSet.Get(ref _extensions, extension);
    }
    public pbc::RepeatedField<TValue> GetExtension<TValue>(pb::RepeatedExtension<Fixed64Rules, TValue> extension) {
      return pb::ExtensionSet.Get(ref _extensions, extension);
    }
    public pbc::RepeatedField<TValue> GetOrInitializeExtension<TValue>(pb::RepeatedExtension<Fixed64Rules, TValue> extension) {
      return pb::ExtensionSet.GetOrInitialize(ref _extensions, extension);
    }
    public void SetExtension<TValue>(pb::Extension<Fixed64Rules, TValue> extension, TValue value) {
      pb::ExtensionSet.Set(ref _extensions, extension, value);
    }
    public bool HasExtension<TValue>(pb::Extension<Fixed64Rules, TValue> extension) {
      return pb::ExtensionSet.Has(ref _extensions, extension);
    }
    public void ClearExtension<TValue>(pb::Extension<Fixed64Rules, TValue> extension) {
      pb::ExtensionSet.Clear(ref _extensions, extension);
    }
    public void ClearExtension<TValue>(pb::RepeatedExtension<Fixed64Rules, TValue> extension) {
      pb::ExtensionSet.Clear(ref _extensions, extension);
    }

  }

  /// <summary>
  /// SFixed32Rules describes the rules applied to `fixed32` values.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class SFixed32Rules : pb::IExtendableMessage<SFixed32Rules>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SFixed32Rules> _parser = new pb::MessageParser<SFixed32Rules>(() => new SFixed32Rules());
    private pb::UnknownFieldSet _unknownFields;
    private pb::ExtensionSet<SFixed32Rules> _extensions;
    private pb::ExtensionSet<SFixed32Rules> _Extensions { get { return _extensions; } }
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SFixed32Rules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Buf.Validate.ValidateReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SFixed32Rules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SFixed32Rules(SFixed32Rules other) : this() {
      _hasBits0 = other._hasBits0;
      const_ = other.const_;
      in_ = other.in_.Clone();
      notIn_ = other.notIn_.Clone();
      example_ = other.example_.Clone();
      switch (other.LessThanCase) {
        case LessThanOneofCase.Lt:
          Lt = other.Lt;
          break;
        case LessThanOneofCase.Lte:
          Lte = other.Lte;
          break;
      }

      switch (other.GreaterThanCase) {
        case GreaterThanOneofCase.Gt:
          Gt = other.Gt;
          break;
        case GreaterThanOneofCase.Gte:
          Gte = other.Gte;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      _extensions = pb::ExtensionSet.Clone(other._extensions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SFixed32Rules Clone() {
      return new SFixed32Rules(this);
    }

    /// <summary>Field number for the "const" field.</summary>
    public const int ConstFieldNumber = 1;
    private readonly static int ConstDefaultValue = 0;

    private int const_;
    /// <summary>
    /// `const` requires the field value to exactly match the specified value. If
    /// the field value doesn't match, an error message is generated.
    ///
    /// ```proto
    /// message MySFixed32 {
    ///   // value must equal 42
    ///   sfixed32 value = 1 [(buf.validate.field).sfixed32.const = 42];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Const {
      get { if ((_hasBits0 & 1) != 0) { return const_; } else { return ConstDefaultValue; } }
      set {
        _hasBits0 |= 1;
        const_ = value;
      }
    }
    /// <summary>Gets whether the "const" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasConst {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "const" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearConst() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "lt" field.</summary>
    public const int LtFieldNumber = 2;
    /// <summary>
    /// `lt` requires the field value to be less than the specified value (field &lt;
    /// value). If the field value is equal to or greater than the specified value,
    /// an error message is generated.
    ///
    /// ```proto
    /// message MySFixed32 {
    ///   // value must be less than 10
    ///   sfixed32 value = 1 [(buf.validate.field).sfixed32.lt = 10];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Lt {
      get { return HasLt ? (int) lessThan_ : 0; }
      set {
        lessThan_ = value;
        lessThanCase_ = LessThanOneofCase.Lt;
      }
    }
    /// <summary>Gets whether the "lt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLt {
      get { return lessThanCase_ == LessThanOneofCase.Lt; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "lt" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLt() {
      if (HasLt) {
        ClearLessThan();
      }
    }

    /// <summary>Field number for the "lte" field.</summary>
    public const int LteFieldNumber = 3;
    /// <summary>
    /// `lte` requires the field value to be less than or equal to the specified
    /// value (field &lt;= value). If the field value is greater than the specified
    /// value, an error message is generated.
    ///
    /// ```proto
    /// message MySFixed32 {
    ///   // value must be less than or equal to 10
    ///   sfixed32 value = 1 [(buf.validate.field).sfixed32.lte = 10];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Lte {
      get { return HasLte ? (int) lessThan_ : 0; }
      set {
        lessThan_ = value;
        lessThanCase_ = LessThanOneofCase.Lte;
      }
    }
    /// <summary>Gets whether the "lte" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLte {
      get { return lessThanCase_ == LessThanOneofCase.Lte; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "lte" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLte() {
      if (HasLte) {
        ClearLessThan();
      }
    }

    /// <summary>Field number for the "gt" field.</summary>
    public const int GtFieldNumber = 4;
    /// <summary>
    /// `gt` requires the field value to be greater than the specified value
    /// (exclusive). If the value of `gt` is larger than a specified `lt` or
    /// `lte`, the range is reversed, and the field value must be outside the
    /// specified range. If the field value doesn't meet the required conditions,
    /// an error message is generated.
    ///
    /// ```proto
    /// message MySFixed32 {
    ///   // value must be greater than 5 [sfixed32.gt]
    ///   sfixed32 value = 1 [(buf.validate.field).sfixed32.gt = 5];
    ///
    ///   // value must be greater than 5 and less than 10 [sfixed32.gt_lt]
    ///   sfixed32 other_value = 2 [(buf.validate.field).sfixed32 = { gt: 5, lt: 10 }];
    ///
    ///   // value must be greater than 10 or less than 5 [sfixed32.gt_lt_exclusive]
    ///   sfixed32 another_value = 3 [(buf.validate.field).sfixed32 = { gt: 10, lt: 5 }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Gt {
      get { return HasGt ? (int) greaterThan_ : 0; }
      set {
        greaterThan_ = value;
        greaterThanCase_ = GreaterThanOneofCase.Gt;
      }
    }
    /// <summary>Gets whether the "gt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGt {
      get { return greaterThanCase_ == GreaterThanOneofCase.Gt; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "gt" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGt() {
      if (HasGt) {
        ClearGreaterThan();
      }
    }

    /// <summary>Field number for the "gte" field.</summary>
    public const int GteFieldNumber = 5;
    /// <summary>
    /// `gte` requires the field value to be greater than or equal to the specified
    /// value (exclusive). If the value of `gte` is larger than a specified `lt`
    /// or `lte`, the range is reversed, and the field value must be outside the
    /// specified range. If the field value doesn't meet the required conditions,
    /// an error message is generated.
    ///
    /// ```proto
    /// message MySFixed32 {
    ///   // value must be greater than or equal to 5 [sfixed32.gte]
    ///   sfixed32 value = 1 [(buf.validate.field).sfixed32.gte = 5];
    ///
    ///   // value must be greater than or equal to 5 and less than 10 [sfixed32.gte_lt]
    ///   sfixed32 other_value = 2 [(buf.validate.field).sfixed32 = { gte: 5, lt: 10 }];
    ///
    ///   // value must be greater than or equal to 10 or less than 5 [sfixed32.gte_lt_exclusive]
    ///   sfixed32 another_value = 3 [(buf.validate.field).sfixed32 = { gte: 10, lt: 5 }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Gte {
      get { return HasGte ? (int) greaterThan_ : 0; }
      set {
        greaterThan_ = value;
        greaterThanCase_ = GreaterThanOneofCase.Gte;
      }
    }
    /// <summary>Gets whether the "gte" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGte {
      get { return greaterThanCase_ == GreaterThanOneofCase.Gte; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "gte" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGte() {
      if (HasGte) {
        ClearGreaterThan();
      }
    }

    /// <summary>Field number for the "in" field.</summary>
    public const int InFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_in_codec
        = pb::FieldCodec.ForSFixed32(53);
    private readonly pbc::RepeatedField<int> in_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// `in` requires the field value to be equal to one of the specified values.
    /// If the field value isn't one of the specified values, an error message is
    /// generated.
    ///
    /// ```proto
    /// message MySFixed32 {
    ///   // value must be in list [1, 2, 3]
    ///   sfixed32 value = 1 [(buf.validate.field).sfixed32 = { in: [1, 2, 3] }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> In {
      get { return in_; }
    }

    /// <summary>Field number for the "not_in" field.</summary>
    public const int NotInFieldNumber = 7;
    private static readonly pb::FieldCodec<int> _repeated_notIn_codec
        = pb::FieldCodec.ForSFixed32(61);
    private readonly pbc::RepeatedField<int> notIn_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// `not_in` requires the field value to not be equal to any of the specified
    /// values. If the field value is one of the specified values, an error
    /// message is generated.
    ///
    /// ```proto
    /// message MySFixed32 {
    ///   // value must not be in list [1, 2, 3]
    ///   sfixed32 value = 1 [(buf.validate.field).sfixed32 = { not_in: [1, 2, 3] }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> NotIn {
      get { return notIn_; }
    }

    /// <summary>Field number for the "example" field.</summary>
    public const int ExampleFieldNumber = 8;
    private static readonly pb::FieldCodec<int> _repeated_example_codec
        = pb::FieldCodec.ForSFixed32(69);
    private readonly pbc::RepeatedField<int> example_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// `example` specifies values that the field may have. These values SHOULD
    /// conform to other rules. `example` values will not impact validation
    /// but may be used as helpful guidance on how to populate the given field.
    ///
    /// ```proto
    /// message MySFixed32 {
    ///   sfixed32 value = 1 [
    ///     (buf.validate.field).sfixed32.example = 1,
    ///     (buf.validate.field).sfixed32.example = 2
    ///   ];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> Example {
      get { return example_; }
    }

    private object lessThan_;
    /// <summary>Enum of possible cases for the "less_than" oneof.</summary>
    public enum LessThanOneofCase {
      None = 0,
      Lt = 2,
      Lte = 3,
    }
    private LessThanOneofCase lessThanCase_ = LessThanOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LessThanOneofCase LessThanCase {
      get { return lessThanCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLessThan() {
      lessThanCase_ = LessThanOneofCase.None;
      lessThan_ = null;
    }

    private object greaterThan_;
    /// <summary>Enum of possible cases for the "greater_than" oneof.</summary>
    public enum GreaterThanOneofCase {
      None = 0,
      Gt = 4,
      Gte = 5,
    }
    private GreaterThanOneofCase greaterThanCase_ = GreaterThanOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GreaterThanOneofCase GreaterThanCase {
      get { return greaterThanCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGreaterThan() {
      greaterThanCase_ = GreaterThanOneofCase.None;
      greaterThan_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SFixed32Rules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SFixed32Rules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Const != other.Const) return false;
      if (Lt != other.Lt) return false;
      if (Lte != other.Lte) return false;
      if (Gt != other.Gt) return false;
      if (Gte != other.Gte) return false;
      if(!in_.Equals(other.in_)) return false;
      if(!notIn_.Equals(other.notIn_)) return false;
      if(!example_.Equals(other.example_)) return false;
      if (LessThanCase != other.LessThanCase) return false;
      if (GreaterThanCase != other.GreaterThanCase) return false;
      if (!Equals(_extensions, other._extensions)) {
        return false;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasConst) hash ^= Const.GetHashCode();
      if (HasLt) hash ^= Lt.GetHashCode();
      if (HasLte) hash ^= Lte.GetHashCode();
      if (HasGt) hash ^= Gt.GetHashCode();
      if (HasGte) hash ^= Gte.GetHashCode();
      hash ^= in_.GetHashCode();
      hash ^= notIn_.GetHashCode();
      hash ^= example_.GetHashCode();
      hash ^= (int) lessThanCase_;
      hash ^= (int) greaterThanCase_;
      if (_extensions != null) {
        hash ^= _extensions.GetHashCode();
      }
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasConst) {
        output.WriteRawTag(13);
        output.WriteSFixed32(Const);
      }
      if (HasLt) {
        output.WriteRawTag(21);
        output.WriteSFixed32(Lt);
      }
      if (HasLte) {
        output.WriteRawTag(29);
        output.WriteSFixed32(Lte);
      }
      if (HasGt) {
        output.WriteRawTag(37);
        output.WriteSFixed32(Gt);
      }
      if (HasGte) {
        output.WriteRawTag(45);
        output.WriteSFixed32(Gte);
      }
      in_.WriteTo(output, _repeated_in_codec);
      notIn_.WriteTo(output, _repeated_notIn_codec);
      example_.WriteTo(output, _repeated_example_codec);
      if (_extensions != null) {
        _extensions.WriteTo(output);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasConst) {
        output.WriteRawTag(13);
        output.WriteSFixed32(Const);
      }
      if (HasLt) {
        output.WriteRawTag(21);
        output.WriteSFixed32(Lt);
      }
      if (HasLte) {
        output.WriteRawTag(29);
        output.WriteSFixed32(Lte);
      }
      if (HasGt) {
        output.WriteRawTag(37);
        output.WriteSFixed32(Gt);
      }
      if (HasGte) {
        output.WriteRawTag(45);
        output.WriteSFixed32(Gte);
      }
      in_.WriteTo(ref output, _repeated_in_codec);
      notIn_.WriteTo(ref output, _repeated_notIn_codec);
      example_.WriteTo(ref output, _repeated_example_codec);
      if (_extensions != null) {
        _extensions.WriteTo(ref output);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasConst) {
        size += 1 + 4;
      }
      if (HasLt) {
        size += 1 + 4;
      }
      if (HasLte) {
        size += 1 + 4;
      }
      if (HasGt) {
        size += 1 + 4;
      }
      if (HasGte) {
        size += 1 + 4;
      }
      size += in_.CalculateSize(_repeated_in_codec);
      size += notIn_.CalculateSize(_repeated_notIn_codec);
      size += example_.CalculateSize(_repeated_example_codec);
      if (_extensions != null) {
        size += _extensions.CalculateSize();
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SFixed32Rules other) {
      if (other == null) {
        return;
      }
      if (other.HasConst) {
        Const = other.Const;
      }
      in_.Add(other.in_);
      notIn_.Add(other.notIn_);
      example_.Add(other.example_);
      switch (other.LessThanCase) {
        case LessThanOneofCase.Lt:
          Lt = other.Lt;
          break;
        case LessThanOneofCase.Lte:
          Lte = other.Lte;
          break;
      }

      switch (other.GreaterThanCase) {
        case GreaterThanOneofCase.Gt:
          Gt = other.Gt;
          break;
        case GreaterThanOneofCase.Gte:
          Gte = other.Gte;
          break;
      }

      pb::ExtensionSet.MergeFrom(ref _extensions, other._extensions);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            if (!pb::ExtensionSet.TryMergeFieldFrom(ref _extensions, input)) {
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            }
            break;
          case 13: {
            Const = input.ReadSFixed32();
            break;
          }
          case 21: {
            Lt = input.ReadSFixed32();
            break;
          }
          case 29: {
            Lte = input.ReadSFixed32();
            break;
          }
          case 37: {
            Gt = input.ReadSFixed32();
            break;
          }
          case 45: {
            Gte = input.ReadSFixed32();
            break;
          }
          case 50:
          case 53: {
            in_.AddEntriesFrom(input, _repeated_in_codec);
            break;
          }
          case 58:
          case 61: {
            notIn_.AddEntriesFrom(input, _repeated_notIn_codec);
            break;
          }
          case 66:
          case 69: {
            example_.AddEntriesFrom(input, _repeated_example_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            if (!pb::ExtensionSet.TryMergeFieldFrom(ref _extensions, ref input)) {
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            }
            break;
          case 13: {
            Const = input.ReadSFixed32();
            break;
          }
          case 21: {
            Lt = input.ReadSFixed32();
            break;
          }
          case 29: {
            Lte = input.ReadSFixed32();
            break;
          }
          case 37: {
            Gt = input.ReadSFixed32();
            break;
          }
          case 45: {
            Gte = input.ReadSFixed32();
            break;
          }
          case 50:
          case 53: {
            in_.AddEntriesFrom(ref input, _repeated_in_codec);
            break;
          }
          case 58:
          case 61: {
            notIn_.AddEntriesFrom(ref input, _repeated_notIn_codec);
            break;
          }
          case 66:
          case 69: {
            example_.AddEntriesFrom(ref input, _repeated_example_codec);
            break;
          }
        }
      }
    }
    #endif

    public TValue GetExtension<TValue>(pb::Extension<SFixed32Rules, TValue> extension) {
      return pb::ExtensionSet.Get(ref _extensions, extension);
    }
    public pbc::RepeatedField<TValue> GetExtension<TValue>(pb::RepeatedExtension<SFixed32Rules, TValue> extension) {
      return pb::ExtensionSet.Get(ref _extensions, extension);
    }
    public pbc::RepeatedField<TValue> GetOrInitializeExtension<TValue>(pb::RepeatedExtension<SFixed32Rules, TValue> extension) {
      return pb::ExtensionSet.GetOrInitialize(ref _extensions, extension);
    }
    public void SetExtension<TValue>(pb::Extension<SFixed32Rules, TValue> extension, TValue value) {
      pb::ExtensionSet.Set(ref _extensions, extension, value);
    }
    public bool HasExtension<TValue>(pb::Extension<SFixed32Rules, TValue> extension) {
      return pb::ExtensionSet.Has(ref _extensions, extension);
    }
    public void ClearExtension<TValue>(pb::Extension<SFixed32Rules, TValue> extension) {
      pb::ExtensionSet.Clear(ref _extensions, extension);
    }
    public void ClearExtension<TValue>(pb::RepeatedExtension<SFixed32Rules, TValue> extension) {
      pb::ExtensionSet.Clear(ref _extensions, extension);
    }

  }

  /// <summary>
  /// SFixed64Rules describes the rules applied to `fixed64` values.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class SFixed64Rules : pb::IExtendableMessage<SFixed64Rules>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SFixed64Rules> _parser = new pb::MessageParser<SFixed64Rules>(() => new SFixed64Rules());
    private pb::UnknownFieldSet _unknownFields;
    private pb::ExtensionSet<SFixed64Rules> _extensions;
    private pb::ExtensionSet<SFixed64Rules> _Extensions { get { return _extensions; } }
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SFixed64Rules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Buf.Validate.ValidateReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SFixed64Rules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SFixed64Rules(SFixed64Rules other) : this() {
      _hasBits0 = other._hasBits0;
      const_ = other.const_;
      in_ = other.in_.Clone();
      notIn_ = other.notIn_.Clone();
      example_ = other.example_.Clone();
      switch (other.LessThanCase) {
        case LessThanOneofCase.Lt:
          Lt = other.Lt;
          break;
        case LessThanOneofCase.Lte:
          Lte = other.Lte;
          break;
      }

      switch (other.GreaterThanCase) {
        case GreaterThanOneofCase.Gt:
          Gt = other.Gt;
          break;
        case GreaterThanOneofCase.Gte:
          Gte = other.Gte;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      _extensions = pb::ExtensionSet.Clone(other._extensions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SFixed64Rules Clone() {
      return new SFixed64Rules(this);
    }

    /// <summary>Field number for the "const" field.</summary>
    public const int ConstFieldNumber = 1;
    private readonly static long ConstDefaultValue = 0L;

    private long const_;
    /// <summary>
    /// `const` requires the field value to exactly match the specified value. If
    /// the field value doesn't match, an error message is generated.
    ///
    /// ```proto
    /// message MySFixed64 {
    ///   // value must equal 42
    ///   sfixed64 value = 1 [(buf.validate.field).sfixed64.const = 42];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Const {
      get { if ((_hasBits0 & 1) != 0) { return const_; } else { return ConstDefaultValue; } }
      set {
        _hasBits0 |= 1;
        const_ = value;
      }
    }
    /// <summary>Gets whether the "const" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasConst {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "const" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearConst() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "lt" field.</summary>
    public const int LtFieldNumber = 2;
    /// <summary>
    /// `lt` requires the field value to be less than the specified value (field &lt;
    /// value). If the field value is equal to or greater than the specified value,
    /// an error message is generated.
    ///
    /// ```proto
    /// message MySFixed64 {
    ///   // value must be less than 10
    ///   sfixed64 value = 1 [(buf.validate.field).sfixed64.lt = 10];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Lt {
      get { return HasLt ? (long) lessThan_ : 0L; }
      set {
        lessThan_ = value;
        lessThanCase_ = LessThanOneofCase.Lt;
      }
    }
    /// <summary>Gets whether the "lt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLt {
      get { return lessThanCase_ == LessThanOneofCase.Lt; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "lt" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLt() {
      if (HasLt) {
        ClearLessThan();
      }
    }

    /// <summary>Field number for the "lte" field.</summary>
    public const int LteFieldNumber = 3;
    /// <summary>
    /// `lte` requires the field value to be less than or equal to the specified
    /// value (field &lt;= value). If the field value is greater than the specified
    /// value, an error message is generated.
    ///
    /// ```proto
    /// message MySFixed64 {
    ///   // value must be less than or equal to 10
    ///   sfixed64 value = 1 [(buf.validate.field).sfixed64.lte = 10];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Lte {
      get { return HasLte ? (long) lessThan_ : 0L; }
      set {
        lessThan_ = value;
        lessThanCase_ = LessThanOneofCase.Lte;
      }
    }
    /// <summary>Gets whether the "lte" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLte {
      get { return lessThanCase_ == LessThanOneofCase.Lte; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "lte" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLte() {
      if (HasLte) {
        ClearLessThan();
      }
    }

    /// <summary>Field number for the "gt" field.</summary>
    public const int GtFieldNumber = 4;
    /// <summary>
    /// `gt` requires the field value to be greater than the specified value
    /// (exclusive). If the value of `gt` is larger than a specified `lt` or
    /// `lte`, the range is reversed, and the field value must be outside the
    /// specified range. If the field value doesn't meet the required conditions,
    /// an error message is generated.
    ///
    /// ```proto
    /// message MySFixed64 {
    ///   // value must be greater than 5 [sfixed64.gt]
    ///   sfixed64 value = 1 [(buf.validate.field).sfixed64.gt = 5];
    ///
    ///   // value must be greater than 5 and less than 10 [sfixed64.gt_lt]
    ///   sfixed64 other_value = 2 [(buf.validate.field).sfixed64 = { gt: 5, lt: 10 }];
    ///
    ///   // value must be greater than 10 or less than 5 [sfixed64.gt_lt_exclusive]
    ///   sfixed64 another_value = 3 [(buf.validate.field).sfixed64 = { gt: 10, lt: 5 }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Gt {
      get { return HasGt ? (long) greaterThan_ : 0L; }
      set {
        greaterThan_ = value;
        greaterThanCase_ = GreaterThanOneofCase.Gt;
      }
    }
    /// <summary>Gets whether the "gt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGt {
      get { return greaterThanCase_ == GreaterThanOneofCase.Gt; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "gt" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGt() {
      if (HasGt) {
        ClearGreaterThan();
      }
    }

    /// <summary>Field number for the "gte" field.</summary>
    public const int GteFieldNumber = 5;
    /// <summary>
    /// `gte` requires the field value to be greater than or equal to the specified
    /// value (exclusive). If the value of `gte` is larger than a specified `lt`
    /// or `lte`, the range is reversed, and the field value must be outside the
    /// specified range. If the field value doesn't meet the required conditions,
    /// an error message is generated.
    ///
    /// ```proto
    /// message MySFixed64 {
    ///   // value must be greater than or equal to 5 [sfixed64.gte]
    ///   sfixed64 value = 1 [(buf.validate.field).sfixed64.gte = 5];
    ///
    ///   // value must be greater than or equal to 5 and less than 10 [sfixed64.gte_lt]
    ///   sfixed64 other_value = 2 [(buf.validate.field).sfixed64 = { gte: 5, lt: 10 }];
    ///
    ///   // value must be greater than or equal to 10 or less than 5 [sfixed64.gte_lt_exclusive]
    ///   sfixed64 another_value = 3 [(buf.validate.field).sfixed64 = { gte: 10, lt: 5 }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Gte {
      get { return HasGte ? (long) greaterThan_ : 0L; }
      set {
        greaterThan_ = value;
        greaterThanCase_ = GreaterThanOneofCase.Gte;
      }
    }
    /// <summary>Gets whether the "gte" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGte {
      get { return greaterThanCase_ == GreaterThanOneofCase.Gte; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "gte" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGte() {
      if (HasGte) {
        ClearGreaterThan();
      }
    }

    /// <summary>Field number for the "in" field.</summary>
    public const int InFieldNumber = 6;
    private static readonly pb::FieldCodec<long> _repeated_in_codec
        = pb::FieldCodec.ForSFixed64(49);
    private readonly pbc::RepeatedField<long> in_ = new pbc::RepeatedField<long>();
    /// <summary>
    /// `in` requires the field value to be equal to one of the specified values.
    /// If the field value isn't one of the specified values, an error message is
    /// generated.
    ///
    /// ```proto
    /// message MySFixed64 {
    ///   // value must be in list [1, 2, 3]
    ///   sfixed64 value = 1 [(buf.validate.field).sfixed64 = { in: [1, 2, 3] }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<long> In {
      get { return in_; }
    }

    /// <summary>Field number for the "not_in" field.</summary>
    public const int NotInFieldNumber = 7;
    private static readonly pb::FieldCodec<long> _repeated_notIn_codec
        = pb::FieldCodec.ForSFixed64(57);
    private readonly pbc::RepeatedField<long> notIn_ = new pbc::RepeatedField<long>();
    /// <summary>
    /// `not_in` requires the field value to not be equal to any of the specified
    /// values. If the field value is one of the specified values, an error
    /// message is generated.
    ///
    /// ```proto
    /// message MySFixed64 {
    ///   // value must not be in list [1, 2, 3]
    ///   sfixed64 value = 1 [(buf.validate.field).sfixed64 = { not_in: [1, 2, 3] }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<long> NotIn {
      get { return notIn_; }
    }

    /// <summary>Field number for the "example" field.</summary>
    public const int ExampleFieldNumber = 8;
    private static readonly pb::FieldCodec<long> _repeated_example_codec
        = pb::FieldCodec.ForSFixed64(65);
    private readonly pbc::RepeatedField<long> example_ = new pbc::RepeatedField<long>();
    /// <summary>
    /// `example` specifies values that the field may have. These values SHOULD
    /// conform to other rules. `example` values will not impact validation
    /// but may be used as helpful guidance on how to populate the given field.
    ///
    /// ```proto
    /// message MySFixed64 {
    ///   sfixed64 value = 1 [
    ///     (buf.validate.field).sfixed64.example = 1,
    ///     (buf.validate.field).sfixed64.example = 2
    ///   ];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<long> Example {
      get { return example_; }
    }

    private object lessThan_;
    /// <summary>Enum of possible cases for the "less_than" oneof.</summary>
    public enum LessThanOneofCase {
      None = 0,
      Lt = 2,
      Lte = 3,
    }
    private LessThanOneofCase lessThanCase_ = LessThanOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LessThanOneofCase LessThanCase {
      get { return lessThanCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLessThan() {
      lessThanCase_ = LessThanOneofCase.None;
      lessThan_ = null;
    }

    private object greaterThan_;
    /// <summary>Enum of possible cases for the "greater_than" oneof.</summary>
    public enum GreaterThanOneofCase {
      None = 0,
      Gt = 4,
      Gte = 5,
    }
    private GreaterThanOneofCase greaterThanCase_ = GreaterThanOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GreaterThanOneofCase GreaterThanCase {
      get { return greaterThanCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGreaterThan() {
      greaterThanCase_ = GreaterThanOneofCase.None;
      greaterThan_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SFixed64Rules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SFixed64Rules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Const != other.Const) return false;
      if (Lt != other.Lt) return false;
      if (Lte != other.Lte) return false;
      if (Gt != other.Gt) return false;
      if (Gte != other.Gte) return false;
      if(!in_.Equals(other.in_)) return false;
      if(!notIn_.Equals(other.notIn_)) return false;
      if(!example_.Equals(other.example_)) return false;
      if (LessThanCase != other.LessThanCase) return false;
      if (GreaterThanCase != other.GreaterThanCase) return false;
      if (!Equals(_extensions, other._extensions)) {
        return false;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasConst) hash ^= Const.GetHashCode();
      if (HasLt) hash ^= Lt.GetHashCode();
      if (HasLte) hash ^= Lte.GetHashCode();
      if (HasGt) hash ^= Gt.GetHashCode();
      if (HasGte) hash ^= Gte.GetHashCode();
      hash ^= in_.GetHashCode();
      hash ^= notIn_.GetHashCode();
      hash ^= example_.GetHashCode();
      hash ^= (int) lessThanCase_;
      hash ^= (int) greaterThanCase_;
      if (_extensions != null) {
        hash ^= _extensions.GetHashCode();
      }
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasConst) {
        output.WriteRawTag(9);
        output.WriteSFixed64(Const);
      }
      if (HasLt) {
        output.WriteRawTag(17);
        output.WriteSFixed64(Lt);
      }
      if (HasLte) {
        output.WriteRawTag(25);
        output.WriteSFixed64(Lte);
      }
      if (HasGt) {
        output.WriteRawTag(33);
        output.WriteSFixed64(Gt);
      }
      if (HasGte) {
        output.WriteRawTag(41);
        output.WriteSFixed64(Gte);
      }
      in_.WriteTo(output, _repeated_in_codec);
      notIn_.WriteTo(output, _repeated_notIn_codec);
      example_.WriteTo(output, _repeated_example_codec);
      if (_extensions != null) {
        _extensions.WriteTo(output);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasConst) {
        output.WriteRawTag(9);
        output.WriteSFixed64(Const);
      }
      if (HasLt) {
        output.WriteRawTag(17);
        output.WriteSFixed64(Lt);
      }
      if (HasLte) {
        output.WriteRawTag(25);
        output.WriteSFixed64(Lte);
      }
      if (HasGt) {
        output.WriteRawTag(33);
        output.WriteSFixed64(Gt);
      }
      if (HasGte) {
        output.WriteRawTag(41);
        output.WriteSFixed64(Gte);
      }
      in_.WriteTo(ref output, _repeated_in_codec);
      notIn_.WriteTo(ref output, _repeated_notIn_codec);
      example_.WriteTo(ref output, _repeated_example_codec);
      if (_extensions != null) {
        _extensions.WriteTo(ref output);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasConst) {
        size += 1 + 8;
      }
      if (HasLt) {
        size += 1 + 8;
      }
      if (HasLte) {
        size += 1 + 8;
      }
      if (HasGt) {
        size += 1 + 8;
      }
      if (HasGte) {
        size += 1 + 8;
      }
      size += in_.CalculateSize(_repeated_in_codec);
      size += notIn_.CalculateSize(_repeated_notIn_codec);
      size += example_.CalculateSize(_repeated_example_codec);
      if (_extensions != null) {
        size += _extensions.CalculateSize();
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SFixed64Rules other) {
      if (other == null) {
        return;
      }
      if (other.HasConst) {
        Const = other.Const;
      }
      in_.Add(other.in_);
      notIn_.Add(other.notIn_);
      example_.Add(other.example_);
      switch (other.LessThanCase) {
        case LessThanOneofCase.Lt:
          Lt = other.Lt;
          break;
        case LessThanOneofCase.Lte:
          Lte = other.Lte;
          break;
      }

      switch (other.GreaterThanCase) {
        case GreaterThanOneofCase.Gt:
          Gt = other.Gt;
          break;
        case GreaterThanOneofCase.Gte:
          Gte = other.Gte;
          break;
      }

      pb::ExtensionSet.MergeFrom(ref _extensions, other._extensions);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            if (!pb::ExtensionSet.TryMergeFieldFrom(ref _extensions, input)) {
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            }
            break;
          case 9: {
            Const = input.ReadSFixed64();
            break;
          }
          case 17: {
            Lt = input.ReadSFixed64();
            break;
          }
          case 25: {
            Lte = input.ReadSFixed64();
            break;
          }
          case 33: {
            Gt = input.ReadSFixed64();
            break;
          }
          case 41: {
            Gte = input.ReadSFixed64();
            break;
          }
          case 50:
          case 49: {
            in_.AddEntriesFrom(input, _repeated_in_codec);
            break;
          }
          case 58:
          case 57: {
            notIn_.AddEntriesFrom(input, _repeated_notIn_codec);
            break;
          }
          case 66:
          case 65: {
            example_.AddEntriesFrom(input, _repeated_example_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            if (!pb::ExtensionSet.TryMergeFieldFrom(ref _extensions, ref input)) {
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            }
            break;
          case 9: {
            Const = input.ReadSFixed64();
            break;
          }
          case 17: {
            Lt = input.ReadSFixed64();
            break;
          }
          case 25: {
            Lte = input.ReadSFixed64();
            break;
          }
          case 33: {
            Gt = input.ReadSFixed64();
            break;
          }
          case 41: {
            Gte = input.ReadSFixed64();
            break;
          }
          case 50:
          case 49: {
            in_.AddEntriesFrom(ref input, _repeated_in_codec);
            break;
          }
          case 58:
          case 57: {
            notIn_.AddEntriesFrom(ref input, _repeated_notIn_codec);
            break;
          }
          case 66:
          case 65: {
            example_.AddEntriesFrom(ref input, _repeated_example_codec);
            break;
          }
        }
      }
    }
    #endif

    public TValue GetExtension<TValue>(pb::Extension<SFixed64Rules, TValue> extension) {
      return pb::ExtensionSet.Get(ref _extensions, extension);
    }
    public pbc::RepeatedField<TValue> GetExtension<TValue>(pb::RepeatedExtension<SFixed64Rules, TValue> extension) {
      return pb::ExtensionSet.Get(ref _extensions, extension);
    }
    public pbc::RepeatedField<TValue> GetOrInitializeExtension<TValue>(pb::RepeatedExtension<SFixed64Rules, TValue> extension) {
      return pb::ExtensionSet.GetOrInitialize(ref _extensions, extension);
    }
    public void SetExtension<TValue>(pb::Extension<SFixed64Rules, TValue> extension, TValue value) {
      pb::ExtensionSet.Set(ref _extensions, extension, value);
    }
    public bool HasExtension<TValue>(pb::Extension<SFixed64Rules, TValue> extension) {
      return pb::ExtensionSet.Has(ref _extensions, extension);
    }
    public void ClearExtension<TValue>(pb::Extension<SFixed64Rules, TValue> extension) {
      pb::ExtensionSet.Clear(ref _extensions, extension);
    }
    public void ClearExtension<TValue>(pb::RepeatedExtension<SFixed64Rules, TValue> extension) {
      pb::ExtensionSet.Clear(ref _extensions, extension);
    }

  }

  /// <summary>
  /// BoolRules describes the rules applied to `bool` values. These rules
  /// may also be applied to the `google.protobuf.BoolValue` Well-Known-Type.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class BoolRules : pb::IExtendableMessage<BoolRules>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BoolRules> _parser = new pb::MessageParser<BoolRules>(() => new BoolRules());
    private pb::UnknownFieldSet _unknownFields;
    private pb::ExtensionSet<BoolRules> _extensions;
    private pb::ExtensionSet<BoolRules> _Extensions { get { return _extensions; } }
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<BoolRules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Buf.Validate.ValidateReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BoolRules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BoolRules(BoolRules other) : this() {
      _hasBits0 = other._hasBits0;
      const_ = other.const_;
      example_ = other.example_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      _extensions = pb::ExtensionSet.Clone(other._extensions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BoolRules Clone() {
      return new BoolRules(this);
    }

    /// <summary>Field number for the "const" field.</summary>
    public const int ConstFieldNumber = 1;
    private readonly static bool ConstDefaultValue = false;

    private bool const_;
    /// <summary>
    /// `const` requires the field value to exactly match the specified boolean value.
    /// If the field value doesn't match, an error message is generated.
    ///
    /// ```proto
    /// message MyBool {
    ///   // value must equal true
    ///   bool value = 1 [(buf.validate.field).bool.const = true];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Const {
      get { if ((_hasBits0 & 1) != 0) { return const_; } else { return ConstDefaultValue; } }
      set {
        _hasBits0 |= 1;
        const_ = value;
      }
    }
    /// <summary>Gets whether the "const" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasConst {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "const" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearConst() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "example" field.</summary>
    public const int ExampleFieldNumber = 2;
    private static readonly pb::FieldCodec<bool> _repeated_example_codec
        = pb::FieldCodec.ForBool(16);
    private readonly pbc::RepeatedField<bool> example_ = new pbc::RepeatedField<bool>();
    /// <summary>
    /// `example` specifies values that the field may have. These values SHOULD
    /// conform to other rules. `example` values will not impact validation
    /// but may be used as helpful guidance on how to populate the given field.
    ///
    /// ```proto
    /// message MyBool {
    ///   bool value = 1 [
    ///     (buf.validate.field).bool.example = 1,
    ///     (buf.validate.field).bool.example = 2
    ///   ];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<bool> Example {
      get { return example_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as BoolRules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(BoolRules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Const != other.Const) return false;
      if(!example_.Equals(other.example_)) return false;
      if (!Equals(_extensions, other._extensions)) {
        return false;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasConst) hash ^= Const.GetHashCode();
      hash ^= example_.GetHashCode();
      if (_extensions != null) {
        hash ^= _extensions.GetHashCode();
      }
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasConst) {
        output.WriteRawTag(8);
        output.WriteBool(Const);
      }
      example_.WriteTo(output, _repeated_example_codec);
      if (_extensions != null) {
        _extensions.WriteTo(output);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasConst) {
        output.WriteRawTag(8);
        output.WriteBool(Const);
      }
      example_.WriteTo(ref output, _repeated_example_codec);
      if (_extensions != null) {
        _extensions.WriteTo(ref output);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasConst) {
        size += 1 + 1;
      }
      size += example_.CalculateSize(_repeated_example_codec);
      if (_extensions != null) {
        size += _extensions.CalculateSize();
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(BoolRules other) {
      if (other == null) {
        return;
      }
      if (other.HasConst) {
        Const = other.Const;
      }
      example_.Add(other.example_);
      pb::ExtensionSet.MergeFrom(ref _extensions, other._extensions);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            if (!pb::ExtensionSet.TryMergeFieldFrom(ref _extensions, input)) {
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            }
            break;
          case 8: {
            Const = input.ReadBool();
            break;
          }
          case 18:
          case 16: {
            example_.AddEntriesFrom(input, _repeated_example_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            if (!pb::ExtensionSet.TryMergeFieldFrom(ref _extensions, ref input)) {
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            }
            break;
          case 8: {
            Const = input.ReadBool();
            break;
          }
          case 18:
          case 16: {
            example_.AddEntriesFrom(ref input, _repeated_example_codec);
            break;
          }
        }
      }
    }
    #endif

    public TValue GetExtension<TValue>(pb::Extension<BoolRules, TValue> extension) {
      return pb::ExtensionSet.Get(ref _extensions, extension);
    }
    public pbc::RepeatedField<TValue> GetExtension<TValue>(pb::RepeatedExtension<BoolRules, TValue> extension) {
      return pb::ExtensionSet.Get(ref _extensions, extension);
    }
    public pbc::RepeatedField<TValue> GetOrInitializeExtension<TValue>(pb::RepeatedExtension<BoolRules, TValue> extension) {
      return pb::ExtensionSet.GetOrInitialize(ref _extensions, extension);
    }
    public void SetExtension<TValue>(pb::Extension<BoolRules, TValue> extension, TValue value) {
      pb::ExtensionSet.Set(ref _extensions, extension, value);
    }
    public bool HasExtension<TValue>(pb::Extension<BoolRules, TValue> extension) {
      return pb::ExtensionSet.Has(ref _extensions, extension);
    }
    public void ClearExtension<TValue>(pb::Extension<BoolRules, TValue> extension) {
      pb::ExtensionSet.Clear(ref _extensions, extension);
    }
    public void ClearExtension<TValue>(pb::RepeatedExtension<BoolRules, TValue> extension) {
      pb::ExtensionSet.Clear(ref _extensions, extension);
    }

  }

  /// <summary>
  /// StringRules describes the rules applied to `string` values These
  /// rules may also be applied to the `google.protobuf.StringValue` Well-Known-Type.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class StringRules : pb::IExtendableMessage<StringRules>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StringRules> _parser = new pb::MessageParser<StringRules>(() => new StringRules());
    private pb::UnknownFieldSet _unknownFields;
    private pb::ExtensionSet<StringRules> _extensions;
    private pb::ExtensionSet<StringRules> _Extensions { get { return _extensions; } }
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<StringRules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Buf.Validate.ValidateReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StringRules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StringRules(StringRules other) : this() {
      _hasBits0 = other._hasBits0;
      const_ = other.const_;
      len_ = other.len_;
      minLen_ = other.minLen_;
      maxLen_ = other.maxLen_;
      lenBytes_ = other.lenBytes_;
      minBytes_ = other.minBytes_;
      maxBytes_ = other.maxBytes_;
      pattern_ = other.pattern_;
      prefix_ = other.prefix_;
      suffix_ = other.suffix_;
      contains_ = other.contains_;
      notContains_ = other.notContains_;
      in_ = other.in_.Clone();
      notIn_ = other.notIn_.Clone();
      strict_ = other.strict_;
      example_ = other.example_.Clone();
      switch (other.WellKnownCase) {
        case WellKnownOneofCase.Email:
          Email = other.Email;
          break;
        case WellKnownOneofCase.Hostname:
          Hostname = other.Hostname;
          break;
        case WellKnownOneofCase.Ip:
          Ip = other.Ip;
          break;
        case WellKnownOneofCase.Ipv4:
          Ipv4 = other.Ipv4;
          break;
        case WellKnownOneofCase.Ipv6:
          Ipv6 = other.Ipv6;
          break;
        case WellKnownOneofCase.Uri:
          Uri = other.Uri;
          break;
        case WellKnownOneofCase.UriRef:
          UriRef = other.UriRef;
          break;
        case WellKnownOneofCase.Address:
          Address = other.Address;
          break;
        case WellKnownOneofCase.Uuid:
          Uuid = other.Uuid;
          break;
        case WellKnownOneofCase.Tuuid:
          Tuuid = other.Tuuid;
          break;
        case WellKnownOneofCase.IpWithPrefixlen:
          IpWithPrefixlen = other.IpWithPrefixlen;
          break;
        case WellKnownOneofCase.Ipv4WithPrefixlen:
          Ipv4WithPrefixlen = other.Ipv4WithPrefixlen;
          break;
        case WellKnownOneofCase.Ipv6WithPrefixlen:
          Ipv6WithPrefixlen = other.Ipv6WithPrefixlen;
          break;
        case WellKnownOneofCase.IpPrefix:
          IpPrefix = other.IpPrefix;
          break;
        case WellKnownOneofCase.Ipv4Prefix:
          Ipv4Prefix = other.Ipv4Prefix;
          break;
        case WellKnownOneofCase.Ipv6Prefix:
          Ipv6Prefix = other.Ipv6Prefix;
          break;
        case WellKnownOneofCase.HostAndPort:
          HostAndPort = other.HostAndPort;
          break;
        case WellKnownOneofCase.WellKnownRegex:
          WellKnownRegex = other.WellKnownRegex;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      _extensions = pb::ExtensionSet.Clone(other._extensions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StringRules Clone() {
      return new StringRules(this);
    }

    /// <summary>Field number for the "const" field.</summary>
    public const int ConstFieldNumber = 1;
    private readonly static string ConstDefaultValue = "";

    private string const_;
    /// <summary>
    /// `const` requires the field value to exactly match the specified value. If
    /// the field value doesn't match, an error message is generated.
    ///
    /// ```proto
    /// message MyString {
    ///   // value must equal `hello`
    ///   string value = 1 [(buf.validate.field).string.const = "hello"];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Const {
      get { return const_ ?? ConstDefaultValue; }
      set {
        const_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "const" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasConst {
      get { return const_ != null; }
    }
    /// <summary>Clears the value of the "const" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearConst() {
      const_ = null;
    }

    /// <summary>Field number for the "len" field.</summary>
    public const int LenFieldNumber = 19;
    private readonly static ulong LenDefaultValue = 0UL;

    private ulong len_;
    /// <summary>
    /// `len` dictates that the field value must have the specified
    /// number of characters (Unicode code points), which may differ from the number
    /// of bytes in the string. If the field value does not meet the specified
    /// length, an error message will be generated.
    ///
    /// ```proto
    /// message MyString {
    ///   // value length must be 5 characters
    ///   string value = 1 [(buf.validate.field).string.len = 5];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong Len {
      get { if ((_hasBits0 & 16) != 0) { return len_; } else { return LenDefaultValue; } }
      set {
        _hasBits0 |= 16;
        len_ = value;
      }
    }
    /// <summary>Gets whether the "len" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLen {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "len" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLen() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "min_len" field.</summary>
    public const int MinLenFieldNumber = 2;
    private readonly static ulong MinLenDefaultValue = 0UL;

    private ulong minLen_;
    /// <summary>
    /// `min_len` specifies that the field value must have at least the specified
    /// number of characters (Unicode code points), which may differ from the number
    /// of bytes in the string. If the field value contains fewer characters, an error
    /// message will be generated.
    ///
    /// ```proto
    /// message MyString {
    ///   // value length must be at least 3 characters
    ///   string value = 1 [(buf.validate.field).string.min_len = 3];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong MinLen {
      get { if ((_hasBits0 & 1) != 0) { return minLen_; } else { return MinLenDefaultValue; } }
      set {
        _hasBits0 |= 1;
        minLen_ = value;
      }
    }
    /// <summary>Gets whether the "min_len" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMinLen {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "min_len" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMinLen() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "max_len" field.</summary>
    public const int MaxLenFieldNumber = 3;
    private readonly static ulong MaxLenDefaultValue = 0UL;

    private ulong maxLen_;
    /// <summary>
    /// `max_len` specifies that the field value must have no more than the specified
    /// number of characters (Unicode code points), which may differ from the
    /// number of bytes in the string. If the field value contains more characters,
    /// an error message will be generated.
    ///
    /// ```proto
    /// message MyString {
    ///   // value length must be at most 10 characters
    ///   string value = 1 [(buf.validate.field).string.max_len = 10];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong MaxLen {
      get { if ((_hasBits0 & 2) != 0) { return maxLen_; } else { return MaxLenDefaultValue; } }
      set {
        _hasBits0 |= 2;
        maxLen_ = value;
      }
    }
    /// <summary>Gets whether the "max_len" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaxLen {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "max_len" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaxLen() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "len_bytes" field.</summary>
    public const int LenBytesFieldNumber = 20;
    private readonly static ulong LenBytesDefaultValue = 0UL;

    private ulong lenBytes_;
    /// <summary>
    /// `len_bytes` dictates that the field value must have the specified number of
    /// bytes. If the field value does not match the specified length in bytes,
    /// an error message will be generated.
    ///
    /// ```proto
    /// message MyString {
    ///   // value length must be 6 bytes
    ///   string value = 1 [(buf.validate.field).string.len_bytes = 6];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong LenBytes {
      get { if ((_hasBits0 & 32) != 0) { return lenBytes_; } else { return LenBytesDefaultValue; } }
      set {
        _hasBits0 |= 32;
        lenBytes_ = value;
      }
    }
    /// <summary>Gets whether the "len_bytes" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLenBytes {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "len_bytes" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLenBytes() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "min_bytes" field.</summary>
    public const int MinBytesFieldNumber = 4;
    private readonly static ulong MinBytesDefaultValue = 0UL;

    private ulong minBytes_;
    /// <summary>
    /// `min_bytes` specifies that the field value must have at least the specified
    /// number of bytes. If the field value contains fewer bytes, an error message
    /// will be generated.
    ///
    /// ```proto
    /// message MyString {
    ///   // value length must be at least 4 bytes
    ///   string value = 1 [(buf.validate.field).string.min_bytes = 4];
    /// }
    ///
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong MinBytes {
      get { if ((_hasBits0 & 4) != 0) { return minBytes_; } else { return MinBytesDefaultValue; } }
      set {
        _hasBits0 |= 4;
        minBytes_ = value;
      }
    }
    /// <summary>Gets whether the "min_bytes" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMinBytes {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "min_bytes" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMinBytes() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "max_bytes" field.</summary>
    public const int MaxBytesFieldNumber = 5;
    private readonly static ulong MaxBytesDefaultValue = 0UL;

    private ulong maxBytes_;
    /// <summary>
    /// `max_bytes` specifies that the field value must have no more than the
    ///specified number of bytes. If the field value contains more bytes, an
    /// error message will be generated.
    ///
    /// ```proto
    /// message MyString {
    ///   // value length must be at most 8 bytes
    ///   string value = 1 [(buf.validate.field).string.max_bytes = 8];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong MaxBytes {
      get { if ((_hasBits0 & 8) != 0) { return maxBytes_; } else { return MaxBytesDefaultValue; } }
      set {
        _hasBits0 |= 8;
        maxBytes_ = value;
      }
    }
    /// <summary>Gets whether the "max_bytes" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaxBytes {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "max_bytes" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaxBytes() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "pattern" field.</summary>
    public const int PatternFieldNumber = 6;
    private readonly static string PatternDefaultValue = "";

    private string pattern_;
    /// <summary>
    /// `pattern` specifies that the field value must match the specified
    /// regular expression (RE2 syntax), with the expression provided without any
    /// delimiters. If the field value doesn't match the regular expression, an
    /// error message will be generated.
    ///
    /// ```proto
    /// message MyString {
    ///   // value does not match regex pattern `^[a-zA-Z]//$`
    ///   string value = 1 [(buf.validate.field).string.pattern = "^[a-zA-Z]//$"];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Pattern {
      get { return pattern_ ?? PatternDefaultValue; }
      set {
        pattern_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "pattern" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPattern {
      get { return pattern_ != null; }
    }
    /// <summary>Clears the value of the "pattern" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPattern() {
      pattern_ = null;
    }

    /// <summary>Field number for the "prefix" field.</summary>
    public const int PrefixFieldNumber = 7;
    private readonly static string PrefixDefaultValue = "";

    private string prefix_;
    /// <summary>
    /// `prefix` specifies that the field value must have the
    ///specified substring at the beginning of the string. If the field value
    /// doesn't start with the specified prefix, an error message will be
    /// generated.
    ///
    /// ```proto
    /// message MyString {
    ///   // value does not have prefix `pre`
    ///   string value = 1 [(buf.validate.field).string.prefix = "pre"];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Prefix {
      get { return prefix_ ?? PrefixDefaultValue; }
      set {
        prefix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "prefix" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPrefix {
      get { return prefix_ != null; }
    }
    /// <summary>Clears the value of the "prefix" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPrefix() {
      prefix_ = null;
    }

    /// <summary>Field number for the "suffix" field.</summary>
    public const int SuffixFieldNumber = 8;
    private readonly static string SuffixDefaultValue = "";

    private string suffix_;
    /// <summary>
    /// `suffix` specifies that the field value must have the
    ///specified substring at the end of the string. If the field value doesn't
    /// end with the specified suffix, an error message will be generated.
    ///
    /// ```proto
    /// message MyString {
    ///   // value does not have suffix `post`
    ///   string value = 1 [(buf.validate.field).string.suffix = "post"];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Suffix {
      get { return suffix_ ?? SuffixDefaultValue; }
      set {
        suffix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "suffix" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSuffix {
      get { return suffix_ != null; }
    }
    /// <summary>Clears the value of the "suffix" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSuffix() {
      suffix_ = null;
    }

    /// <summary>Field number for the "contains" field.</summary>
    public const int ContainsFieldNumber = 9;
    private readonly static string ContainsDefaultValue = "";

    private string contains_;
    /// <summary>
    /// `contains` specifies that the field value must have the
    ///specified substring anywhere in the string. If the field value doesn't
    /// contain the specified substring, an error message will be generated.
    ///
    /// ```proto
    /// message MyString {
    ///   // value does not contain substring `inside`.
    ///   string value = 1 [(buf.validate.field).string.contains = "inside"];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Contains {
      get { return contains_ ?? ContainsDefaultValue; }
      set {
        contains_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "contains" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasContains {
      get { return contains_ != null; }
    }
    /// <summary>Clears the value of the "contains" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearContains() {
      contains_ = null;
    }

    /// <summary>Field number for the "not_contains" field.</summary>
    public const int NotContainsFieldNumber = 23;
    private readonly static string NotContainsDefaultValue = "";

    private string notContains_;
    /// <summary>
    /// `not_contains` specifies that the field value must not have the
    ///specified substring anywhere in the string. If the field value contains
    /// the specified substring, an error message will be generated.
    ///
    /// ```proto
    /// message MyString {
    ///   // value contains substring `inside`.
    ///   string value = 1 [(buf.validate.field).string.not_contains = "inside"];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string NotContains {
      get { return notContains_ ?? NotContainsDefaultValue; }
      set {
        notContains_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "not_contains" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasNotContains {
      get { return notContains_ != null; }
    }
    /// <summary>Clears the value of the "not_contains" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearNotContains() {
      notContains_ = null;
    }

    /// <summary>Field number for the "in" field.</summary>
    public const int InFieldNumber = 10;
    private static readonly pb::FieldCodec<string> _repeated_in_codec
        = pb::FieldCodec.ForString(82);
    private readonly pbc::RepeatedField<string> in_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// `in` specifies that the field value must be equal to one of the specified
    /// values. If the field value isn't one of the specified values, an error
    /// message will be generated.
    ///
    /// ```proto
    /// message MyString {
    ///   // value must be in list ["apple", "banana"]
    ///   string value = 1 [(buf.validate.field).string.in = "apple", (buf.validate.field).string.in = "banana"];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> In {
      get { return in_; }
    }

    /// <summary>Field number for the "not_in" field.</summary>
    public const int NotInFieldNumber = 11;
    private static readonly pb::FieldCodec<string> _repeated_notIn_codec
        = pb::FieldCodec.ForString(90);
    private readonly pbc::RepeatedField<string> notIn_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// `not_in` specifies that the field value cannot be equal to any
    /// of the specified values. If the field value is one of the specified values,
    /// an error message will be generated.
    /// ```proto
    /// message MyString {
    ///   // value must not be in list ["orange", "grape"]
    ///   string value = 1 [(buf.validate.field).string.not_in = "orange", (buf.validate.field).string.not_in = "grape"];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> NotIn {
      get { return notIn_; }
    }

    /// <summary>Field number for the "email" field.</summary>
    public const int EmailFieldNumber = 12;
    /// <summary>
    /// `email` specifies that the field value must be a valid email address, for
    /// example "foo@example.com".
    ///
    /// Conforms to the definition for a valid email address from the [HTML standard](https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address).
    /// Note that this standard willfully deviates from [RFC 5322](https://datatracker.ietf.org/doc/html/rfc5322),
    /// which allows many unexpected forms of email addresses and will easily match
    /// a typographical error.
    ///
    /// If the field value isn't a valid email address, an error message will be generated.
    ///
    /// ```proto
    /// message MyString {
    ///   // value must be a valid email address
    ///   string value = 1 [(buf.validate.field).string.email = true];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Email {
      get { return HasEmail ? (bool) wellKnown_ : false; }
      set {
        wellKnown_ = value;
        wellKnownCase_ = WellKnownOneofCase.Email;
      }
    }
    /// <summary>Gets whether the "email" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEmail {
      get { return wellKnownCase_ == WellKnownOneofCase.Email; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "email" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearEmail() {
      if (HasEmail) {
        ClearWellKnown();
      }
    }

    /// <summary>Field number for the "hostname" field.</summary>
    public const int HostnameFieldNumber = 13;
    /// <summary>
    /// `hostname` specifies that the field value must be a valid hostname, for
    /// example "foo.example.com".
    ///
    /// A valid hostname follows the rules below:
    /// - The name consists of one or more labels, separated by a dot (".").
    /// - Each label can be 1 to 63 alphanumeric characters.
    /// - A label can contain hyphens ("-"), but must not start or end with a hyphen.
    /// - The right-most label must not be digits only.
    /// - The name can have a trailing dot—for example, "foo.example.com.".
    /// - The name can be 253 characters at most, excluding the optional trailing dot.
    ///
    /// If the field value isn't a valid hostname, an error message will be generated.
    ///
    /// ```proto
    /// message MyString {
    ///   // value must be a valid hostname
    ///   string value = 1 [(buf.validate.field).string.hostname = true];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Hostname {
      get { return HasHostname ? (bool) wellKnown_ : false; }
      set {
        wellKnown_ = value;
        wellKnownCase_ = WellKnownOneofCase.Hostname;
      }
    }
    /// <summary>Gets whether the "hostname" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHostname {
      get { return wellKnownCase_ == WellKnownOneofCase.Hostname; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "hostname" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHostname() {
      if (HasHostname) {
        ClearWellKnown();
      }
    }

    /// <summary>Field number for the "ip" field.</summary>
    public const int IpFieldNumber = 14;
    /// <summary>
    /// `ip` specifies that the field value must be a valid IP (v4 or v6) address.
    ///
    /// IPv4 addresses are expected in the dotted decimal format—for example, "192.168.5.21".
    /// IPv6 addresses are expected in their text representation—for example, "::1",
    /// or "2001:0DB8:ABCD:0012::0".
    ///
    /// Both formats are well-defined in the internet standard [RFC 3986](https://datatracker.ietf.org/doc/html/rfc3986).
    /// Zone identifiers for IPv6 addresses (for example, "fe80::a%en1") are supported.
    ///
    /// If the field value isn't a valid IP address, an error message will be
    /// generated.
    ///
    /// ```proto
    /// message MyString {
    ///   // value must be a valid IP address
    ///   string value = 1 [(buf.validate.field).string.ip = true];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Ip {
      get { return HasIp ? (bool) wellKnown_ : false; }
      set {
        wellKnown_ = value;
        wellKnownCase_ = WellKnownOneofCase.Ip;
      }
    }
    /// <summary>Gets whether the "ip" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIp {
      get { return wellKnownCase_ == WellKnownOneofCase.Ip; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "ip" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIp() {
      if (HasIp) {
        ClearWellKnown();
      }
    }

    /// <summary>Field number for the "ipv4" field.</summary>
    public const int Ipv4FieldNumber = 15;
    /// <summary>
    /// `ipv4` specifies that the field value must be a valid IPv4 address—for
    /// example "192.168.5.21". If the field value isn't a valid IPv4 address, an
    /// error message will be generated.
    ///
    /// ```proto
    /// message MyString {
    ///   // value must be a valid IPv4 address
    ///   string value = 1 [(buf.validate.field).string.ipv4 = true];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Ipv4 {
      get { return HasIpv4 ? (bool) wellKnown_ : false; }
      set {
        wellKnown_ = value;
        wellKnownCase_ = WellKnownOneofCase.Ipv4;
      }
    }
    /// <summary>Gets whether the "ipv4" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIpv4 {
      get { return wellKnownCase_ == WellKnownOneofCase.Ipv4; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "ipv4" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIpv4() {
      if (HasIpv4) {
        ClearWellKnown();
      }
    }

    /// <summary>Field number for the "ipv6" field.</summary>
    public const int Ipv6FieldNumber = 16;
    /// <summary>
    /// `ipv6` specifies that the field value must be a valid IPv6 address—for
    /// example "::1", or "d7a:115c:a1e0:ab12:4843:cd96:626b:430b". If the field
    /// value is not a valid IPv6 address, an error message will be generated.
    ///
    /// ```proto
    /// message MyString {
    ///   // value must be a valid IPv6 address
    ///   string value = 1 [(buf.validate.field).string.ipv6 = true];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Ipv6 {
      get { return HasIpv6 ? (bool) wellKnown_ : false; }
      set {
        wellKnown_ = value;
        wellKnownCase_ = WellKnownOneofCase.Ipv6;
      }
    }
    /// <summary>Gets whether the "ipv6" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIpv6 {
      get { return wellKnownCase_ == WellKnownOneofCase.Ipv6; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "ipv6" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIpv6() {
      if (HasIpv6) {
        ClearWellKnown();
      }
    }

    /// <summary>Field number for the "uri" field.</summary>
    public const int UriFieldNumber = 17;
    /// <summary>
    /// `uri` specifies that the field value must be a valid URI, for example
    /// "https://example.com/foo/bar?baz=quux#frag".
    ///
    /// URI is defined in the internet standard [RFC 3986](https://datatracker.ietf.org/doc/html/rfc3986).
    /// Zone Identifiers in IPv6 address literals are supported ([RFC 6874](https://datatracker.ietf.org/doc/html/rfc6874)).
    ///
    /// If the field value isn't a valid URI, an error message will be generated.
    ///
    /// ```proto
    /// message MyString {
    ///   // value must be a valid URI
    ///   string value = 1 [(buf.validate.field).string.uri = true];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Uri {
      get { return HasUri ? (bool) wellKnown_ : false; }
      set {
        wellKnown_ = value;
        wellKnownCase_ = WellKnownOneofCase.Uri;
      }
    }
    /// <summary>Gets whether the "uri" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUri {
      get { return wellKnownCase_ == WellKnownOneofCase.Uri; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "uri" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUri() {
      if (HasUri) {
        ClearWellKnown();
      }
    }

    /// <summary>Field number for the "uri_ref" field.</summary>
    public const int UriRefFieldNumber = 18;
    /// <summary>
    /// `uri_ref` specifies that the field value must be a valid URI Reference—either
    /// a URI such as "https://example.com/foo/bar?baz=quux#frag", or a Relative
    /// Reference such as "./foo/bar?query".
    ///
    /// URI, URI Reference, and Relative Reference are defined in the internet
    /// standard [RFC 3986](https://datatracker.ietf.org/doc/html/rfc3986). Zone
    /// Identifiers in IPv6 address literals are supported ([RFC 6874](https://datatracker.ietf.org/doc/html/rfc6874)).
    ///
    /// If the field value isn't a valid URI Reference, an error message will be
    /// generated.
    ///
    /// ```proto
    /// message MyString {
    ///   // value must be a valid URI Reference
    ///   string value = 1 [(buf.validate.field).string.uri_ref = true];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool UriRef {
      get { return HasUriRef ? (bool) wellKnown_ : false; }
      set {
        wellKnown_ = value;
        wellKnownCase_ = WellKnownOneofCase.UriRef;
      }
    }
    /// <summary>Gets whether the "uri_ref" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUriRef {
      get { return wellKnownCase_ == WellKnownOneofCase.UriRef; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "uri_ref" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUriRef() {
      if (HasUriRef) {
        ClearWellKnown();
      }
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 21;
    /// <summary>
    /// `address` specifies that the field value must be either a valid hostname
    /// (for example, "example.com"), or a valid IP (v4 or v6) address (for example,
    /// "192.168.0.1", or "::1"). If the field value isn't a valid hostname or IP,
    /// an error message will be generated.
    ///
    /// ```proto
    /// message MyString {
    ///   // value must be a valid hostname, or ip address
    ///   string value = 1 [(buf.validate.field).string.address = true];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Address {
      get { return HasAddress ? (bool) wellKnown_ : false; }
      set {
        wellKnown_ = value;
        wellKnownCase_ = WellKnownOneofCase.Address;
      }
    }
    /// <summary>Gets whether the "address" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAddress {
      get { return wellKnownCase_ == WellKnownOneofCase.Address; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "address" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAddress() {
      if (HasAddress) {
        ClearWellKnown();
      }
    }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 22;
    /// <summary>
    /// `uuid` specifies that the field value must be a valid UUID as defined by
    /// [RFC 4122](https://datatracker.ietf.org/doc/html/rfc4122#section-4.1.2). If the
    /// field value isn't a valid UUID, an error message will be generated.
    ///
    /// ```proto
    /// message MyString {
    ///   // value must be a valid UUID
    ///   string value = 1 [(buf.validate.field).string.uuid = true];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Uuid {
      get { return HasUuid ? (bool) wellKnown_ : false; }
      set {
        wellKnown_ = value;
        wellKnownCase_ = WellKnownOneofCase.Uuid;
      }
    }
    /// <summary>Gets whether the "uuid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUuid {
      get { return wellKnownCase_ == WellKnownOneofCase.Uuid; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "uuid" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUuid() {
      if (HasUuid) {
        ClearWellKnown();
      }
    }

    /// <summary>Field number for the "tuuid" field.</summary>
    public const int TuuidFieldNumber = 33;
    /// <summary>
    /// `tuuid` (trimmed UUID) specifies that the field value must be a valid UUID as
    /// defined by [RFC 4122](https://datatracker.ietf.org/doc/html/rfc4122#section-4.1.2) with all dashes
    /// omitted. If the field value isn't a valid UUID without dashes, an error message
    /// will be generated.
    ///
    /// ```proto
    /// message MyString {
    ///   // value must be a valid trimmed UUID
    ///   string value = 1 [(buf.validate.field).string.tuuid = true];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Tuuid {
      get { return HasTuuid ? (bool) wellKnown_ : false; }
      set {
        wellKnown_ = value;
        wellKnownCase_ = WellKnownOneofCase.Tuuid;
      }
    }
    /// <summary>Gets whether the "tuuid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTuuid {
      get { return wellKnownCase_ == WellKnownOneofCase.Tuuid; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "tuuid" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTuuid() {
      if (HasTuuid) {
        ClearWellKnown();
      }
    }

    /// <summary>Field number for the "ip_with_prefixlen" field.</summary>
    public const int IpWithPrefixlenFieldNumber = 26;
    /// <summary>
    /// `ip_with_prefixlen` specifies that the field value must be a valid IP
    /// (v4 or v6) address with prefix length—for example, "192.168.5.21/16" or
    /// "2001:0DB8:ABCD:0012::F1/64". If the field value isn't a valid IP with
    /// prefix length, an error message will be generated.
    ///
    /// ```proto
    /// message MyString {
    ///   // value must be a valid IP with prefix length
    ///    string value = 1 [(buf.validate.field).string.ip_with_prefixlen = true];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IpWithPrefixlen {
      get { return HasIpWithPrefixlen ? (bool) wellKnown_ : false; }
      set {
        wellKnown_ = value;
        wellKnownCase_ = WellKnownOneofCase.IpWithPrefixlen;
      }
    }
    /// <summary>Gets whether the "ip_with_prefixlen" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIpWithPrefixlen {
      get { return wellKnownCase_ == WellKnownOneofCase.IpWithPrefixlen; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "ip_with_prefixlen" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIpWithPrefixlen() {
      if (HasIpWithPrefixlen) {
        ClearWellKnown();
      }
    }

    /// <summary>Field number for the "ipv4_with_prefixlen" field.</summary>
    public const int Ipv4WithPrefixlenFieldNumber = 27;
    /// <summary>
    /// `ipv4_with_prefixlen` specifies that the field value must be a valid
    /// IPv4 address with prefix length—for example, "192.168.5.21/16". If the
    /// field value isn't a valid IPv4 address with prefix length, an error
    /// message will be generated.
    ///
    /// ```proto
    /// message MyString {
    ///   // value must be a valid IPv4 address with prefix length
    ///    string value = 1 [(buf.validate.field).string.ipv4_with_prefixlen = true];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Ipv4WithPrefixlen {
      get { return HasIpv4WithPrefixlen ? (bool) wellKnown_ : false; }
      set {
        wellKnown_ = value;
        wellKnownCase_ = WellKnownOneofCase.Ipv4WithPrefixlen;
      }
    }
    /// <summary>Gets whether the "ipv4_with_prefixlen" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIpv4WithPrefixlen {
      get { return wellKnownCase_ == WellKnownOneofCase.Ipv4WithPrefixlen; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "ipv4_with_prefixlen" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIpv4WithPrefixlen() {
      if (HasIpv4WithPrefixlen) {
        ClearWellKnown();
      }
    }

    /// <summary>Field number for the "ipv6_with_prefixlen" field.</summary>
    public const int Ipv6WithPrefixlenFieldNumber = 28;
    /// <summary>
    /// `ipv6_with_prefixlen` specifies that the field value must be a valid
    /// IPv6 address with prefix length—for example, "2001:0DB8:ABCD:0012::F1/64".
    /// If the field value is not a valid IPv6 address with prefix length,
    /// an error message will be generated.
    ///
    /// ```proto
    /// message MyString {
    ///   // value must be a valid IPv6 address prefix length
    ///    string value = 1 [(buf.validate.field).string.ipv6_with_prefixlen = true];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Ipv6WithPrefixlen {
      get { return HasIpv6WithPrefixlen ? (bool) wellKnown_ : false; }
      set {
        wellKnown_ = value;
        wellKnownCase_ = WellKnownOneofCase.Ipv6WithPrefixlen;
      }
    }
    /// <summary>Gets whether the "ipv6_with_prefixlen" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIpv6WithPrefixlen {
      get { return wellKnownCase_ == WellKnownOneofCase.Ipv6WithPrefixlen; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "ipv6_with_prefixlen" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIpv6WithPrefixlen() {
      if (HasIpv6WithPrefixlen) {
        ClearWellKnown();
      }
    }

    /// <summary>Field number for the "ip_prefix" field.</summary>
    public const int IpPrefixFieldNumber = 29;
    /// <summary>
    /// `ip_prefix` specifies that the field value must be a valid IP (v4 or v6)
    /// prefix—for example, "192.168.0.0/16" or "2001:0DB8:ABCD:0012::0/64".
    ///
    /// The prefix must have all zeros for the unmasked bits. For example,
    /// "2001:0DB8:ABCD:0012::0/64" designates the left-most 64 bits for the
    /// prefix, and the remaining 64 bits must be zero.
    ///
    /// If the field value isn't a valid IP prefix, an error message will be
    /// generated.
    ///
    /// ```proto
    /// message MyString {
    ///   // value must be a valid IP prefix
    ///    string value = 1 [(buf.validate.field).string.ip_prefix = true];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IpPrefix {
      get { return HasIpPrefix ? (bool) wellKnown_ : false; }
      set {
        wellKnown_ = value;
        wellKnownCase_ = WellKnownOneofCase.IpPrefix;
      }
    }
    /// <summary>Gets whether the "ip_prefix" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIpPrefix {
      get { return wellKnownCase_ == WellKnownOneofCase.IpPrefix; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "ip_prefix" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIpPrefix() {
      if (HasIpPrefix) {
        ClearWellKnown();
      }
    }

    /// <summary>Field number for the "ipv4_prefix" field.</summary>
    public const int Ipv4PrefixFieldNumber = 30;
    /// <summary>
    /// `ipv4_prefix` specifies that the field value must be a valid IPv4
    /// prefix, for example "192.168.0.0/16".
    ///
    /// The prefix must have all zeros for the unmasked bits. For example,
    /// "192.168.0.0/16" designates the left-most 16 bits for the prefix,
    /// and the remaining 16 bits must be zero.
    ///
    /// If the field value isn't a valid IPv4 prefix, an error message
    /// will be generated.
    ///
    /// ```proto
    /// message MyString {
    ///   // value must be a valid IPv4 prefix
    ///    string value = 1 [(buf.validate.field).string.ipv4_prefix = true];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Ipv4Prefix {
      get { return HasIpv4Prefix ? (bool) wellKnown_ : false; }
      set {
        wellKnown_ = value;
        wellKnownCase_ = WellKnownOneofCase.Ipv4Prefix;
      }
    }
    /// <summary>Gets whether the "ipv4_prefix" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIpv4Prefix {
      get { return wellKnownCase_ == WellKnownOneofCase.Ipv4Prefix; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "ipv4_prefix" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIpv4Prefix() {
      if (HasIpv4Prefix) {
        ClearWellKnown();
      }
    }

    /// <summary>Field number for the "ipv6_prefix" field.</summary>
    public const int Ipv6PrefixFieldNumber = 31;
    /// <summary>
    /// `ipv6_prefix` specifies that the field value must be a valid IPv6 prefix—for
    /// example, "2001:0DB8:ABCD:0012::0/64".
    ///
    /// The prefix must have all zeros for the unmasked bits. For example,
    /// "2001:0DB8:ABCD:0012::0/64" designates the left-most 64 bits for the
    /// prefix, and the remaining 64 bits must be zero.
    ///
    /// If the field value is not a valid IPv6 prefix, an error message will be
    /// generated.
    ///
    /// ```proto
    /// message MyString {
    ///   // value must be a valid IPv6 prefix
    ///    string value = 1 [(buf.validate.field).string.ipv6_prefix = true];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Ipv6Prefix {
      get { return HasIpv6Prefix ? (bool) wellKnown_ : false; }
      set {
        wellKnown_ = value;
        wellKnownCase_ = WellKnownOneofCase.Ipv6Prefix;
      }
    }
    /// <summary>Gets whether the "ipv6_prefix" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIpv6Prefix {
      get { return wellKnownCase_ == WellKnownOneofCase.Ipv6Prefix; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "ipv6_prefix" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIpv6Prefix() {
      if (HasIpv6Prefix) {
        ClearWellKnown();
      }
    }

    /// <summary>Field number for the "host_and_port" field.</summary>
    public const int HostAndPortFieldNumber = 32;
    /// <summary>
    /// `host_and_port` specifies that the field value must be valid host/port
    /// pair—for example, "example.com:8080".
    ///
    /// The host can be one of:
    ///- An IPv4 address in dotted decimal format—for example, "192.168.5.21".
    ///- An IPv6 address enclosed in square brackets—for example, "[2001:0DB8:ABCD:0012::F1]".
    ///- A hostname—for example, "example.com".
    ///
    /// The port is separated by a colon. It must be non-empty, with a decimal number
    /// in the range of 0-65535, inclusive.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HostAndPort {
      get { return HasHostAndPort ? (bool) wellKnown_ : false; }
      set {
        wellKnown_ = value;
        wellKnownCase_ = WellKnownOneofCase.HostAndPort;
      }
    }
    /// <summary>Gets whether the "host_and_port" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHostAndPort {
      get { return wellKnownCase_ == WellKnownOneofCase.HostAndPort; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "host_and_port" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHostAndPort() {
      if (HasHostAndPort) {
        ClearWellKnown();
      }
    }

    /// <summary>Field number for the "well_known_regex" field.</summary>
    public const int WellKnownRegexFieldNumber = 24;
    /// <summary>
    /// `well_known_regex` specifies a common well-known pattern
    /// defined as a regex. If the field value doesn't match the well-known
    /// regex, an error message will be generated.
    ///
    /// ```proto
    /// message MyString {
    ///   // value must be a valid HTTP header value
    ///   string value = 1 [(buf.validate.field).string.well_known_regex = KNOWN_REGEX_HTTP_HEADER_VALUE];
    /// }
    /// ```
    ///
    /// #### KnownRegex
    ///
    /// `well_known_regex` contains some well-known patterns.
    ///
    /// | Name                          | Number | Description                               |
    /// |-------------------------------|--------|-------------------------------------------|
    /// | KNOWN_REGEX_UNSPECIFIED       | 0      |                                           |
    /// | KNOWN_REGEX_HTTP_HEADER_NAME  | 1      | HTTP header name as defined by [RFC 7230](https://datatracker.ietf.org/doc/html/rfc7230#section-3.2)  |
    /// | KNOWN_REGEX_HTTP_HEADER_VALUE | 2      | HTTP header value as defined by [RFC 7230](https://datatracker.ietf.org/doc/html/rfc7230#section-3.2.4) |
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Buf.Validate.KnownRegex WellKnownRegex {
      get { return HasWellKnownRegex ? (global::Buf.Validate.KnownRegex) wellKnown_ : global::Buf.Validate.KnownRegex.Unspecified; }
      set {
        wellKnown_ = value;
        wellKnownCase_ = WellKnownOneofCase.WellKnownRegex;
      }
    }
    /// <summary>Gets whether the "well_known_regex" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasWellKnownRegex {
      get { return wellKnownCase_ == WellKnownOneofCase.WellKnownRegex; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "well_known_regex" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearWellKnownRegex() {
      if (HasWellKnownRegex) {
        ClearWellKnown();
      }
    }

    /// <summary>Field number for the "strict" field.</summary>
    public const int StrictFieldNumber = 25;
    private readonly static bool StrictDefaultValue = false;

    private bool strict_;
    /// <summary>
    /// This applies to regexes `HTTP_HEADER_NAME` and `HTTP_HEADER_VALUE` to
    /// enable strict header validation. By default, this is true, and HTTP header
    /// validations are [RFC-compliant](https://datatracker.ietf.org/doc/html/rfc7230#section-3). Setting to false will enable looser
    /// validations that only disallow `\r\n\0` characters, which can be used to
    /// bypass header matching rules.
    ///
    /// ```proto
    /// message MyString {
    ///   // The field `value` must have be a valid HTTP headers, but not enforced with strict rules.
    ///   string value = 1 [(buf.validate.field).string.strict = false];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Strict {
      get { if ((_hasBits0 & 64) != 0) { return strict_; } else { return StrictDefaultValue; } }
      set {
        _hasBits0 |= 64;
        strict_ = value;
      }
    }
    /// <summary>Gets whether the "strict" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasStrict {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "strict" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStrict() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "example" field.</summary>
    public const int ExampleFieldNumber = 34;
    private static readonly pb::FieldCodec<string> _repeated_example_codec
        = pb::FieldCodec.ForString(274);
    private readonly pbc::RepeatedField<string> example_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// `example` specifies values that the field may have. These values SHOULD
    /// conform to other rules. `example` values will not impact validation
    /// but may be used as helpful guidance on how to populate the given field.
    ///
    /// ```proto
    /// message MyString {
    ///   string value = 1 [
    ///     (buf.validate.field).string.example = "hello",
    ///     (buf.validate.field).string.example = "world"
    ///   ];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> Example {
      get { return example_; }
    }

    private object wellKnown_;
    /// <summary>Enum of possible cases for the "well_known" oneof.</summary>
    public enum WellKnownOneofCase {
      None = 0,
      Email = 12,
      Hostname = 13,
      Ip = 14,
      Ipv4 = 15,
      Ipv6 = 16,
      Uri = 17,
      UriRef = 18,
      Address = 21,
      Uuid = 22,
      Tuuid = 33,
      IpWithPrefixlen = 26,
      Ipv4WithPrefixlen = 27,
      Ipv6WithPrefixlen = 28,
      IpPrefix = 29,
      Ipv4Prefix = 30,
      Ipv6Prefix = 31,
      HostAndPort = 32,
      WellKnownRegex = 24,
    }
    private WellKnownOneofCase wellKnownCase_ = WellKnownOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public WellKnownOneofCase WellKnownCase {
      get { return wellKnownCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearWellKnown() {
      wellKnownCase_ = WellKnownOneofCase.None;
      wellKnown_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as StringRules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(StringRules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Const != other.Const) return false;
      if (Len != other.Len) return false;
      if (MinLen != other.MinLen) return false;
      if (MaxLen != other.MaxLen) return false;
      if (LenBytes != other.LenBytes) return false;
      if (MinBytes != other.MinBytes) return false;
      if (MaxBytes != other.MaxBytes) return false;
      if (Pattern != other.Pattern) return false;
      if (Prefix != other.Prefix) return false;
      if (Suffix != other.Suffix) return false;
      if (Contains != other.Contains) return false;
      if (NotContains != other.NotContains) return false;
      if(!in_.Equals(other.in_)) return false;
      if(!notIn_.Equals(other.notIn_)) return false;
      if (Email != other.Email) return false;
      if (Hostname != other.Hostname) return false;
      if (Ip != other.Ip) return false;
      if (Ipv4 != other.Ipv4) return false;
      if (Ipv6 != other.Ipv6) return false;
      if (Uri != other.Uri) return false;
      if (UriRef != other.UriRef) return false;
      if (Address != other.Address) return false;
      if (Uuid != other.Uuid) return false;
      if (Tuuid != other.Tuuid) return false;
      if (IpWithPrefixlen != other.IpWithPrefixlen) return false;
      if (Ipv4WithPrefixlen != other.Ipv4WithPrefixlen) return false;
      if (Ipv6WithPrefixlen != other.Ipv6WithPrefixlen) return false;
      if (IpPrefix != other.IpPrefix) return false;
      if (Ipv4Prefix != other.Ipv4Prefix) return false;
      if (Ipv6Prefix != other.Ipv6Prefix) return false;
      if (HostAndPort != other.HostAndPort) return false;
      if (WellKnownRegex != other.WellKnownRegex) return false;
      if (Strict != other.Strict) return false;
      if(!example_.Equals(other.example_)) return false;
      if (WellKnownCase != other.WellKnownCase) return false;
      if (!Equals(_extensions, other._extensions)) {
        return false;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasConst) hash ^= Const.GetHashCode();
      if (HasLen) hash ^= Len.GetHashCode();
      if (HasMinLen) hash ^= MinLen.GetHashCode();
      if (HasMaxLen) hash ^= MaxLen.GetHashCode();
      if (HasLenBytes) hash ^= LenBytes.GetHashCode();
      if (HasMinBytes) hash ^= MinBytes.GetHashCode();
      if (HasMaxBytes) hash ^= MaxBytes.GetHashCode();
      if (HasPattern) hash ^= Pattern.GetHashCode();
      if (HasPrefix) hash ^= Prefix.GetHashCode();
      if (HasSuffix) hash ^= Suffix.GetHashCode();
      if (HasContains) hash ^= Contains.GetHashCode();
      if (HasNotContains) hash ^= NotContains.GetHashCode();
      hash ^= in_.GetHashCode();
      hash ^= notIn_.GetHashCode();
      if (HasEmail) hash ^= Email.GetHashCode();
      if (HasHostname) hash ^= Hostname.GetHashCode();
      if (HasIp) hash ^= Ip.GetHashCode();
      if (HasIpv4) hash ^= Ipv4.GetHashCode();
      if (HasIpv6) hash ^= Ipv6.GetHashCode();
      if (HasUri) hash ^= Uri.GetHashCode();
      if (HasUriRef) hash ^= UriRef.GetHashCode();
      if (HasAddress) hash ^= Address.GetHashCode();
      if (HasUuid) hash ^= Uuid.GetHashCode();
      if (HasTuuid) hash ^= Tuuid.GetHashCode();
      if (HasIpWithPrefixlen) hash ^= IpWithPrefixlen.GetHashCode();
      if (HasIpv4WithPrefixlen) hash ^= Ipv4WithPrefixlen.GetHashCode();
      if (HasIpv6WithPrefixlen) hash ^= Ipv6WithPrefixlen.GetHashCode();
      if (HasIpPrefix) hash ^= IpPrefix.GetHashCode();
      if (HasIpv4Prefix) hash ^= Ipv4Prefix.GetHashCode();
      if (HasIpv6Prefix) hash ^= Ipv6Prefix.GetHashCode();
      if (HasHostAndPort) hash ^= HostAndPort.GetHashCode();
      if (HasWellKnownRegex) hash ^= WellKnownRegex.GetHashCode();
      if (HasStrict) hash ^= Strict.GetHashCode();
      hash ^= example_.GetHashCode();
      hash ^= (int) wellKnownCase_;
      if (_extensions != null) {
        hash ^= _extensions.GetHashCode();
      }
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasConst) {
        output.WriteRawTag(10);
        output.WriteString(Const);
      }
      if (HasMinLen) {
        output.WriteRawTag(16);
        output.WriteUInt64(MinLen);
      }
      if (HasMaxLen) {
        output.WriteRawTag(24);
        output.WriteUInt64(MaxLen);
      }
      if (HasMinBytes) {
        output.WriteRawTag(32);
        output.WriteUInt64(MinBytes);
      }
      if (HasMaxBytes) {
        output.WriteRawTag(40);
        output.WriteUInt64(MaxBytes);
      }
      if (HasPattern) {
        output.WriteRawTag(50);
        output.WriteString(Pattern);
      }
      if (HasPrefix) {
        output.WriteRawTag(58);
        output.WriteString(Prefix);
      }
      if (HasSuffix) {
        output.WriteRawTag(66);
        output.WriteString(Suffix);
      }
      if (HasContains) {
        output.WriteRawTag(74);
        output.WriteString(Contains);
      }
      in_.WriteTo(output, _repeated_in_codec);
      notIn_.WriteTo(output, _repeated_notIn_codec);
      if (HasEmail) {
        output.WriteRawTag(96);
        output.WriteBool(Email);
      }
      if (HasHostname) {
        output.WriteRawTag(104);
        output.WriteBool(Hostname);
      }
      if (HasIp) {
        output.WriteRawTag(112);
        output.WriteBool(Ip);
      }
      if (HasIpv4) {
        output.WriteRawTag(120);
        output.WriteBool(Ipv4);
      }
      if (HasIpv6) {
        output.WriteRawTag(128, 1);
        output.WriteBool(Ipv6);
      }
      if (HasUri) {
        output.WriteRawTag(136, 1);
        output.WriteBool(Uri);
      }
      if (HasUriRef) {
        output.WriteRawTag(144, 1);
        output.WriteBool(UriRef);
      }
      if (HasLen) {
        output.WriteRawTag(152, 1);
        output.WriteUInt64(Len);
      }
      if (HasLenBytes) {
        output.WriteRawTag(160, 1);
        output.WriteUInt64(LenBytes);
      }
      if (HasAddress) {
        output.WriteRawTag(168, 1);
        output.WriteBool(Address);
      }
      if (HasUuid) {
        output.WriteRawTag(176, 1);
        output.WriteBool(Uuid);
      }
      if (HasNotContains) {
        output.WriteRawTag(186, 1);
        output.WriteString(NotContains);
      }
      if (HasWellKnownRegex) {
        output.WriteRawTag(192, 1);
        output.WriteEnum((int) WellKnownRegex);
      }
      if (HasStrict) {
        output.WriteRawTag(200, 1);
        output.WriteBool(Strict);
      }
      if (HasIpWithPrefixlen) {
        output.WriteRawTag(208, 1);
        output.WriteBool(IpWithPrefixlen);
      }
      if (HasIpv4WithPrefixlen) {
        output.WriteRawTag(216, 1);
        output.WriteBool(Ipv4WithPrefixlen);
      }
      if (HasIpv6WithPrefixlen) {
        output.WriteRawTag(224, 1);
        output.WriteBool(Ipv6WithPrefixlen);
      }
      if (HasIpPrefix) {
        output.WriteRawTag(232, 1);
        output.WriteBool(IpPrefix);
      }
      if (HasIpv4Prefix) {
        output.WriteRawTag(240, 1);
        output.WriteBool(Ipv4Prefix);
      }
      if (HasIpv6Prefix) {
        output.WriteRawTag(248, 1);
        output.WriteBool(Ipv6Prefix);
      }
      if (HasHostAndPort) {
        output.WriteRawTag(128, 2);
        output.WriteBool(HostAndPort);
      }
      if (HasTuuid) {
        output.WriteRawTag(136, 2);
        output.WriteBool(Tuuid);
      }
      example_.WriteTo(output, _repeated_example_codec);
      if (_extensions != null) {
        _extensions.WriteTo(output);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasConst) {
        output.WriteRawTag(10);
        output.WriteString(Const);
      }
      if (HasMinLen) {
        output.WriteRawTag(16);
        output.WriteUInt64(MinLen);
      }
      if (HasMaxLen) {
        output.WriteRawTag(24);
        output.WriteUInt64(MaxLen);
      }
      if (HasMinBytes) {
        output.WriteRawTag(32);
        output.WriteUInt64(MinBytes);
      }
      if (HasMaxBytes) {
        output.WriteRawTag(40);
        output.WriteUInt64(MaxBytes);
      }
      if (HasPattern) {
        output.WriteRawTag(50);
        output.WriteString(Pattern);
      }
      if (HasPrefix) {
        output.WriteRawTag(58);
        output.WriteString(Prefix);
      }
      if (HasSuffix) {
        output.WriteRawTag(66);
        output.WriteString(Suffix);
      }
      if (HasContains) {
        output.WriteRawTag(74);
        output.WriteString(Contains);
      }
      in_.WriteTo(ref output, _repeated_in_codec);
      notIn_.WriteTo(ref output, _repeated_notIn_codec);
      if (HasEmail) {
        output.WriteRawTag(96);
        output.WriteBool(Email);
      }
      if (HasHostname) {
        output.WriteRawTag(104);
        output.WriteBool(Hostname);
      }
      if (HasIp) {
        output.WriteRawTag(112);
        output.WriteBool(Ip);
      }
      if (HasIpv4) {
        output.WriteRawTag(120);
        output.WriteBool(Ipv4);
      }
      if (HasIpv6) {
        output.WriteRawTag(128, 1);
        output.WriteBool(Ipv6);
      }
      if (HasUri) {
        output.WriteRawTag(136, 1);
        output.WriteBool(Uri);
      }
      if (HasUriRef) {
        output.WriteRawTag(144, 1);
        output.WriteBool(UriRef);
      }
      if (HasLen) {
        output.WriteRawTag(152, 1);
        output.WriteUInt64(Len);
      }
      if (HasLenBytes) {
        output.WriteRawTag(160, 1);
        output.WriteUInt64(LenBytes);
      }
      if (HasAddress) {
        output.WriteRawTag(168, 1);
        output.WriteBool(Address);
      }
      if (HasUuid) {
        output.WriteRawTag(176, 1);
        output.WriteBool(Uuid);
      }
      if (HasNotContains) {
        output.WriteRawTag(186, 1);
        output.WriteString(NotContains);
      }
      if (HasWellKnownRegex) {
        output.WriteRawTag(192, 1);
        output.WriteEnum((int) WellKnownRegex);
      }
      if (HasStrict) {
        output.WriteRawTag(200, 1);
        output.WriteBool(Strict);
      }
      if (HasIpWithPrefixlen) {
        output.WriteRawTag(208, 1);
        output.WriteBool(IpWithPrefixlen);
      }
      if (HasIpv4WithPrefixlen) {
        output.WriteRawTag(216, 1);
        output.WriteBool(Ipv4WithPrefixlen);
      }
      if (HasIpv6WithPrefixlen) {
        output.WriteRawTag(224, 1);
        output.WriteBool(Ipv6WithPrefixlen);
      }
      if (HasIpPrefix) {
        output.WriteRawTag(232, 1);
        output.WriteBool(IpPrefix);
      }
      if (HasIpv4Prefix) {
        output.WriteRawTag(240, 1);
        output.WriteBool(Ipv4Prefix);
      }
      if (HasIpv6Prefix) {
        output.WriteRawTag(248, 1);
        output.WriteBool(Ipv6Prefix);
      }
      if (HasHostAndPort) {
        output.WriteRawTag(128, 2);
        output.WriteBool(HostAndPort);
      }
      if (HasTuuid) {
        output.WriteRawTag(136, 2);
        output.WriteBool(Tuuid);
      }
      example_.WriteTo(ref output, _repeated_example_codec);
      if (_extensions != null) {
        _extensions.WriteTo(ref output);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasConst) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Const);
      }
      if (HasLen) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(Len);
      }
      if (HasMinLen) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MinLen);
      }
      if (HasMaxLen) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MaxLen);
      }
      if (HasLenBytes) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(LenBytes);
      }
      if (HasMinBytes) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MinBytes);
      }
      if (HasMaxBytes) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MaxBytes);
      }
      if (HasPattern) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Pattern);
      }
      if (HasPrefix) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Prefix);
      }
      if (HasSuffix) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Suffix);
      }
      if (HasContains) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Contains);
      }
      if (HasNotContains) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(NotContains);
      }
      size += in_.CalculateSize(_repeated_in_codec);
      size += notIn_.CalculateSize(_repeated_notIn_codec);
      if (HasEmail) {
        size += 1 + 1;
      }
      if (HasHostname) {
        size += 1 + 1;
      }
      if (HasIp) {
        size += 1 + 1;
      }
      if (HasIpv4) {
        size += 1 + 1;
      }
      if (HasIpv6) {
        size += 2 + 1;
      }
      if (HasUri) {
        size += 2 + 1;
      }
      if (HasUriRef) {
        size += 2 + 1;
      }
      if (HasAddress) {
        size += 2 + 1;
      }
      if (HasUuid) {
        size += 2 + 1;
      }
      if (HasTuuid) {
        size += 2 + 1;
      }
      if (HasIpWithPrefixlen) {
        size += 2 + 1;
      }
      if (HasIpv4WithPrefixlen) {
        size += 2 + 1;
      }
      if (HasIpv6WithPrefixlen) {
        size += 2 + 1;
      }
      if (HasIpPrefix) {
        size += 2 + 1;
      }
      if (HasIpv4Prefix) {
        size += 2 + 1;
      }
      if (HasIpv6Prefix) {
        size += 2 + 1;
      }
      if (HasHostAndPort) {
        size += 2 + 1;
      }
      if (HasWellKnownRegex) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) WellKnownRegex);
      }
      if (HasStrict) {
        size += 2 + 1;
      }
      size += example_.CalculateSize(_repeated_example_codec);
      if (_extensions != null) {
        size += _extensions.CalculateSize();
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(StringRules other) {
      if (other == null) {
        return;
      }
      if (other.HasConst) {
        Const = other.Const;
      }
      if (other.HasLen) {
        Len = other.Len;
      }
      if (other.HasMinLen) {
        MinLen = other.MinLen;
      }
      if (other.HasMaxLen) {
        MaxLen = other.MaxLen;
      }
      if (other.HasLenBytes) {
        LenBytes = other.LenBytes;
      }
      if (other.HasMinBytes) {
        MinBytes = other.MinBytes;
      }
      if (other.HasMaxBytes) {
        MaxBytes = other.MaxBytes;
      }
      if (other.HasPattern) {
        Pattern = other.Pattern;
      }
      if (other.HasPrefix) {
        Prefix = other.Prefix;
      }
      if (other.HasSuffix) {
        Suffix = other.Suffix;
      }
      if (other.HasContains) {
        Contains = other.Contains;
      }
      if (other.HasNotContains) {
        NotContains = other.NotContains;
      }
      in_.Add(other.in_);
      notIn_.Add(other.notIn_);
      if (other.HasStrict) {
        Strict = other.Strict;
      }
      example_.Add(other.example_);
      switch (other.WellKnownCase) {
        case WellKnownOneofCase.Email:
          Email = other.Email;
          break;
        case WellKnownOneofCase.Hostname:
          Hostname = other.Hostname;
          break;
        case WellKnownOneofCase.Ip:
          Ip = other.Ip;
          break;
        case WellKnownOneofCase.Ipv4:
          Ipv4 = other.Ipv4;
          break;
        case WellKnownOneofCase.Ipv6:
          Ipv6 = other.Ipv6;
          break;
        case WellKnownOneofCase.Uri:
          Uri = other.Uri;
          break;
        case WellKnownOneofCase.UriRef:
          UriRef = other.UriRef;
          break;
        case WellKnownOneofCase.Address:
          Address = other.Address;
          break;
        case WellKnownOneofCase.Uuid:
          Uuid = other.Uuid;
          break;
        case WellKnownOneofCase.Tuuid:
          Tuuid = other.Tuuid;
          break;
        case WellKnownOneofCase.IpWithPrefixlen:
          IpWithPrefixlen = other.IpWithPrefixlen;
          break;
        case WellKnownOneofCase.Ipv4WithPrefixlen:
          Ipv4WithPrefixlen = other.Ipv4WithPrefixlen;
          break;
        case WellKnownOneofCase.Ipv6WithPrefixlen:
          Ipv6WithPrefixlen = other.Ipv6WithPrefixlen;
          break;
        case WellKnownOneofCase.IpPrefix:
          IpPrefix = other.IpPrefix;
          break;
        case WellKnownOneofCase.Ipv4Prefix:
          Ipv4Prefix = other.Ipv4Prefix;
          break;
        case WellKnownOneofCase.Ipv6Prefix:
          Ipv6Prefix = other.Ipv6Prefix;
          break;
        case WellKnownOneofCase.HostAndPort:
          HostAndPort = other.HostAndPort;
          break;
        case WellKnownOneofCase.WellKnownRegex:
          WellKnownRegex = other.WellKnownRegex;
          break;
      }

      pb::ExtensionSet.MergeFrom(ref _extensions, other._extensions);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            if (!pb::ExtensionSet.TryMergeFieldFrom(ref _extensions, input)) {
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            }
            break;
          case 10: {
            Const = input.ReadString();
            break;
          }
          case 16: {
            MinLen = input.ReadUInt64();
            break;
          }
          case 24: {
            MaxLen = input.ReadUInt64();
            break;
          }
          case 32: {
            MinBytes = input.ReadUInt64();
            break;
          }
          case 40: {
            MaxBytes = input.ReadUInt64();
            break;
          }
          case 50: {
            Pattern = input.ReadString();
            break;
          }
          case 58: {
            Prefix = input.ReadString();
            break;
          }
          case 66: {
            Suffix = input.ReadString();
            break;
          }
          case 74: {
            Contains = input.ReadString();
            break;
          }
          case 82: {
            in_.AddEntriesFrom(input, _repeated_in_codec);
            break;
          }
          case 90: {
            notIn_.AddEntriesFrom(input, _repeated_notIn_codec);
            break;
          }
          case 96: {
            Email = input.ReadBool();
            break;
          }
          case 104: {
            Hostname = input.ReadBool();
            break;
          }
          case 112: {
            Ip = input.ReadBool();
            break;
          }
          case 120: {
            Ipv4 = input.ReadBool();
            break;
          }
          case 128: {
            Ipv6 = input.ReadBool();
            break;
          }
          case 136: {
            Uri = input.ReadBool();
            break;
          }
          case 144: {
            UriRef = input.ReadBool();
            break;
          }
          case 152: {
            Len = input.ReadUInt64();
            break;
          }
          case 160: {
            LenBytes = input.ReadUInt64();
            break;
          }
          case 168: {
            Address = input.ReadBool();
            break;
          }
          case 176: {
            Uuid = input.ReadBool();
            break;
          }
          case 186: {
            NotContains = input.ReadString();
            break;
          }
          case 192: {
            wellKnown_ = input.ReadEnum();
            wellKnownCase_ = WellKnownOneofCase.WellKnownRegex;
            break;
          }
          case 200: {
            Strict = input.ReadBool();
            break;
          }
          case 208: {
            IpWithPrefixlen = input.ReadBool();
            break;
          }
          case 216: {
            Ipv4WithPrefixlen = input.ReadBool();
            break;
          }
          case 224: {
            Ipv6WithPrefixlen = input.ReadBool();
            break;
          }
          case 232: {
            IpPrefix = input.ReadBool();
            break;
          }
          case 240: {
            Ipv4Prefix = input.ReadBool();
            break;
          }
          case 248: {
            Ipv6Prefix = input.ReadBool();
            break;
          }
          case 256: {
            HostAndPort = input.ReadBool();
            break;
          }
          case 264: {
            Tuuid = input.ReadBool();
            break;
          }
          case 274: {
            example_.AddEntriesFrom(input, _repeated_example_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            if (!pb::ExtensionSet.TryMergeFieldFrom(ref _extensions, ref input)) {
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            }
            break;
          case 10: {
            Const = input.ReadString();
            break;
          }
          case 16: {
            MinLen = input.ReadUInt64();
            break;
          }
          case 24: {
            MaxLen = input.ReadUInt64();
            break;
          }
          case 32: {
            MinBytes = input.ReadUInt64();
            break;
          }
          case 40: {
            MaxBytes = input.ReadUInt64();
            break;
          }
          case 50: {
            Pattern = input.ReadString();
            break;
          }
          case 58: {
            Prefix = input.ReadString();
            break;
          }
          case 66: {
            Suffix = input.ReadString();
            break;
          }
          case 74: {
            Contains = input.ReadString();
            break;
          }
          case 82: {
            in_.AddEntriesFrom(ref input, _repeated_in_codec);
            break;
          }
          case 90: {
            notIn_.AddEntriesFrom(ref input, _repeated_notIn_codec);
            break;
          }
          case 96: {
            Email = input.ReadBool();
            break;
          }
          case 104: {
            Hostname = input.ReadBool();
            break;
          }
          case 112: {
            Ip = input.ReadBool();
            break;
          }
          case 120: {
            Ipv4 = input.ReadBool();
            break;
          }
          case 128: {
            Ipv6 = input.ReadBool();
            break;
          }
          case 136: {
            Uri = input.ReadBool();
            break;
          }
          case 144: {
            UriRef = input.ReadBool();
            break;
          }
          case 152: {
            Len = input.ReadUInt64();
            break;
          }
          case 160: {
            LenBytes = input.ReadUInt64();
            break;
          }
          case 168: {
            Address = input.ReadBool();
            break;
          }
          case 176: {
            Uuid = input.ReadBool();
            break;
          }
          case 186: {
            NotContains = input.ReadString();
            break;
          }
          case 192: {
            wellKnown_ = input.ReadEnum();
            wellKnownCase_ = WellKnownOneofCase.WellKnownRegex;
            break;
          }
          case 200: {
            Strict = input.ReadBool();
            break;
          }
          case 208: {
            IpWithPrefixlen = input.ReadBool();
            break;
          }
          case 216: {
            Ipv4WithPrefixlen = input.ReadBool();
            break;
          }
          case 224: {
            Ipv6WithPrefixlen = input.ReadBool();
            break;
          }
          case 232: {
            IpPrefix = input.ReadBool();
            break;
          }
          case 240: {
            Ipv4Prefix = input.ReadBool();
            break;
          }
          case 248: {
            Ipv6Prefix = input.ReadBool();
            break;
          }
          case 256: {
            HostAndPort = input.ReadBool();
            break;
          }
          case 264: {
            Tuuid = input.ReadBool();
            break;
          }
          case 274: {
            example_.AddEntriesFrom(ref input, _repeated_example_codec);
            break;
          }
        }
      }
    }
    #endif

    public TValue GetExtension<TValue>(pb::Extension<StringRules, TValue> extension) {
      return pb::ExtensionSet.Get(ref _extensions, extension);
    }
    public pbc::RepeatedField<TValue> GetExtension<TValue>(pb::RepeatedExtension<StringRules, TValue> extension) {
      return pb::ExtensionSet.Get(ref _extensions, extension);
    }
    public pbc::RepeatedField<TValue> GetOrInitializeExtension<TValue>(pb::RepeatedExtension<StringRules, TValue> extension) {
      return pb::ExtensionSet.GetOrInitialize(ref _extensions, extension);
    }
    public void SetExtension<TValue>(pb::Extension<StringRules, TValue> extension, TValue value) {
      pb::ExtensionSet.Set(ref _extensions, extension, value);
    }
    public bool HasExtension<TValue>(pb::Extension<StringRules, TValue> extension) {
      return pb::ExtensionSet.Has(ref _extensions, extension);
    }
    public void ClearExtension<TValue>(pb::Extension<StringRules, TValue> extension) {
      pb::ExtensionSet.Clear(ref _extensions, extension);
    }
    public void ClearExtension<TValue>(pb::RepeatedExtension<StringRules, TValue> extension) {
      pb::ExtensionSet.Clear(ref _extensions, extension);
    }

  }

  /// <summary>
  /// BytesRules describe the rules applied to `bytes` values. These rules
  /// may also be applied to the `google.protobuf.BytesValue` Well-Known-Type.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class BytesRules : pb::IExtendableMessage<BytesRules>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BytesRules> _parser = new pb::MessageParser<BytesRules>(() => new BytesRules());
    private pb::UnknownFieldSet _unknownFields;
    private pb::ExtensionSet<BytesRules> _extensions;
    private pb::ExtensionSet<BytesRules> _Extensions { get { return _extensions; } }
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<BytesRules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Buf.Validate.ValidateReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BytesRules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BytesRules(BytesRules other) : this() {
      _hasBits0 = other._hasBits0;
      const_ = other.const_;
      len_ = other.len_;
      minLen_ = other.minLen_;
      maxLen_ = other.maxLen_;
      pattern_ = other.pattern_;
      prefix_ = other.prefix_;
      suffix_ = other.suffix_;
      contains_ = other.contains_;
      in_ = other.in_.Clone();
      notIn_ = other.notIn_.Clone();
      example_ = other.example_.Clone();
      switch (other.WellKnownCase) {
        case WellKnownOneofCase.Ip:
          Ip = other.Ip;
          break;
        case WellKnownOneofCase.Ipv4:
          Ipv4 = other.Ipv4;
          break;
        case WellKnownOneofCase.Ipv6:
          Ipv6 = other.Ipv6;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      _extensions = pb::ExtensionSet.Clone(other._extensions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BytesRules Clone() {
      return new BytesRules(this);
    }

    /// <summary>Field number for the "const" field.</summary>
    public const int ConstFieldNumber = 1;
    private readonly static pb::ByteString ConstDefaultValue = pb::ByteString.Empty;

    private pb::ByteString const_;
    /// <summary>
    /// `const` requires the field value to exactly match the specified bytes
    /// value. If the field value doesn't match, an error message is generated.
    ///
    /// ```proto
    /// message MyBytes {
    ///   // value must be "\x01\x02\x03\x04"
    ///   bytes value = 1 [(buf.validate.field).bytes.const = "\x01\x02\x03\x04"];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString Const {
      get { return const_ ?? ConstDefaultValue; }
      set {
        const_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "const" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasConst {
      get { return const_ != null; }
    }
    /// <summary>Clears the value of the "const" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearConst() {
      const_ = null;
    }

    /// <summary>Field number for the "len" field.</summary>
    public const int LenFieldNumber = 13;
    private readonly static ulong LenDefaultValue = 0UL;

    private ulong len_;
    /// <summary>
    /// `len` requires the field value to have the specified length in bytes.
    /// If the field value doesn't match, an error message is generated.
    ///
    /// ```proto
    /// message MyBytes {
    ///   // value length must be 4 bytes.
    ///   optional bytes value = 1 [(buf.validate.field).bytes.len = 4];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong Len {
      get { if ((_hasBits0 & 4) != 0) { return len_; } else { return LenDefaultValue; } }
      set {
        _hasBits0 |= 4;
        len_ = value;
      }
    }
    /// <summary>Gets whether the "len" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLen {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "len" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLen() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "min_len" field.</summary>
    public const int MinLenFieldNumber = 2;
    private readonly static ulong MinLenDefaultValue = 0UL;

    private ulong minLen_;
    /// <summary>
    /// `min_len` requires the field value to have at least the specified minimum
    /// length in bytes.
    /// If the field value doesn't meet the requirement, an error message is generated.
    ///
    /// ```proto
    /// message MyBytes {
    ///   // value length must be at least 2 bytes.
    ///   optional bytes value = 1 [(buf.validate.field).bytes.min_len = 2];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong MinLen {
      get { if ((_hasBits0 & 1) != 0) { return minLen_; } else { return MinLenDefaultValue; } }
      set {
        _hasBits0 |= 1;
        minLen_ = value;
      }
    }
    /// <summary>Gets whether the "min_len" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMinLen {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "min_len" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMinLen() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "max_len" field.</summary>
    public const int MaxLenFieldNumber = 3;
    private readonly static ulong MaxLenDefaultValue = 0UL;

    private ulong maxLen_;
    /// <summary>
    /// `max_len` requires the field value to have at most the specified maximum
    /// length in bytes.
    /// If the field value exceeds the requirement, an error message is generated.
    ///
    /// ```proto
    /// message MyBytes {
    ///   // value must be at most 6 bytes.
    ///   optional bytes value = 1 [(buf.validate.field).bytes.max_len = 6];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong MaxLen {
      get { if ((_hasBits0 & 2) != 0) { return maxLen_; } else { return MaxLenDefaultValue; } }
      set {
        _hasBits0 |= 2;
        maxLen_ = value;
      }
    }
    /// <summary>Gets whether the "max_len" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaxLen {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "max_len" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaxLen() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "pattern" field.</summary>
    public const int PatternFieldNumber = 4;
    private readonly static string PatternDefaultValue = "";

    private string pattern_;
    /// <summary>
    /// `pattern` requires the field value to match the specified regular
    /// expression ([RE2 syntax](https://github.com/google/re2/wiki/Syntax)).
    /// The value of the field must be valid UTF-8 or validation will fail with a
    /// runtime error.
    /// If the field value doesn't match the pattern, an error message is generated.
    ///
    /// ```proto
    /// message MyBytes {
    ///   // value must match regex pattern "^[a-zA-Z0-9]+$".
    ///   optional bytes value = 1 [(buf.validate.field).bytes.pattern = "^[a-zA-Z0-9]+$"];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Pattern {
      get { return pattern_ ?? PatternDefaultValue; }
      set {
        pattern_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "pattern" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPattern {
      get { return pattern_ != null; }
    }
    /// <summary>Clears the value of the "pattern" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPattern() {
      pattern_ = null;
    }

    /// <summary>Field number for the "prefix" field.</summary>
    public const int PrefixFieldNumber = 5;
    private readonly static pb::ByteString PrefixDefaultValue = pb::ByteString.Empty;

    private pb::ByteString prefix_;
    /// <summary>
    /// `prefix` requires the field value to have the specified bytes at the
    /// beginning of the string.
    /// If the field value doesn't meet the requirement, an error message is generated.
    ///
    /// ```proto
    /// message MyBytes {
    ///   // value does not have prefix \x01\x02
    ///   optional bytes value = 1 [(buf.validate.field).bytes.prefix = "\x01\x02"];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString Prefix {
      get { return prefix_ ?? PrefixDefaultValue; }
      set {
        prefix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "prefix" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPrefix {
      get { return prefix_ != null; }
    }
    /// <summary>Clears the value of the "prefix" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPrefix() {
      prefix_ = null;
    }

    /// <summary>Field number for the "suffix" field.</summary>
    public const int SuffixFieldNumber = 6;
    private readonly static pb::ByteString SuffixDefaultValue = pb::ByteString.Empty;

    private pb::ByteString suffix_;
    /// <summary>
    /// `suffix` requires the field value to have the specified bytes at the end
    /// of the string.
    /// If the field value doesn't meet the requirement, an error message is generated.
    ///
    /// ```proto
    /// message MyBytes {
    ///   // value does not have suffix \x03\x04
    ///   optional bytes value = 1 [(buf.validate.field).bytes.suffix = "\x03\x04"];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString Suffix {
      get { return suffix_ ?? SuffixDefaultValue; }
      set {
        suffix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "suffix" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSuffix {
      get { return suffix_ != null; }
    }
    /// <summary>Clears the value of the "suffix" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSuffix() {
      suffix_ = null;
    }

    /// <summary>Field number for the "contains" field.</summary>
    public const int ContainsFieldNumber = 7;
    private readonly static pb::ByteString ContainsDefaultValue = pb::ByteString.Empty;

    private pb::ByteString contains_;
    /// <summary>
    /// `contains` requires the field value to have the specified bytes anywhere in
    /// the string.
    /// If the field value doesn't meet the requirement, an error message is generated.
    ///
    /// ```protobuf
    /// message MyBytes {
    ///   // value does not contain \x02\x03
    ///   optional bytes value = 1 [(buf.validate.field).bytes.contains = "\x02\x03"];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString Contains {
      get { return contains_ ?? ContainsDefaultValue; }
      set {
        contains_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "contains" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasContains {
      get { return contains_ != null; }
    }
    /// <summary>Clears the value of the "contains" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearContains() {
      contains_ = null;
    }

    /// <summary>Field number for the "in" field.</summary>
    public const int InFieldNumber = 8;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_in_codec
        = pb::FieldCodec.ForBytes(66);
    private readonly pbc::RepeatedField<pb::ByteString> in_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    /// `in` requires the field value to be equal to one of the specified
    /// values. If the field value doesn't match any of the specified values, an
    /// error message is generated.
    ///
    /// ```protobuf
    /// message MyBytes {
    ///   // value must in ["\x01\x02", "\x02\x03", "\x03\x04"]
    ///   optional bytes value = 1 [(buf.validate.field).bytes.in = {"\x01\x02", "\x02\x03", "\x03\x04"}];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<pb::ByteString> In {
      get { return in_; }
    }

    /// <summary>Field number for the "not_in" field.</summary>
    public const int NotInFieldNumber = 9;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_notIn_codec
        = pb::FieldCodec.ForBytes(74);
    private readonly pbc::RepeatedField<pb::ByteString> notIn_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    /// `not_in` requires the field value to be not equal to any of the specified
    /// values.
    /// If the field value matches any of the specified values, an error message is
    /// generated.
    ///
    /// ```proto
    /// message MyBytes {
    ///   // value must not in ["\x01\x02", "\x02\x03", "\x03\x04"]
    ///   optional bytes value = 1 [(buf.validate.field).bytes.not_in = {"\x01\x02", "\x02\x03", "\x03\x04"}];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<pb::ByteString> NotIn {
      get { return notIn_; }
    }

    /// <summary>Field number for the "ip" field.</summary>
    public const int IpFieldNumber = 10;
    /// <summary>
    /// `ip` ensures that the field `value` is a valid IP address (v4 or v6) in byte format.
    /// If the field value doesn't meet this rule, an error message is generated.
    ///
    /// ```proto
    /// message MyBytes {
    ///   // value must be a valid IP address
    ///   optional bytes value = 1 [(buf.validate.field).bytes.ip = true];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Ip {
      get { return HasIp ? (bool) wellKnown_ : false; }
      set {
        wellKnown_ = value;
        wellKnownCase_ = WellKnownOneofCase.Ip;
      }
    }
    /// <summary>Gets whether the "ip" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIp {
      get { return wellKnownCase_ == WellKnownOneofCase.Ip; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "ip" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIp() {
      if (HasIp) {
        ClearWellKnown();
      }
    }

    /// <summary>Field number for the "ipv4" field.</summary>
    public const int Ipv4FieldNumber = 11;
    /// <summary>
    /// `ipv4` ensures that the field `value` is a valid IPv4 address in byte format.
    /// If the field value doesn't meet this rule, an error message is generated.
    ///
    /// ```proto
    /// message MyBytes {
    ///   // value must be a valid IPv4 address
    ///   optional bytes value = 1 [(buf.validate.field).bytes.ipv4 = true];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Ipv4 {
      get { return HasIpv4 ? (bool) wellKnown_ : false; }
      set {
        wellKnown_ = value;
        wellKnownCase_ = WellKnownOneofCase.Ipv4;
      }
    }
    /// <summary>Gets whether the "ipv4" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIpv4 {
      get { return wellKnownCase_ == WellKnownOneofCase.Ipv4; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "ipv4" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIpv4() {
      if (HasIpv4) {
        ClearWellKnown();
      }
    }

    /// <summary>Field number for the "ipv6" field.</summary>
    public const int Ipv6FieldNumber = 12;
    /// <summary>
    /// `ipv6` ensures that the field `value` is a valid IPv6 address in byte format.
    /// If the field value doesn't meet this rule, an error message is generated.
    /// ```proto
    /// message MyBytes {
    ///   // value must be a valid IPv6 address
    ///   optional bytes value = 1 [(buf.validate.field).bytes.ipv6 = true];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Ipv6 {
      get { return HasIpv6 ? (bool) wellKnown_ : false; }
      set {
        wellKnown_ = value;
        wellKnownCase_ = WellKnownOneofCase.Ipv6;
      }
    }
    /// <summary>Gets whether the "ipv6" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIpv6 {
      get { return wellKnownCase_ == WellKnownOneofCase.Ipv6; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "ipv6" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIpv6() {
      if (HasIpv6) {
        ClearWellKnown();
      }
    }

    /// <summary>Field number for the "example" field.</summary>
    public const int ExampleFieldNumber = 14;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_example_codec
        = pb::FieldCodec.ForBytes(114);
    private readonly pbc::RepeatedField<pb::ByteString> example_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    /// `example` specifies values that the field may have. These values SHOULD
    /// conform to other rules. `example` values will not impact validation
    /// but may be used as helpful guidance on how to populate the given field.
    ///
    /// ```proto
    /// message MyBytes {
    ///   bytes value = 1 [
    ///     (buf.validate.field).bytes.example = "\x01\x02",
    ///     (buf.validate.field).bytes.example = "\x02\x03"
    ///   ];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<pb::ByteString> Example {
      get { return example_; }
    }

    private object wellKnown_;
    /// <summary>Enum of possible cases for the "well_known" oneof.</summary>
    public enum WellKnownOneofCase {
      None = 0,
      Ip = 10,
      Ipv4 = 11,
      Ipv6 = 12,
    }
    private WellKnownOneofCase wellKnownCase_ = WellKnownOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public WellKnownOneofCase WellKnownCase {
      get { return wellKnownCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearWellKnown() {
      wellKnownCase_ = WellKnownOneofCase.None;
      wellKnown_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as BytesRules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(BytesRules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Const != other.Const) return false;
      if (Len != other.Len) return false;
      if (MinLen != other.MinLen) return false;
      if (MaxLen != other.MaxLen) return false;
      if (Pattern != other.Pattern) return false;
      if (Prefix != other.Prefix) return false;
      if (Suffix != other.Suffix) return false;
      if (Contains != other.Contains) return false;
      if(!in_.Equals(other.in_)) return false;
      if(!notIn_.Equals(other.notIn_)) return false;
      if (Ip != other.Ip) return false;
      if (Ipv4 != other.Ipv4) return false;
      if (Ipv6 != other.Ipv6) return false;
      if(!example_.Equals(other.example_)) return false;
      if (WellKnownCase != other.WellKnownCase) return false;
      if (!Equals(_extensions, other._extensions)) {
        return false;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasConst) hash ^= Const.GetHashCode();
      if (HasLen) hash ^= Len.GetHashCode();
      if (HasMinLen) hash ^= MinLen.GetHashCode();
      if (HasMaxLen) hash ^= MaxLen.GetHashCode();
      if (HasPattern) hash ^= Pattern.GetHashCode();
      if (HasPrefix) hash ^= Prefix.GetHashCode();
      if (HasSuffix) hash ^= Suffix.GetHashCode();
      if (HasContains) hash ^= Contains.GetHashCode();
      hash ^= in_.GetHashCode();
      hash ^= notIn_.GetHashCode();
      if (HasIp) hash ^= Ip.GetHashCode();
      if (HasIpv4) hash ^= Ipv4.GetHashCode();
      if (HasIpv6) hash ^= Ipv6.GetHashCode();
      hash ^= example_.GetHashCode();
      hash ^= (int) wellKnownCase_;
      if (_extensions != null) {
        hash ^= _extensions.GetHashCode();
      }
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasConst) {
        output.WriteRawTag(10);
        output.WriteBytes(Const);
      }
      if (HasMinLen) {
        output.WriteRawTag(16);
        output.WriteUInt64(MinLen);
      }
      if (HasMaxLen) {
        output.WriteRawTag(24);
        output.WriteUInt64(MaxLen);
      }
      if (HasPattern) {
        output.WriteRawTag(34);
        output.WriteString(Pattern);
      }
      if (HasPrefix) {
        output.WriteRawTag(42);
        output.WriteBytes(Prefix);
      }
      if (HasSuffix) {
        output.WriteRawTag(50);
        output.WriteBytes(Suffix);
      }
      if (HasContains) {
        output.WriteRawTag(58);
        output.WriteBytes(Contains);
      }
      in_.WriteTo(output, _repeated_in_codec);
      notIn_.WriteTo(output, _repeated_notIn_codec);
      if (HasIp) {
        output.WriteRawTag(80);
        output.WriteBool(Ip);
      }
      if (HasIpv4) {
        output.WriteRawTag(88);
        output.WriteBool(Ipv4);
      }
      if (HasIpv6) {
        output.WriteRawTag(96);
        output.WriteBool(Ipv6);
      }
      if (HasLen) {
        output.WriteRawTag(104);
        output.WriteUInt64(Len);
      }
      example_.WriteTo(output, _repeated_example_codec);
      if (_extensions != null) {
        _extensions.WriteTo(output);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasConst) {
        output.WriteRawTag(10);
        output.WriteBytes(Const);
      }
      if (HasMinLen) {
        output.WriteRawTag(16);
        output.WriteUInt64(MinLen);
      }
      if (HasMaxLen) {
        output.WriteRawTag(24);
        output.WriteUInt64(MaxLen);
      }
      if (HasPattern) {
        output.WriteRawTag(34);
        output.WriteString(Pattern);
      }
      if (HasPrefix) {
        output.WriteRawTag(42);
        output.WriteBytes(Prefix);
      }
      if (HasSuffix) {
        output.WriteRawTag(50);
        output.WriteBytes(Suffix);
      }
      if (HasContains) {
        output.WriteRawTag(58);
        output.WriteBytes(Contains);
      }
      in_.WriteTo(ref output, _repeated_in_codec);
      notIn_.WriteTo(ref output, _repeated_notIn_codec);
      if (HasIp) {
        output.WriteRawTag(80);
        output.WriteBool(Ip);
      }
      if (HasIpv4) {
        output.WriteRawTag(88);
        output.WriteBool(Ipv4);
      }
      if (HasIpv6) {
        output.WriteRawTag(96);
        output.WriteBool(Ipv6);
      }
      if (HasLen) {
        output.WriteRawTag(104);
        output.WriteUInt64(Len);
      }
      example_.WriteTo(ref output, _repeated_example_codec);
      if (_extensions != null) {
        _extensions.WriteTo(ref output);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasConst) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Const);
      }
      if (HasLen) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Len);
      }
      if (HasMinLen) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MinLen);
      }
      if (HasMaxLen) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MaxLen);
      }
      if (HasPattern) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Pattern);
      }
      if (HasPrefix) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Prefix);
      }
      if (HasSuffix) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Suffix);
      }
      if (HasContains) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Contains);
      }
      size += in_.CalculateSize(_repeated_in_codec);
      size += notIn_.CalculateSize(_repeated_notIn_codec);
      if (HasIp) {
        size += 1 + 1;
      }
      if (HasIpv4) {
        size += 1 + 1;
      }
      if (HasIpv6) {
        size += 1 + 1;
      }
      size += example_.CalculateSize(_repeated_example_codec);
      if (_extensions != null) {
        size += _extensions.CalculateSize();
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(BytesRules other) {
      if (other == null) {
        return;
      }
      if (other.HasConst) {
        Const = other.Const;
      }
      if (other.HasLen) {
        Len = other.Len;
      }
      if (other.HasMinLen) {
        MinLen = other.MinLen;
      }
      if (other.HasMaxLen) {
        MaxLen = other.MaxLen;
      }
      if (other.HasPattern) {
        Pattern = other.Pattern;
      }
      if (other.HasPrefix) {
        Prefix = other.Prefix;
      }
      if (other.HasSuffix) {
        Suffix = other.Suffix;
      }
      if (other.HasContains) {
        Contains = other.Contains;
      }
      in_.Add(other.in_);
      notIn_.Add(other.notIn_);
      example_.Add(other.example_);
      switch (other.WellKnownCase) {
        case WellKnownOneofCase.Ip:
          Ip = other.Ip;
          break;
        case WellKnownOneofCase.Ipv4:
          Ipv4 = other.Ipv4;
          break;
        case WellKnownOneofCase.Ipv6:
          Ipv6 = other.Ipv6;
          break;
      }

      pb::ExtensionSet.MergeFrom(ref _extensions, other._extensions);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            if (!pb::ExtensionSet.TryMergeFieldFrom(ref _extensions, input)) {
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            }
            break;
          case 10: {
            Const = input.ReadBytes();
            break;
          }
          case 16: {
            MinLen = input.ReadUInt64();
            break;
          }
          case 24: {
            MaxLen = input.ReadUInt64();
            break;
          }
          case 34: {
            Pattern = input.ReadString();
            break;
          }
          case 42: {
            Prefix = input.ReadBytes();
            break;
          }
          case 50: {
            Suffix = input.ReadBytes();
            break;
          }
          case 58: {
            Contains = input.ReadBytes();
            break;
          }
          case 66: {
            in_.AddEntriesFrom(input, _repeated_in_codec);
            break;
          }
          case 74: {
            notIn_.AddEntriesFrom(input, _repeated_notIn_codec);
            break;
          }
          case 80: {
            Ip = input.ReadBool();
            break;
          }
          case 88: {
            Ipv4 = input.ReadBool();
            break;
          }
          case 96: {
            Ipv6 = input.ReadBool();
            break;
          }
          case 104: {
            Len = input.ReadUInt64();
            break;
          }
          case 114: {
            example_.AddEntriesFrom(input, _repeated_example_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            if (!pb::ExtensionSet.TryMergeFieldFrom(ref _extensions, ref input)) {
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            }
            break;
          case 10: {
            Const = input.ReadBytes();
            break;
          }
          case 16: {
            MinLen = input.ReadUInt64();
            break;
          }
          case 24: {
            MaxLen = input.ReadUInt64();
            break;
          }
          case 34: {
            Pattern = input.ReadString();
            break;
          }
          case 42: {
            Prefix = input.ReadBytes();
            break;
          }
          case 50: {
            Suffix = input.ReadBytes();
            break;
          }
          case 58: {
            Contains = input.ReadBytes();
            break;
          }
          case 66: {
            in_.AddEntriesFrom(ref input, _repeated_in_codec);
            break;
          }
          case 74: {
            notIn_.AddEntriesFrom(ref input, _repeated_notIn_codec);
            break;
          }
          case 80: {
            Ip = input.ReadBool();
            break;
          }
          case 88: {
            Ipv4 = input.ReadBool();
            break;
          }
          case 96: {
            Ipv6 = input.ReadBool();
            break;
          }
          case 104: {
            Len = input.ReadUInt64();
            break;
          }
          case 114: {
            example_.AddEntriesFrom(ref input, _repeated_example_codec);
            break;
          }
        }
      }
    }
    #endif

    public TValue GetExtension<TValue>(pb::Extension<BytesRules, TValue> extension) {
      return pb::ExtensionSet.Get(ref _extensions, extension);
    }
    public pbc::RepeatedField<TValue> GetExtension<TValue>(pb::RepeatedExtension<BytesRules, TValue> extension) {
      return pb::ExtensionSet.Get(ref _extensions, extension);
    }
    public pbc::RepeatedField<TValue> GetOrInitializeExtension<TValue>(pb::RepeatedExtension<BytesRules, TValue> extension) {
      return pb::ExtensionSet.GetOrInitialize(ref _extensions, extension);
    }
    public void SetExtension<TValue>(pb::Extension<BytesRules, TValue> extension, TValue value) {
      pb::ExtensionSet.Set(ref _extensions, extension, value);
    }
    public bool HasExtension<TValue>(pb::Extension<BytesRules, TValue> extension) {
      return pb::ExtensionSet.Has(ref _extensions, extension);
    }
    public void ClearExtension<TValue>(pb::Extension<BytesRules, TValue> extension) {
      pb::ExtensionSet.Clear(ref _extensions, extension);
    }
    public void ClearExtension<TValue>(pb::RepeatedExtension<BytesRules, TValue> extension) {
      pb::ExtensionSet.Clear(ref _extensions, extension);
    }

  }

  /// <summary>
  /// EnumRules describe the rules applied to `enum` values.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class EnumRules : pb::IExtendableMessage<EnumRules>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EnumRules> _parser = new pb::MessageParser<EnumRules>(() => new EnumRules());
    private pb::UnknownFieldSet _unknownFields;
    private pb::ExtensionSet<EnumRules> _extensions;
    private pb::ExtensionSet<EnumRules> _Extensions { get { return _extensions; } }
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<EnumRules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Buf.Validate.ValidateReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EnumRules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EnumRules(EnumRules other) : this() {
      _hasBits0 = other._hasBits0;
      const_ = other.const_;
      definedOnly_ = other.definedOnly_;
      in_ = other.in_.Clone();
      notIn_ = other.notIn_.Clone();
      example_ = other.example_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      _extensions = pb::ExtensionSet.Clone(other._extensions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EnumRules Clone() {
      return new EnumRules(this);
    }

    /// <summary>Field number for the "const" field.</summary>
    public const int ConstFieldNumber = 1;
    private readonly static int ConstDefaultValue = 0;

    private int const_;
    /// <summary>
    /// `const` requires the field value to exactly match the specified enum value.
    /// If the field value doesn't match, an error message is generated.
    ///
    /// ```proto
    /// enum MyEnum {
    ///   MY_ENUM_UNSPECIFIED = 0;
    ///   MY_ENUM_VALUE1 = 1;
    ///   MY_ENUM_VALUE2 = 2;
    /// }
    ///
    /// message MyMessage {
    ///   // The field `value` must be exactly MY_ENUM_VALUE1.
    ///   MyEnum value = 1 [(buf.validate.field).enum.const = 1];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Const {
      get { if ((_hasBits0 & 1) != 0) { return const_; } else { return ConstDefaultValue; } }
      set {
        _hasBits0 |= 1;
        const_ = value;
      }
    }
    /// <summary>Gets whether the "const" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasConst {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "const" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearConst() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "defined_only" field.</summary>
    public const int DefinedOnlyFieldNumber = 2;
    private readonly static bool DefinedOnlyDefaultValue = false;

    private bool definedOnly_;
    /// <summary>
    /// `defined_only` requires the field value to be one of the defined values for
    /// this enum, failing on any undefined value.
    ///
    /// ```proto
    /// enum MyEnum {
    ///   MY_ENUM_UNSPECIFIED = 0;
    ///   MY_ENUM_VALUE1 = 1;
    ///   MY_ENUM_VALUE2 = 2;
    /// }
    ///
    /// message MyMessage {
    ///   // The field `value` must be a defined value of MyEnum.
    ///   MyEnum value = 1 [(buf.validate.field).enum.defined_only = true];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool DefinedOnly {
      get { if ((_hasBits0 & 2) != 0) { return definedOnly_; } else { return DefinedOnlyDefaultValue; } }
      set {
        _hasBits0 |= 2;
        definedOnly_ = value;
      }
    }
    /// <summary>Gets whether the "defined_only" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDefinedOnly {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "defined_only" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDefinedOnly() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "in" field.</summary>
    public const int InFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_in_codec
        = pb::FieldCodec.ForInt32(24);
    private readonly pbc::RepeatedField<int> in_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// `in` requires the field value to be equal to one of the
    ///specified enum values. If the field value doesn't match any of the
    ///specified values, an error message is generated.
    ///
    /// ```proto
    /// enum MyEnum {
    ///   MY_ENUM_UNSPECIFIED = 0;
    ///   MY_ENUM_VALUE1 = 1;
    ///   MY_ENUM_VALUE2 = 2;
    /// }
    ///
    /// message MyMessage {
    ///   // The field `value` must be equal to one of the specified values.
    ///   MyEnum value = 1 [(buf.validate.field).enum = { in: [1, 2]}];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> In {
      get { return in_; }
    }

    /// <summary>Field number for the "not_in" field.</summary>
    public const int NotInFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_notIn_codec
        = pb::FieldCodec.ForInt32(32);
    private readonly pbc::RepeatedField<int> notIn_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// `not_in` requires the field value to be not equal to any of the
    ///specified enum values. If the field value matches one of the specified
    /// values, an error message is generated.
    ///
    /// ```proto
    /// enum MyEnum {
    ///   MY_ENUM_UNSPECIFIED = 0;
    ///   MY_ENUM_VALUE1 = 1;
    ///   MY_ENUM_VALUE2 = 2;
    /// }
    ///
    /// message MyMessage {
    ///   // The field `value` must not be equal to any of the specified values.
    ///   MyEnum value = 1 [(buf.validate.field).enum = { not_in: [1, 2]}];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> NotIn {
      get { return notIn_; }
    }

    /// <summary>Field number for the "example" field.</summary>
    public const int ExampleFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_example_codec
        = pb::FieldCodec.ForInt32(40);
    private readonly pbc::RepeatedField<int> example_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// `example` specifies values that the field may have. These values SHOULD
    /// conform to other rules. `example` values will not impact validation
    /// but may be used as helpful guidance on how to populate the given field.
    ///
    /// ```proto
    /// enum MyEnum {
    ///   MY_ENUM_UNSPECIFIED = 0;
    ///   MY_ENUM_VALUE1 = 1;
    ///   MY_ENUM_VALUE2 = 2;
    /// }
    ///
    /// message MyMessage {
    ///     (buf.validate.field).enum.example = 1,
    ///     (buf.validate.field).enum.example = 2
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> Example {
      get { return example_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as EnumRules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(EnumRules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Const != other.Const) return false;
      if (DefinedOnly != other.DefinedOnly) return false;
      if(!in_.Equals(other.in_)) return false;
      if(!notIn_.Equals(other.notIn_)) return false;
      if(!example_.Equals(other.example_)) return false;
      if (!Equals(_extensions, other._extensions)) {
        return false;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasConst) hash ^= Const.GetHashCode();
      if (HasDefinedOnly) hash ^= DefinedOnly.GetHashCode();
      hash ^= in_.GetHashCode();
      hash ^= notIn_.GetHashCode();
      hash ^= example_.GetHashCode();
      if (_extensions != null) {
        hash ^= _extensions.GetHashCode();
      }
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasConst) {
        output.WriteRawTag(8);
        output.WriteInt32(Const);
      }
      if (HasDefinedOnly) {
        output.WriteRawTag(16);
        output.WriteBool(DefinedOnly);
      }
      in_.WriteTo(output, _repeated_in_codec);
      notIn_.WriteTo(output, _repeated_notIn_codec);
      example_.WriteTo(output, _repeated_example_codec);
      if (_extensions != null) {
        _extensions.WriteTo(output);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasConst) {
        output.WriteRawTag(8);
        output.WriteInt32(Const);
      }
      if (HasDefinedOnly) {
        output.WriteRawTag(16);
        output.WriteBool(DefinedOnly);
      }
      in_.WriteTo(ref output, _repeated_in_codec);
      notIn_.WriteTo(ref output, _repeated_notIn_codec);
      example_.WriteTo(ref output, _repeated_example_codec);
      if (_extensions != null) {
        _extensions.WriteTo(ref output);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasConst) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Const);
      }
      if (HasDefinedOnly) {
        size += 1 + 1;
      }
      size += in_.CalculateSize(_repeated_in_codec);
      size += notIn_.CalculateSize(_repeated_notIn_codec);
      size += example_.CalculateSize(_repeated_example_codec);
      if (_extensions != null) {
        size += _extensions.CalculateSize();
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(EnumRules other) {
      if (other == null) {
        return;
      }
      if (other.HasConst) {
        Const = other.Const;
      }
      if (other.HasDefinedOnly) {
        DefinedOnly = other.DefinedOnly;
      }
      in_.Add(other.in_);
      notIn_.Add(other.notIn_);
      example_.Add(other.example_);
      pb::ExtensionSet.MergeFrom(ref _extensions, other._extensions);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            if (!pb::ExtensionSet.TryMergeFieldFrom(ref _extensions, input)) {
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            }
            break;
          case 8: {
            Const = input.ReadInt32();
            break;
          }
          case 16: {
            DefinedOnly = input.ReadBool();
            break;
          }
          case 26:
          case 24: {
            in_.AddEntriesFrom(input, _repeated_in_codec);
            break;
          }
          case 34:
          case 32: {
            notIn_.AddEntriesFrom(input, _repeated_notIn_codec);
            break;
          }
          case 42:
          case 40: {
            example_.AddEntriesFrom(input, _repeated_example_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            if (!pb::ExtensionSet.TryMergeFieldFrom(ref _extensions, ref input)) {
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            }
            break;
          case 8: {
            Const = input.ReadInt32();
            break;
          }
          case 16: {
            DefinedOnly = input.ReadBool();
            break;
          }
          case 26:
          case 24: {
            in_.AddEntriesFrom(ref input, _repeated_in_codec);
            break;
          }
          case 34:
          case 32: {
            notIn_.AddEntriesFrom(ref input, _repeated_notIn_codec);
            break;
          }
          case 42:
          case 40: {
            example_.AddEntriesFrom(ref input, _repeated_example_codec);
            break;
          }
        }
      }
    }
    #endif

    public TValue GetExtension<TValue>(pb::Extension<EnumRules, TValue> extension) {
      return pb::ExtensionSet.Get(ref _extensions, extension);
    }
    public pbc::RepeatedField<TValue> GetExtension<TValue>(pb::RepeatedExtension<EnumRules, TValue> extension) {
      return pb::ExtensionSet.Get(ref _extensions, extension);
    }
    public pbc::RepeatedField<TValue> GetOrInitializeExtension<TValue>(pb::RepeatedExtension<EnumRules, TValue> extension) {
      return pb::ExtensionSet.GetOrInitialize(ref _extensions, extension);
    }
    public void SetExtension<TValue>(pb::Extension<EnumRules, TValue> extension, TValue value) {
      pb::ExtensionSet.Set(ref _extensions, extension, value);
    }
    public bool HasExtension<TValue>(pb::Extension<EnumRules, TValue> extension) {
      return pb::ExtensionSet.Has(ref _extensions, extension);
    }
    public void ClearExtension<TValue>(pb::Extension<EnumRules, TValue> extension) {
      pb::ExtensionSet.Clear(ref _extensions, extension);
    }
    public void ClearExtension<TValue>(pb::RepeatedExtension<EnumRules, TValue> extension) {
      pb::ExtensionSet.Clear(ref _extensions, extension);
    }

  }

  /// <summary>
  /// RepeatedRules describe the rules applied to `repeated` values.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class RepeatedRules : pb::IExtendableMessage<RepeatedRules>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RepeatedRules> _parser = new pb::MessageParser<RepeatedRules>(() => new RepeatedRules());
    private pb::UnknownFieldSet _unknownFields;
    private pb::ExtensionSet<RepeatedRules> _extensions;
    private pb::ExtensionSet<RepeatedRules> _Extensions { get { return _extensions; } }
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<RepeatedRules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Buf.Validate.ValidateReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RepeatedRules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RepeatedRules(RepeatedRules other) : this() {
      _hasBits0 = other._hasBits0;
      minItems_ = other.minItems_;
      maxItems_ = other.maxItems_;
      unique_ = other.unique_;
      items_ = other.items_ != null ? other.items_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      _extensions = pb::ExtensionSet.Clone(other._extensions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RepeatedRules Clone() {
      return new RepeatedRules(this);
    }

    /// <summary>Field number for the "min_items" field.</summary>
    public const int MinItemsFieldNumber = 1;
    private readonly static ulong MinItemsDefaultValue = 0UL;

    private ulong minItems_;
    /// <summary>
    /// `min_items` requires that this field must contain at least the specified
    /// minimum number of items.
    ///
    /// Note that `min_items = 1` is equivalent to setting a field as `required`.
    ///
    /// ```proto
    /// message MyRepeated {
    ///   // value must contain at least  2 items
    ///   repeated string value = 1 [(buf.validate.field).repeated.min_items = 2];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong MinItems {
      get { if ((_hasBits0 & 1) != 0) { return minItems_; } else { return MinItemsDefaultValue; } }
      set {
        _hasBits0 |= 1;
        minItems_ = value;
      }
    }
    /// <summary>Gets whether the "min_items" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMinItems {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "min_items" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMinItems() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "max_items" field.</summary>
    public const int MaxItemsFieldNumber = 2;
    private readonly static ulong MaxItemsDefaultValue = 0UL;

    private ulong maxItems_;
    /// <summary>
    /// `max_items` denotes that this field must not exceed a
    /// certain number of items as the upper limit. If the field contains more
    /// items than specified, an error message will be generated, requiring the
    /// field to maintain no more than the specified number of items.
    ///
    /// ```proto
    /// message MyRepeated {
    ///   // value must contain no more than 3 item(s)
    ///   repeated string value = 1 [(buf.validate.field).repeated.max_items = 3];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong MaxItems {
      get { if ((_hasBits0 & 2) != 0) { return maxItems_; } else { return MaxItemsDefaultValue; } }
      set {
        _hasBits0 |= 2;
        maxItems_ = value;
      }
    }
    /// <summary>Gets whether the "max_items" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaxItems {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "max_items" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaxItems() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "unique" field.</summary>
    public const int UniqueFieldNumber = 3;
    private readonly static bool UniqueDefaultValue = false;

    private bool unique_;
    /// <summary>
    /// `unique` indicates that all elements in this field must
    /// be unique. This rule is strictly applicable to scalar and enum
    /// types, with message types not being supported.
    ///
    /// ```proto
    /// message MyRepeated {
    ///   // repeated value must contain unique items
    ///   repeated string value = 1 [(buf.validate.field).repeated.unique = true];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Unique {
      get { if ((_hasBits0 & 4) != 0) { return unique_; } else { return UniqueDefaultValue; } }
      set {
        _hasBits0 |= 4;
        unique_ = value;
      }
    }
    /// <summary>Gets whether the "unique" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUnique {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "unique" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUnique() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 4;
    private global::Buf.Validate.FieldRules items_;
    /// <summary>
    /// `items` details the rules to be applied to each item
    /// in the field. Even for repeated message fields, validation is executed
    /// against each item unless skip is explicitly specified.
    ///
    /// ```proto
    /// message MyRepeated {
    ///   // The items in the field `value` must follow the specified rules.
    ///   repeated string value = 1 [(buf.validate.field).repeated.items = {
    ///     string: {
    ///       min_len: 3
    ///       max_len: 10
    ///     }
    ///   }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Buf.Validate.FieldRules Items {
      get { return items_; }
      set {
        items_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as RepeatedRules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(RepeatedRules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MinItems != other.MinItems) return false;
      if (MaxItems != other.MaxItems) return false;
      if (Unique != other.Unique) return false;
      if (!object.Equals(Items, other.Items)) return false;
      if (!Equals(_extensions, other._extensions)) {
        return false;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMinItems) hash ^= MinItems.GetHashCode();
      if (HasMaxItems) hash ^= MaxItems.GetHashCode();
      if (HasUnique) hash ^= Unique.GetHashCode();
      if (items_ != null) hash ^= Items.GetHashCode();
      if (_extensions != null) {
        hash ^= _extensions.GetHashCode();
      }
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMinItems) {
        output.WriteRawTag(8);
        output.WriteUInt64(MinItems);
      }
      if (HasMaxItems) {
        output.WriteRawTag(16);
        output.WriteUInt64(MaxItems);
      }
      if (HasUnique) {
        output.WriteRawTag(24);
        output.WriteBool(Unique);
      }
      if (items_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Items);
      }
      if (_extensions != null) {
        _extensions.WriteTo(output);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMinItems) {
        output.WriteRawTag(8);
        output.WriteUInt64(MinItems);
      }
      if (HasMaxItems) {
        output.WriteRawTag(16);
        output.WriteUInt64(MaxItems);
      }
      if (HasUnique) {
        output.WriteRawTag(24);
        output.WriteBool(Unique);
      }
      if (items_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Items);
      }
      if (_extensions != null) {
        _extensions.WriteTo(ref output);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasMinItems) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MinItems);
      }
      if (HasMaxItems) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MaxItems);
      }
      if (HasUnique) {
        size += 1 + 1;
      }
      if (items_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Items);
      }
      if (_extensions != null) {
        size += _extensions.CalculateSize();
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(RepeatedRules other) {
      if (other == null) {
        return;
      }
      if (other.HasMinItems) {
        MinItems = other.MinItems;
      }
      if (other.HasMaxItems) {
        MaxItems = other.MaxItems;
      }
      if (other.HasUnique) {
        Unique = other.Unique;
      }
      if (other.items_ != null) {
        if (items_ == null) {
          Items = new global::Buf.Validate.FieldRules();
        }
        Items.MergeFrom(other.Items);
      }
      pb::ExtensionSet.MergeFrom(ref _extensions, other._extensions);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            if (!pb::ExtensionSet.TryMergeFieldFrom(ref _extensions, input)) {
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            }
            break;
          case 8: {
            MinItems = input.ReadUInt64();
            break;
          }
          case 16: {
            MaxItems = input.ReadUInt64();
            break;
          }
          case 24: {
            Unique = input.ReadBool();
            break;
          }
          case 34: {
            if (items_ == null) {
              Items = new global::Buf.Validate.FieldRules();
            }
            input.ReadMessage(Items);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            if (!pb::ExtensionSet.TryMergeFieldFrom(ref _extensions, ref input)) {
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            }
            break;
          case 8: {
            MinItems = input.ReadUInt64();
            break;
          }
          case 16: {
            MaxItems = input.ReadUInt64();
            break;
          }
          case 24: {
            Unique = input.ReadBool();
            break;
          }
          case 34: {
            if (items_ == null) {
              Items = new global::Buf.Validate.FieldRules();
            }
            input.ReadMessage(Items);
            break;
          }
        }
      }
    }
    #endif

    public TValue GetExtension<TValue>(pb::Extension<RepeatedRules, TValue> extension) {
      return pb::ExtensionSet.Get(ref _extensions, extension);
    }
    public pbc::RepeatedField<TValue> GetExtension<TValue>(pb::RepeatedExtension<RepeatedRules, TValue> extension) {
      return pb::ExtensionSet.Get(ref _extensions, extension);
    }
    public pbc::RepeatedField<TValue> GetOrInitializeExtension<TValue>(pb::RepeatedExtension<RepeatedRules, TValue> extension) {
      return pb::ExtensionSet.GetOrInitialize(ref _extensions, extension);
    }
    public void SetExtension<TValue>(pb::Extension<RepeatedRules, TValue> extension, TValue value) {
      pb::ExtensionSet.Set(ref _extensions, extension, value);
    }
    public bool HasExtension<TValue>(pb::Extension<RepeatedRules, TValue> extension) {
      return pb::ExtensionSet.Has(ref _extensions, extension);
    }
    public void ClearExtension<TValue>(pb::Extension<RepeatedRules, TValue> extension) {
      pb::ExtensionSet.Clear(ref _extensions, extension);
    }
    public void ClearExtension<TValue>(pb::RepeatedExtension<RepeatedRules, TValue> extension) {
      pb::ExtensionSet.Clear(ref _extensions, extension);
    }

  }

  /// <summary>
  /// MapRules describe the rules applied to `map` values.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class MapRules : pb::IExtendableMessage<MapRules>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MapRules> _parser = new pb::MessageParser<MapRules>(() => new MapRules());
    private pb::UnknownFieldSet _unknownFields;
    private pb::ExtensionSet<MapRules> _extensions;
    private pb::ExtensionSet<MapRules> _Extensions { get { return _extensions; } }
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<MapRules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Buf.Validate.ValidateReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MapRules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MapRules(MapRules other) : this() {
      _hasBits0 = other._hasBits0;
      minPairs_ = other.minPairs_;
      maxPairs_ = other.maxPairs_;
      keys_ = other.keys_ != null ? other.keys_.Clone() : null;
      values_ = other.values_ != null ? other.values_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      _extensions = pb::ExtensionSet.Clone(other._extensions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MapRules Clone() {
      return new MapRules(this);
    }

    /// <summary>Field number for the "min_pairs" field.</summary>
    public const int MinPairsFieldNumber = 1;
    private readonly static ulong MinPairsDefaultValue = 0UL;

    private ulong minPairs_;
    /// <summary>
    ///Specifies the minimum number of key-value pairs allowed. If the field has
    /// fewer key-value pairs than specified, an error message is generated.
    ///
    /// ```proto
    /// message MyMap {
    ///   // The field `value` must have at least 2 key-value pairs.
    ///   map&lt;string, string> value = 1 [(buf.validate.field).map.min_pairs = 2];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong MinPairs {
      get { if ((_hasBits0 & 1) != 0) { return minPairs_; } else { return MinPairsDefaultValue; } }
      set {
        _hasBits0 |= 1;
        minPairs_ = value;
      }
    }
    /// <summary>Gets whether the "min_pairs" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMinPairs {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "min_pairs" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMinPairs() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "max_pairs" field.</summary>
    public const int MaxPairsFieldNumber = 2;
    private readonly static ulong MaxPairsDefaultValue = 0UL;

    private ulong maxPairs_;
    /// <summary>
    ///Specifies the maximum number of key-value pairs allowed. If the field has
    /// more key-value pairs than specified, an error message is generated.
    ///
    /// ```proto
    /// message MyMap {
    ///   // The field `value` must have at most 3 key-value pairs.
    ///   map&lt;string, string> value = 1 [(buf.validate.field).map.max_pairs = 3];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong MaxPairs {
      get { if ((_hasBits0 & 2) != 0) { return maxPairs_; } else { return MaxPairsDefaultValue; } }
      set {
        _hasBits0 |= 2;
        maxPairs_ = value;
      }
    }
    /// <summary>Gets whether the "max_pairs" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaxPairs {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "max_pairs" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaxPairs() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "keys" field.</summary>
    public const int KeysFieldNumber = 4;
    private global::Buf.Validate.FieldRules keys_;
    /// <summary>
    ///Specifies the rules to be applied to each key in the field.
    ///
    /// ```proto
    /// message MyMap {
    ///   // The keys in the field `value` must follow the specified rules.
    ///   map&lt;string, string> value = 1 [(buf.validate.field).map.keys = {
    ///     string: {
    ///       min_len: 3
    ///       max_len: 10
    ///     }
    ///   }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Buf.Validate.FieldRules Keys {
      get { return keys_; }
      set {
        keys_ = value;
      }
    }

    /// <summary>Field number for the "values" field.</summary>
    public const int ValuesFieldNumber = 5;
    private global::Buf.Validate.FieldRules values_;
    /// <summary>
    ///Specifies the rules to be applied to the value of each key in the
    /// field. Message values will still have their validations evaluated unless
    ///skip is specified here.
    ///
    /// ```proto
    /// message MyMap {
    ///   // The values in the field `value` must follow the specified rules.
    ///   map&lt;string, string> value = 1 [(buf.validate.field).map.values = {
    ///     string: {
    ///       min_len: 5
    ///       max_len: 20
    ///     }
    ///   }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Buf.Validate.FieldRules Values {
      get { return values_; }
      set {
        values_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as MapRules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(MapRules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MinPairs != other.MinPairs) return false;
      if (MaxPairs != other.MaxPairs) return false;
      if (!object.Equals(Keys, other.Keys)) return false;
      if (!object.Equals(Values, other.Values)) return false;
      if (!Equals(_extensions, other._extensions)) {
        return false;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMinPairs) hash ^= MinPairs.GetHashCode();
      if (HasMaxPairs) hash ^= MaxPairs.GetHashCode();
      if (keys_ != null) hash ^= Keys.GetHashCode();
      if (values_ != null) hash ^= Values.GetHashCode();
      if (_extensions != null) {
        hash ^= _extensions.GetHashCode();
      }
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMinPairs) {
        output.WriteRawTag(8);
        output.WriteUInt64(MinPairs);
      }
      if (HasMaxPairs) {
        output.WriteRawTag(16);
        output.WriteUInt64(MaxPairs);
      }
      if (keys_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Keys);
      }
      if (values_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Values);
      }
      if (_extensions != null) {
        _extensions.WriteTo(output);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMinPairs) {
        output.WriteRawTag(8);
        output.WriteUInt64(MinPairs);
      }
      if (HasMaxPairs) {
        output.WriteRawTag(16);
        output.WriteUInt64(MaxPairs);
      }
      if (keys_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Keys);
      }
      if (values_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Values);
      }
      if (_extensions != null) {
        _extensions.WriteTo(ref output);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasMinPairs) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MinPairs);
      }
      if (HasMaxPairs) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MaxPairs);
      }
      if (keys_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Keys);
      }
      if (values_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Values);
      }
      if (_extensions != null) {
        size += _extensions.CalculateSize();
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(MapRules other) {
      if (other == null) {
        return;
      }
      if (other.HasMinPairs) {
        MinPairs = other.MinPairs;
      }
      if (other.HasMaxPairs) {
        MaxPairs = other.MaxPairs;
      }
      if (other.keys_ != null) {
        if (keys_ == null) {
          Keys = new global::Buf.Validate.FieldRules();
        }
        Keys.MergeFrom(other.Keys);
      }
      if (other.values_ != null) {
        if (values_ == null) {
          Values = new global::Buf.Validate.FieldRules();
        }
        Values.MergeFrom(other.Values);
      }
      pb::ExtensionSet.MergeFrom(ref _extensions, other._extensions);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            if (!pb::ExtensionSet.TryMergeFieldFrom(ref _extensions, input)) {
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            }
            break;
          case 8: {
            MinPairs = input.ReadUInt64();
            break;
          }
          case 16: {
            MaxPairs = input.ReadUInt64();
            break;
          }
          case 34: {
            if (keys_ == null) {
              Keys = new global::Buf.Validate.FieldRules();
            }
            input.ReadMessage(Keys);
            break;
          }
          case 42: {
            if (values_ == null) {
              Values = new global::Buf.Validate.FieldRules();
            }
            input.ReadMessage(Values);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            if (!pb::ExtensionSet.TryMergeFieldFrom(ref _extensions, ref input)) {
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            }
            break;
          case 8: {
            MinPairs = input.ReadUInt64();
            break;
          }
          case 16: {
            MaxPairs = input.ReadUInt64();
            break;
          }
          case 34: {
            if (keys_ == null) {
              Keys = new global::Buf.Validate.FieldRules();
            }
            input.ReadMessage(Keys);
            break;
          }
          case 42: {
            if (values_ == null) {
              Values = new global::Buf.Validate.FieldRules();
            }
            input.ReadMessage(Values);
            break;
          }
        }
      }
    }
    #endif

    public TValue GetExtension<TValue>(pb::Extension<MapRules, TValue> extension) {
      return pb::ExtensionSet.Get(ref _extensions, extension);
    }
    public pbc::RepeatedField<TValue> GetExtension<TValue>(pb::RepeatedExtension<MapRules, TValue> extension) {
      return pb::ExtensionSet.Get(ref _extensions, extension);
    }
    public pbc::RepeatedField<TValue> GetOrInitializeExtension<TValue>(pb::RepeatedExtension<MapRules, TValue> extension) {
      return pb::ExtensionSet.GetOrInitialize(ref _extensions, extension);
    }
    public void SetExtension<TValue>(pb::Extension<MapRules, TValue> extension, TValue value) {
      pb::ExtensionSet.Set(ref _extensions, extension, value);
    }
    public bool HasExtension<TValue>(pb::Extension<MapRules, TValue> extension) {
      return pb::ExtensionSet.Has(ref _extensions, extension);
    }
    public void ClearExtension<TValue>(pb::Extension<MapRules, TValue> extension) {
      pb::ExtensionSet.Clear(ref _extensions, extension);
    }
    public void ClearExtension<TValue>(pb::RepeatedExtension<MapRules, TValue> extension) {
      pb::ExtensionSet.Clear(ref _extensions, extension);
    }

  }

  /// <summary>
  /// AnyRules describe rules applied exclusively to the `google.protobuf.Any` well-known type.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class AnyRules : pb::IMessage<AnyRules>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AnyRules> _parser = new pb::MessageParser<AnyRules>(() => new AnyRules());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AnyRules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Buf.Validate.ValidateReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AnyRules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AnyRules(AnyRules other) : this() {
      in_ = other.in_.Clone();
      notIn_ = other.notIn_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AnyRules Clone() {
      return new AnyRules(this);
    }

    /// <summary>Field number for the "in" field.</summary>
    public const int InFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_in_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> in_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// `in` requires the field's `type_url` to be equal to one of the
    ///specified values. If it doesn't match any of the specified values, an error
    /// message is generated.
    ///
    /// ```proto
    /// message MyAny {
    ///   //  The `value` field must have a `type_url` equal to one of the specified values.
    ///   google.protobuf.Any value = 1 [(buf.validate.field).any.in = ["type.googleapis.com/MyType1", "type.googleapis.com/MyType2"]];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> In {
      get { return in_; }
    }

    /// <summary>Field number for the "not_in" field.</summary>
    public const int NotInFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_notIn_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> notIn_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// requires the field's type_url to be not equal to any of the specified values. If it matches any of the specified values, an error message is generated.
    ///
    /// ```proto
    /// message MyAny {
    ///   // The field `value` must not have a `type_url` equal to any of the specified values.
    ///   google.protobuf.Any value = 1 [(buf.validate.field).any.not_in = ["type.googleapis.com/ForbiddenType1", "type.googleapis.com/ForbiddenType2"]];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> NotIn {
      get { return notIn_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AnyRules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AnyRules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!in_.Equals(other.in_)) return false;
      if(!notIn_.Equals(other.notIn_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= in_.GetHashCode();
      hash ^= notIn_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      in_.WriteTo(output, _repeated_in_codec);
      notIn_.WriteTo(output, _repeated_notIn_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      in_.WriteTo(ref output, _repeated_in_codec);
      notIn_.WriteTo(ref output, _repeated_notIn_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += in_.CalculateSize(_repeated_in_codec);
      size += notIn_.CalculateSize(_repeated_notIn_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AnyRules other) {
      if (other == null) {
        return;
      }
      in_.Add(other.in_);
      notIn_.Add(other.notIn_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            in_.AddEntriesFrom(input, _repeated_in_codec);
            break;
          }
          case 26: {
            notIn_.AddEntriesFrom(input, _repeated_notIn_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 18: {
            in_.AddEntriesFrom(ref input, _repeated_in_codec);
            break;
          }
          case 26: {
            notIn_.AddEntriesFrom(ref input, _repeated_notIn_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// DurationRules describe the rules applied exclusively to the `google.protobuf.Duration` well-known type.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class DurationRules : pb::IExtendableMessage<DurationRules>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DurationRules> _parser = new pb::MessageParser<DurationRules>(() => new DurationRules());
    private pb::UnknownFieldSet _unknownFields;
    private pb::ExtensionSet<DurationRules> _extensions;
    private pb::ExtensionSet<DurationRules> _Extensions { get { return _extensions; } }
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<DurationRules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Buf.Validate.ValidateReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DurationRules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DurationRules(DurationRules other) : this() {
      const_ = other.const_ != null ? other.const_.Clone() : null;
      in_ = other.in_.Clone();
      notIn_ = other.notIn_.Clone();
      example_ = other.example_.Clone();
      switch (other.LessThanCase) {
        case LessThanOneofCase.Lt:
          Lt = other.Lt.Clone();
          break;
        case LessThanOneofCase.Lte:
          Lte = other.Lte.Clone();
          break;
      }

      switch (other.GreaterThanCase) {
        case GreaterThanOneofCase.Gt:
          Gt = other.Gt.Clone();
          break;
        case GreaterThanOneofCase.Gte:
          Gte = other.Gte.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      _extensions = pb::ExtensionSet.Clone(other._extensions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DurationRules Clone() {
      return new DurationRules(this);
    }

    /// <summary>Field number for the "const" field.</summary>
    public const int ConstFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Duration const_;
    /// <summary>
    /// `const` dictates that the field must match the specified value of the `google.protobuf.Duration` type exactly.
    /// If the field's value deviates from the specified value, an error message
    /// will be generated.
    ///
    /// ```proto
    /// message MyDuration {
    ///   // value must equal 5s
    ///   google.protobuf.Duration value = 1 [(buf.validate.field).duration.const = "5s"];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Duration Const {
      get { return const_; }
      set {
        const_ = value;
      }
    }

    /// <summary>Field number for the "lt" field.</summary>
    public const int LtFieldNumber = 3;
    /// <summary>
    /// `lt` stipulates that the field must be less than the specified value of the `google.protobuf.Duration` type,
    /// exclusive. If the field's value is greater than or equal to the specified
    /// value, an error message will be generated.
    ///
    /// ```proto
    /// message MyDuration {
    ///   // value must be less than 5s
    ///   google.protobuf.Duration value = 1 [(buf.validate.field).duration.lt = "5s"];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Duration Lt {
      get { return lessThanCase_ == LessThanOneofCase.Lt ? (global::Google.Protobuf.WellKnownTypes.Duration) lessThan_ : null; }
      set {
        lessThan_ = value;
        lessThanCase_ = value == null ? LessThanOneofCase.None : LessThanOneofCase.Lt;
      }
    }

    /// <summary>Field number for the "lte" field.</summary>
    public const int LteFieldNumber = 4;
    /// <summary>
    /// `lte` indicates that the field must be less than or equal to the specified
    /// value of the `google.protobuf.Duration` type, inclusive. If the field's value is greater than the specified value,
    /// an error message will be generated.
    ///
    /// ```proto
    /// message MyDuration {
    ///   // value must be less than or equal to 10s
    ///   google.protobuf.Duration value = 1 [(buf.validate.field).duration.lte = "10s"];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Duration Lte {
      get { return lessThanCase_ == LessThanOneofCase.Lte ? (global::Google.Protobuf.WellKnownTypes.Duration) lessThan_ : null; }
      set {
        lessThan_ = value;
        lessThanCase_ = value == null ? LessThanOneofCase.None : LessThanOneofCase.Lte;
      }
    }

    /// <summary>Field number for the "gt" field.</summary>
    public const int GtFieldNumber = 5;
    /// <summary>
    /// `gt` requires the duration field value to be greater than the specified
    /// value (exclusive). If the value of `gt` is larger than a specified `lt`
    /// or `lte`, the range is reversed, and the field value must be outside the
    /// specified range. If the field value doesn't meet the required conditions,
    /// an error message is generated.
    ///
    /// ```proto
    /// message MyDuration {
    ///   // duration must be greater than 5s [duration.gt]
    ///   google.protobuf.Duration value = 1 [(buf.validate.field).duration.gt = { seconds: 5 }];
    ///
    ///   // duration must be greater than 5s and less than 10s [duration.gt_lt]
    ///   google.protobuf.Duration another_value = 2 [(buf.validate.field).duration = { gt: { seconds: 5 }, lt: { seconds: 10 } }];
    ///
    ///   // duration must be greater than 10s or less than 5s [duration.gt_lt_exclusive]
    ///   google.protobuf.Duration other_value = 3 [(buf.validate.field).duration = { gt: { seconds: 10 }, lt: { seconds: 5 } }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Duration Gt {
      get { return greaterThanCase_ == GreaterThanOneofCase.Gt ? (global::Google.Protobuf.WellKnownTypes.Duration) greaterThan_ : null; }
      set {
        greaterThan_ = value;
        greaterThanCase_ = value == null ? GreaterThanOneofCase.None : GreaterThanOneofCase.Gt;
      }
    }

    /// <summary>Field number for the "gte" field.</summary>
    public const int GteFieldNumber = 6;
    /// <summary>
    /// `gte` requires the duration field value to be greater than or equal to the
    /// specified value (exclusive). If the value of `gte` is larger than a
    /// specified `lt` or `lte`, the range is reversed, and the field value must
    /// be outside the specified range. If the field value doesn't meet the
    /// required conditions, an error message is generated.
    ///
    /// ```proto
    /// message MyDuration {
    ///  // duration must be greater than or equal to 5s [duration.gte]
    ///  google.protobuf.Duration value = 1 [(buf.validate.field).duration.gte = { seconds: 5 }];
    ///
    ///  // duration must be greater than or equal to 5s and less than 10s [duration.gte_lt]
    ///  google.protobuf.Duration another_value = 2 [(buf.validate.field).duration = { gte: { seconds: 5 }, lt: { seconds: 10 } }];
    ///
    ///  // duration must be greater than or equal to 10s or less than 5s [duration.gte_lt_exclusive]
    ///  google.protobuf.Duration other_value = 3 [(buf.validate.field).duration = { gte: { seconds: 10 }, lt: { seconds: 5 } }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Duration Gte {
      get { return greaterThanCase_ == GreaterThanOneofCase.Gte ? (global::Google.Protobuf.WellKnownTypes.Duration) greaterThan_ : null; }
      set {
        greaterThan_ = value;
        greaterThanCase_ = value == null ? GreaterThanOneofCase.None : GreaterThanOneofCase.Gte;
      }
    }

    /// <summary>Field number for the "in" field.</summary>
    public const int InFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Google.Protobuf.WellKnownTypes.Duration> _repeated_in_codec
        = pb::FieldCodec.ForMessage(58, global::Google.Protobuf.WellKnownTypes.Duration.Parser);
    private readonly pbc::RepeatedField<global::Google.Protobuf.WellKnownTypes.Duration> in_ = new pbc::RepeatedField<global::Google.Protobuf.WellKnownTypes.Duration>();
    /// <summary>
    /// `in` asserts that the field must be equal to one of the specified values of the `google.protobuf.Duration` type.
    /// If the field's value doesn't correspond to any of the specified values,
    /// an error message will be generated.
    ///
    /// ```proto
    /// message MyDuration {
    ///   // value must be in list [1s, 2s, 3s]
    ///   google.protobuf.Duration value = 1 [(buf.validate.field).duration.in = ["1s", "2s", "3s"]];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Google.Protobuf.WellKnownTypes.Duration> In {
      get { return in_; }
    }

    /// <summary>Field number for the "not_in" field.</summary>
    public const int NotInFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Google.Protobuf.WellKnownTypes.Duration> _repeated_notIn_codec
        = pb::FieldCodec.ForMessage(66, global::Google.Protobuf.WellKnownTypes.Duration.Parser);
    private readonly pbc::RepeatedField<global::Google.Protobuf.WellKnownTypes.Duration> notIn_ = new pbc::RepeatedField<global::Google.Protobuf.WellKnownTypes.Duration>();
    /// <summary>
    /// `not_in` denotes that the field must not be equal to
    /// any of the specified values of the `google.protobuf.Duration` type.
    /// If the field's value matches any of these values, an error message will be
    /// generated.
    ///
    /// ```proto
    /// message MyDuration {
    ///   // value must not be in list [1s, 2s, 3s]
    ///   google.protobuf.Duration value = 1 [(buf.validate.field).duration.not_in = ["1s", "2s", "3s"]];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Google.Protobuf.WellKnownTypes.Duration> NotIn {
      get { return notIn_; }
    }

    /// <summary>Field number for the "example" field.</summary>
    public const int ExampleFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Google.Protobuf.WellKnownTypes.Duration> _repeated_example_codec
        = pb::FieldCodec.ForMessage(74, global::Google.Protobuf.WellKnownTypes.Duration.Parser);
    private readonly pbc::RepeatedField<global::Google.Protobuf.WellKnownTypes.Duration> example_ = new pbc::RepeatedField<global::Google.Protobuf.WellKnownTypes.Duration>();
    /// <summary>
    /// `example` specifies values that the field may have. These values SHOULD
    /// conform to other rules. `example` values will not impact validation
    /// but may be used as helpful guidance on how to populate the given field.
    ///
    /// ```proto
    /// message MyDuration {
    ///   google.protobuf.Duration value = 1 [
    ///     (buf.validate.field).duration.example = { seconds: 1 },
    ///     (buf.validate.field).duration.example = { seconds: 2 },
    ///   ];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Google.Protobuf.WellKnownTypes.Duration> Example {
      get { return example_; }
    }

    private object lessThan_;
    /// <summary>Enum of possible cases for the "less_than" oneof.</summary>
    public enum LessThanOneofCase {
      None = 0,
      Lt = 3,
      Lte = 4,
    }
    private LessThanOneofCase lessThanCase_ = LessThanOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LessThanOneofCase LessThanCase {
      get { return lessThanCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLessThan() {
      lessThanCase_ = LessThanOneofCase.None;
      lessThan_ = null;
    }

    private object greaterThan_;
    /// <summary>Enum of possible cases for the "greater_than" oneof.</summary>
    public enum GreaterThanOneofCase {
      None = 0,
      Gt = 5,
      Gte = 6,
    }
    private GreaterThanOneofCase greaterThanCase_ = GreaterThanOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GreaterThanOneofCase GreaterThanCase {
      get { return greaterThanCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGreaterThan() {
      greaterThanCase_ = GreaterThanOneofCase.None;
      greaterThan_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as DurationRules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(DurationRules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Const, other.Const)) return false;
      if (!object.Equals(Lt, other.Lt)) return false;
      if (!object.Equals(Lte, other.Lte)) return false;
      if (!object.Equals(Gt, other.Gt)) return false;
      if (!object.Equals(Gte, other.Gte)) return false;
      if(!in_.Equals(other.in_)) return false;
      if(!notIn_.Equals(other.notIn_)) return false;
      if(!example_.Equals(other.example_)) return false;
      if (LessThanCase != other.LessThanCase) return false;
      if (GreaterThanCase != other.GreaterThanCase) return false;
      if (!Equals(_extensions, other._extensions)) {
        return false;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (const_ != null) hash ^= Const.GetHashCode();
      if (lessThanCase_ == LessThanOneofCase.Lt) hash ^= Lt.GetHashCode();
      if (lessThanCase_ == LessThanOneofCase.Lte) hash ^= Lte.GetHashCode();
      if (greaterThanCase_ == GreaterThanOneofCase.Gt) hash ^= Gt.GetHashCode();
      if (greaterThanCase_ == GreaterThanOneofCase.Gte) hash ^= Gte.GetHashCode();
      hash ^= in_.GetHashCode();
      hash ^= notIn_.GetHashCode();
      hash ^= example_.GetHashCode();
      hash ^= (int) lessThanCase_;
      hash ^= (int) greaterThanCase_;
      if (_extensions != null) {
        hash ^= _extensions.GetHashCode();
      }
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (const_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Const);
      }
      if (lessThanCase_ == LessThanOneofCase.Lt) {
        output.WriteRawTag(26);
        output.WriteMessage(Lt);
      }
      if (lessThanCase_ == LessThanOneofCase.Lte) {
        output.WriteRawTag(34);
        output.WriteMessage(Lte);
      }
      if (greaterThanCase_ == GreaterThanOneofCase.Gt) {
        output.WriteRawTag(42);
        output.WriteMessage(Gt);
      }
      if (greaterThanCase_ == GreaterThanOneofCase.Gte) {
        output.WriteRawTag(50);
        output.WriteMessage(Gte);
      }
      in_.WriteTo(output, _repeated_in_codec);
      notIn_.WriteTo(output, _repeated_notIn_codec);
      example_.WriteTo(output, _repeated_example_codec);
      if (_extensions != null) {
        _extensions.WriteTo(output);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (const_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Const);
      }
      if (lessThanCase_ == LessThanOneofCase.Lt) {
        output.WriteRawTag(26);
        output.WriteMessage(Lt);
      }
      if (lessThanCase_ == LessThanOneofCase.Lte) {
        output.WriteRawTag(34);
        output.WriteMessage(Lte);
      }
      if (greaterThanCase_ == GreaterThanOneofCase.Gt) {
        output.WriteRawTag(42);
        output.WriteMessage(Gt);
      }
      if (greaterThanCase_ == GreaterThanOneofCase.Gte) {
        output.WriteRawTag(50);
        output.WriteMessage(Gte);
      }
      in_.WriteTo(ref output, _repeated_in_codec);
      notIn_.WriteTo(ref output, _repeated_notIn_codec);
      example_.WriteTo(ref output, _repeated_example_codec);
      if (_extensions != null) {
        _extensions.WriteTo(ref output);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (const_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Const);
      }
      if (lessThanCase_ == LessThanOneofCase.Lt) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Lt);
      }
      if (lessThanCase_ == LessThanOneofCase.Lte) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Lte);
      }
      if (greaterThanCase_ == GreaterThanOneofCase.Gt) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Gt);
      }
      if (greaterThanCase_ == GreaterThanOneofCase.Gte) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Gte);
      }
      size += in_.CalculateSize(_repeated_in_codec);
      size += notIn_.CalculateSize(_repeated_notIn_codec);
      size += example_.CalculateSize(_repeated_example_codec);
      if (_extensions != null) {
        size += _extensions.CalculateSize();
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(DurationRules other) {
      if (other == null) {
        return;
      }
      if (other.const_ != null) {
        if (const_ == null) {
          Const = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        Const.MergeFrom(other.Const);
      }
      in_.Add(other.in_);
      notIn_.Add(other.notIn_);
      example_.Add(other.example_);
      switch (other.LessThanCase) {
        case LessThanOneofCase.Lt:
          if (Lt == null) {
            Lt = new global::Google.Protobuf.WellKnownTypes.Duration();
          }
          Lt.MergeFrom(other.Lt);
          break;
        case LessThanOneofCase.Lte:
          if (Lte == null) {
            Lte = new global::Google.Protobuf.WellKnownTypes.Duration();
          }
          Lte.MergeFrom(other.Lte);
          break;
      }

      switch (other.GreaterThanCase) {
        case GreaterThanOneofCase.Gt:
          if (Gt == null) {
            Gt = new global::Google.Protobuf.WellKnownTypes.Duration();
          }
          Gt.MergeFrom(other.Gt);
          break;
        case GreaterThanOneofCase.Gte:
          if (Gte == null) {
            Gte = new global::Google.Protobuf.WellKnownTypes.Duration();
          }
          Gte.MergeFrom(other.Gte);
          break;
      }

      pb::ExtensionSet.MergeFrom(ref _extensions, other._extensions);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            if (!pb::ExtensionSet.TryMergeFieldFrom(ref _extensions, input)) {
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            }
            break;
          case 18: {
            if (const_ == null) {
              Const = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(Const);
            break;
          }
          case 26: {
            global::Google.Protobuf.WellKnownTypes.Duration subBuilder = new global::Google.Protobuf.WellKnownTypes.Duration();
            if (lessThanCase_ == LessThanOneofCase.Lt) {
              subBuilder.MergeFrom(Lt);
            }
            input.ReadMessage(subBuilder);
            Lt = subBuilder;
            break;
          }
          case 34: {
            global::Google.Protobuf.WellKnownTypes.Duration subBuilder = new global::Google.Protobuf.WellKnownTypes.Duration();
            if (lessThanCase_ == LessThanOneofCase.Lte) {
              subBuilder.MergeFrom(Lte);
            }
            input.ReadMessage(subBuilder);
            Lte = subBuilder;
            break;
          }
          case 42: {
            global::Google.Protobuf.WellKnownTypes.Duration subBuilder = new global::Google.Protobuf.WellKnownTypes.Duration();
            if (greaterThanCase_ == GreaterThanOneofCase.Gt) {
              subBuilder.MergeFrom(Gt);
            }
            input.ReadMessage(subBuilder);
            Gt = subBuilder;
            break;
          }
          case 50: {
            global::Google.Protobuf.WellKnownTypes.Duration subBuilder = new global::Google.Protobuf.WellKnownTypes.Duration();
            if (greaterThanCase_ == GreaterThanOneofCase.Gte) {
              subBuilder.MergeFrom(Gte);
            }
            input.ReadMessage(subBuilder);
            Gte = subBuilder;
            break;
          }
          case 58: {
            in_.AddEntriesFrom(input, _repeated_in_codec);
            break;
          }
          case 66: {
            notIn_.AddEntriesFrom(input, _repeated_notIn_codec);
            break;
          }
          case 74: {
            example_.AddEntriesFrom(input, _repeated_example_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            if (!pb::ExtensionSet.TryMergeFieldFrom(ref _extensions, ref input)) {
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            }
            break;
          case 18: {
            if (const_ == null) {
              Const = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(Const);
            break;
          }
          case 26: {
            global::Google.Protobuf.WellKnownTypes.Duration subBuilder = new global::Google.Protobuf.WellKnownTypes.Duration();
            if (lessThanCase_ == LessThanOneofCase.Lt) {
              subBuilder.MergeFrom(Lt);
            }
            input.ReadMessage(subBuilder);
            Lt = subBuilder;
            break;
          }
          case 34: {
            global::Google.Protobuf.WellKnownTypes.Duration subBuilder = new global::Google.Protobuf.WellKnownTypes.Duration();
            if (lessThanCase_ == LessThanOneofCase.Lte) {
              subBuilder.MergeFrom(Lte);
            }
            input.ReadMessage(subBuilder);
            Lte = subBuilder;
            break;
          }
          case 42: {
            global::Google.Protobuf.WellKnownTypes.Duration subBuilder = new global::Google.Protobuf.WellKnownTypes.Duration();
            if (greaterThanCase_ == GreaterThanOneofCase.Gt) {
              subBuilder.MergeFrom(Gt);
            }
            input.ReadMessage(subBuilder);
            Gt = subBuilder;
            break;
          }
          case 50: {
            global::Google.Protobuf.WellKnownTypes.Duration subBuilder = new global::Google.Protobuf.WellKnownTypes.Duration();
            if (greaterThanCase_ == GreaterThanOneofCase.Gte) {
              subBuilder.MergeFrom(Gte);
            }
            input.ReadMessage(subBuilder);
            Gte = subBuilder;
            break;
          }
          case 58: {
            in_.AddEntriesFrom(ref input, _repeated_in_codec);
            break;
          }
          case 66: {
            notIn_.AddEntriesFrom(ref input, _repeated_notIn_codec);
            break;
          }
          case 74: {
            example_.AddEntriesFrom(ref input, _repeated_example_codec);
            break;
          }
        }
      }
    }
    #endif

    public TValue GetExtension<TValue>(pb::Extension<DurationRules, TValue> extension) {
      return pb::ExtensionSet.Get(ref _extensions, extension);
    }
    public pbc::RepeatedField<TValue> GetExtension<TValue>(pb::RepeatedExtension<DurationRules, TValue> extension) {
      return pb::ExtensionSet.Get(ref _extensions, extension);
    }
    public pbc::RepeatedField<TValue> GetOrInitializeExtension<TValue>(pb::RepeatedExtension<DurationRules, TValue> extension) {
      return pb::ExtensionSet.GetOrInitialize(ref _extensions, extension);
    }
    public void SetExtension<TValue>(pb::Extension<DurationRules, TValue> extension, TValue value) {
      pb::ExtensionSet.Set(ref _extensions, extension, value);
    }
    public bool HasExtension<TValue>(pb::Extension<DurationRules, TValue> extension) {
      return pb::ExtensionSet.Has(ref _extensions, extension);
    }
    public void ClearExtension<TValue>(pb::Extension<DurationRules, TValue> extension) {
      pb::ExtensionSet.Clear(ref _extensions, extension);
    }
    public void ClearExtension<TValue>(pb::RepeatedExtension<DurationRules, TValue> extension) {
      pb::ExtensionSet.Clear(ref _extensions, extension);
    }

  }

  /// <summary>
  /// TimestampRules describe the rules applied exclusively to the `google.protobuf.Timestamp` well-known type.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class TimestampRules : pb::IExtendableMessage<TimestampRules>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TimestampRules> _parser = new pb::MessageParser<TimestampRules>(() => new TimestampRules());
    private pb::UnknownFieldSet _unknownFields;
    private pb::ExtensionSet<TimestampRules> _extensions;
    private pb::ExtensionSet<TimestampRules> _Extensions { get { return _extensions; } }
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TimestampRules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Buf.Validate.ValidateReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TimestampRules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TimestampRules(TimestampRules other) : this() {
      const_ = other.const_ != null ? other.const_.Clone() : null;
      within_ = other.within_ != null ? other.within_.Clone() : null;
      example_ = other.example_.Clone();
      switch (other.LessThanCase) {
        case LessThanOneofCase.Lt:
          Lt = other.Lt.Clone();
          break;
        case LessThanOneofCase.Lte:
          Lte = other.Lte.Clone();
          break;
        case LessThanOneofCase.LtNow:
          LtNow = other.LtNow;
          break;
      }

      switch (other.GreaterThanCase) {
        case GreaterThanOneofCase.Gt:
          Gt = other.Gt.Clone();
          break;
        case GreaterThanOneofCase.Gte:
          Gte = other.Gte.Clone();
          break;
        case GreaterThanOneofCase.GtNow:
          GtNow = other.GtNow;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      _extensions = pb::ExtensionSet.Clone(other._extensions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TimestampRules Clone() {
      return new TimestampRules(this);
    }

    /// <summary>Field number for the "const" field.</summary>
    public const int ConstFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Timestamp const_;
    /// <summary>
    /// `const` dictates that this field, of the `google.protobuf.Timestamp` type, must exactly match the specified value. If the field value doesn't correspond to the specified timestamp, an error message will be generated.
    ///
    /// ```proto
    /// message MyTimestamp {
    ///   // value must equal 2023-05-03T10:00:00Z
    ///   google.protobuf.Timestamp created_at = 1 [(buf.validate.field).timestamp.const = {seconds: 1727998800}];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Const {
      get { return const_; }
      set {
        const_ = value;
      }
    }

    /// <summary>Field number for the "lt" field.</summary>
    public const int LtFieldNumber = 3;
    /// <summary>
    /// requires the duration field value to be less than the specified value (field &lt; value). If the field value doesn't meet the required conditions, an error message is generated.
    ///
    /// ```proto
    /// message MyDuration {
    ///   // duration must be less than 'P3D' [duration.lt]
    ///   google.protobuf.Duration value = 1 [(buf.validate.field).duration.lt = { seconds: 259200 }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Lt {
      get { return lessThanCase_ == LessThanOneofCase.Lt ? (global::Google.Protobuf.WellKnownTypes.Timestamp) lessThan_ : null; }
      set {
        lessThan_ = value;
        lessThanCase_ = value == null ? LessThanOneofCase.None : LessThanOneofCase.Lt;
      }
    }

    /// <summary>Field number for the "lte" field.</summary>
    public const int LteFieldNumber = 4;
    /// <summary>
    /// requires the timestamp field value to be less than or equal to the specified value (field &lt;= value). If the field value doesn't meet the required conditions, an error message is generated.
    ///
    /// ```proto
    /// message MyTimestamp {
    ///   // timestamp must be less than or equal to '2023-05-14T00:00:00Z' [timestamp.lte]
    ///   google.protobuf.Timestamp value = 1 [(buf.validate.field).timestamp.lte = { seconds: 1678867200 }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Lte {
      get { return lessThanCase_ == LessThanOneofCase.Lte ? (global::Google.Protobuf.WellKnownTypes.Timestamp) lessThan_ : null; }
      set {
        lessThan_ = value;
        lessThanCase_ = value == null ? LessThanOneofCase.None : LessThanOneofCase.Lte;
      }
    }

    /// <summary>Field number for the "lt_now" field.</summary>
    public const int LtNowFieldNumber = 7;
    /// <summary>
    /// `lt_now` specifies that this field, of the `google.protobuf.Timestamp` type, must be less than the current time. `lt_now` can only be used with the `within` rule.
    ///
    /// ```proto
    /// message MyTimestamp {
    ///  // value must be less than now
    ///   google.protobuf.Timestamp created_at = 1 [(buf.validate.field).timestamp.lt_now = true];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool LtNow {
      get { return HasLtNow ? (bool) lessThan_ : false; }
      set {
        lessThan_ = value;
        lessThanCase_ = LessThanOneofCase.LtNow;
      }
    }
    /// <summary>Gets whether the "lt_now" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLtNow {
      get { return lessThanCase_ == LessThanOneofCase.LtNow; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "lt_now" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLtNow() {
      if (HasLtNow) {
        ClearLessThan();
      }
    }

    /// <summary>Field number for the "gt" field.</summary>
    public const int GtFieldNumber = 5;
    /// <summary>
    /// `gt` requires the timestamp field value to be greater than the specified
    /// value (exclusive). If the value of `gt` is larger than a specified `lt`
    /// or `lte`, the range is reversed, and the field value must be outside the
    /// specified range. If the field value doesn't meet the required conditions,
    /// an error message is generated.
    ///
    /// ```proto
    /// message MyTimestamp {
    ///   // timestamp must be greater than '2023-01-01T00:00:00Z' [timestamp.gt]
    ///   google.protobuf.Timestamp value = 1 [(buf.validate.field).timestamp.gt = { seconds: 1672444800 }];
    ///
    ///   // timestamp must be greater than '2023-01-01T00:00:00Z' and less than '2023-01-02T00:00:00Z' [timestamp.gt_lt]
    ///   google.protobuf.Timestamp another_value = 2 [(buf.validate.field).timestamp = { gt: { seconds: 1672444800 }, lt: { seconds: 1672531200 } }];
    ///
    ///   // timestamp must be greater than '2023-01-02T00:00:00Z' or less than '2023-01-01T00:00:00Z' [timestamp.gt_lt_exclusive]
    ///   google.protobuf.Timestamp other_value = 3 [(buf.validate.field).timestamp = { gt: { seconds: 1672531200 }, lt: { seconds: 1672444800 } }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Gt {
      get { return greaterThanCase_ == GreaterThanOneofCase.Gt ? (global::Google.Protobuf.WellKnownTypes.Timestamp) greaterThan_ : null; }
      set {
        greaterThan_ = value;
        greaterThanCase_ = value == null ? GreaterThanOneofCase.None : GreaterThanOneofCase.Gt;
      }
    }

    /// <summary>Field number for the "gte" field.</summary>
    public const int GteFieldNumber = 6;
    /// <summary>
    /// `gte` requires the timestamp field value to be greater than or equal to the
    /// specified value (exclusive). If the value of `gte` is larger than a
    /// specified `lt` or `lte`, the range is reversed, and the field value
    /// must be outside the specified range. If the field value doesn't meet
    /// the required conditions, an error message is generated.
    ///
    /// ```proto
    /// message MyTimestamp {
    ///   // timestamp must be greater than or equal to '2023-01-01T00:00:00Z' [timestamp.gte]
    ///   google.protobuf.Timestamp value = 1 [(buf.validate.field).timestamp.gte = { seconds: 1672444800 }];
    ///
    ///   // timestamp must be greater than or equal to '2023-01-01T00:00:00Z' and less than '2023-01-02T00:00:00Z' [timestamp.gte_lt]
    ///   google.protobuf.Timestamp another_value = 2 [(buf.validate.field).timestamp = { gte: { seconds: 1672444800 }, lt: { seconds: 1672531200 } }];
    ///
    ///   // timestamp must be greater than or equal to '2023-01-02T00:00:00Z' or less than '2023-01-01T00:00:00Z' [timestamp.gte_lt_exclusive]
    ///   google.protobuf.Timestamp other_value = 3 [(buf.validate.field).timestamp = { gte: { seconds: 1672531200 }, lt: { seconds: 1672444800 } }];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Gte {
      get { return greaterThanCase_ == GreaterThanOneofCase.Gte ? (global::Google.Protobuf.WellKnownTypes.Timestamp) greaterThan_ : null; }
      set {
        greaterThan_ = value;
        greaterThanCase_ = value == null ? GreaterThanOneofCase.None : GreaterThanOneofCase.Gte;
      }
    }

    /// <summary>Field number for the "gt_now" field.</summary>
    public const int GtNowFieldNumber = 8;
    /// <summary>
    /// `gt_now` specifies that this field, of the `google.protobuf.Timestamp` type, must be greater than the current time. `gt_now` can only be used with the `within` rule.
    ///
    /// ```proto
    /// message MyTimestamp {
    ///   // value must be greater than now
    ///   google.protobuf.Timestamp created_at = 1 [(buf.validate.field).timestamp.gt_now = true];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool GtNow {
      get { return HasGtNow ? (bool) greaterThan_ : false; }
      set {
        greaterThan_ = value;
        greaterThanCase_ = GreaterThanOneofCase.GtNow;
      }
    }
    /// <summary>Gets whether the "gt_now" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGtNow {
      get { return greaterThanCase_ == GreaterThanOneofCase.GtNow; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "gt_now" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGtNow() {
      if (HasGtNow) {
        ClearGreaterThan();
      }
    }

    /// <summary>Field number for the "within" field.</summary>
    public const int WithinFieldNumber = 9;
    private global::Google.Protobuf.WellKnownTypes.Duration within_;
    /// <summary>
    /// `within` specifies that this field, of the `google.protobuf.Timestamp` type, must be within the specified duration of the current time. If the field value isn't within the duration, an error message is generated.
    ///
    /// ```proto
    /// message MyTimestamp {
    ///   // value must be within 1 hour of now
    ///   google.protobuf.Timestamp created_at = 1 [(buf.validate.field).timestamp.within = {seconds: 3600}];
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Duration Within {
      get { return within_; }
      set {
        within_ = value;
      }
    }

    /// <summary>Field number for the "example" field.</summary>
    public const int ExampleFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Google.Protobuf.WellKnownTypes.Timestamp> _repeated_example_codec
        = pb::FieldCodec.ForMessage(82, global::Google.Protobuf.WellKnownTypes.Timestamp.Parser);
    private readonly pbc::RepeatedField<global::Google.Protobuf.WellKnownTypes.Timestamp> example_ = new pbc::RepeatedField<global::Google.Protobuf.WellKnownTypes.Timestamp>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Google.Protobuf.WellKnownTypes.Timestamp> Example {
      get { return example_; }
    }

    private object lessThan_;
    /// <summary>Enum of possible cases for the "less_than" oneof.</summary>
    public enum LessThanOneofCase {
      None = 0,
      Lt = 3,
      Lte = 4,
      LtNow = 7,
    }
    private LessThanOneofCase lessThanCase_ = LessThanOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LessThanOneofCase LessThanCase {
      get { return lessThanCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLessThan() {
      lessThanCase_ = LessThanOneofCase.None;
      lessThan_ = null;
    }

    private object greaterThan_;
    /// <summary>Enum of possible cases for the "greater_than" oneof.</summary>
    public enum GreaterThanOneofCase {
      None = 0,
      Gt = 5,
      Gte = 6,
      GtNow = 8,
    }
    private GreaterThanOneofCase greaterThanCase_ = GreaterThanOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GreaterThanOneofCase GreaterThanCase {
      get { return greaterThanCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGreaterThan() {
      greaterThanCase_ = GreaterThanOneofCase.None;
      greaterThan_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TimestampRules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TimestampRules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Const, other.Const)) return false;
      if (!object.Equals(Lt, other.Lt)) return false;
      if (!object.Equals(Lte, other.Lte)) return false;
      if (LtNow != other.LtNow) return false;
      if (!object.Equals(Gt, other.Gt)) return false;
      if (!object.Equals(Gte, other.Gte)) return false;
      if (GtNow != other.GtNow) return false;
      if (!object.Equals(Within, other.Within)) return false;
      if(!example_.Equals(other.example_)) return false;
      if (LessThanCase != other.LessThanCase) return false;
      if (GreaterThanCase != other.GreaterThanCase) return false;
      if (!Equals(_extensions, other._extensions)) {
        return false;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (const_ != null) hash ^= Const.GetHashCode();
      if (lessThanCase_ == LessThanOneofCase.Lt) hash ^= Lt.GetHashCode();
      if (lessThanCase_ == LessThanOneofCase.Lte) hash ^= Lte.GetHashCode();
      if (HasLtNow) hash ^= LtNow.GetHashCode();
      if (greaterThanCase_ == GreaterThanOneofCase.Gt) hash ^= Gt.GetHashCode();
      if (greaterThanCase_ == GreaterThanOneofCase.Gte) hash ^= Gte.GetHashCode();
      if (HasGtNow) hash ^= GtNow.GetHashCode();
      if (within_ != null) hash ^= Within.GetHashCode();
      hash ^= example_.GetHashCode();
      hash ^= (int) lessThanCase_;
      hash ^= (int) greaterThanCase_;
      if (_extensions != null) {
        hash ^= _extensions.GetHashCode();
      }
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (const_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Const);
      }
      if (lessThanCase_ == LessThanOneofCase.Lt) {
        output.WriteRawTag(26);
        output.WriteMessage(Lt);
      }
      if (lessThanCase_ == LessThanOneofCase.Lte) {
        output.WriteRawTag(34);
        output.WriteMessage(Lte);
      }
      if (greaterThanCase_ == GreaterThanOneofCase.Gt) {
        output.WriteRawTag(42);
        output.WriteMessage(Gt);
      }
      if (greaterThanCase_ == GreaterThanOneofCase.Gte) {
        output.WriteRawTag(50);
        output.WriteMessage(Gte);
      }
      if (HasLtNow) {
        output.WriteRawTag(56);
        output.WriteBool(LtNow);
      }
      if (HasGtNow) {
        output.WriteRawTag(64);
        output.WriteBool(GtNow);
      }
      if (within_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Within);
      }
      example_.WriteTo(output, _repeated_example_codec);
      if (_extensions != null) {
        _extensions.WriteTo(output);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (const_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Const);
      }
      if (lessThanCase_ == LessThanOneofCase.Lt) {
        output.WriteRawTag(26);
        output.WriteMessage(Lt);
      }
      if (lessThanCase_ == LessThanOneofCase.Lte) {
        output.WriteRawTag(34);
        output.WriteMessage(Lte);
      }
      if (greaterThanCase_ == GreaterThanOneofCase.Gt) {
        output.WriteRawTag(42);
        output.WriteMessage(Gt);
      }
      if (greaterThanCase_ == GreaterThanOneofCase.Gte) {
        output.WriteRawTag(50);
        output.WriteMessage(Gte);
      }
      if (HasLtNow) {
        output.WriteRawTag(56);
        output.WriteBool(LtNow);
      }
      if (HasGtNow) {
        output.WriteRawTag(64);
        output.WriteBool(GtNow);
      }
      if (within_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Within);
      }
      example_.WriteTo(ref output, _repeated_example_codec);
      if (_extensions != null) {
        _extensions.WriteTo(ref output);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (const_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Const);
      }
      if (lessThanCase_ == LessThanOneofCase.Lt) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Lt);
      }
      if (lessThanCase_ == LessThanOneofCase.Lte) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Lte);
      }
      if (HasLtNow) {
        size += 1 + 1;
      }
      if (greaterThanCase_ == GreaterThanOneofCase.Gt) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Gt);
      }
      if (greaterThanCase_ == GreaterThanOneofCase.Gte) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Gte);
      }
      if (HasGtNow) {
        size += 1 + 1;
      }
      if (within_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Within);
      }
      size += example_.CalculateSize(_repeated_example_codec);
      if (_extensions != null) {
        size += _extensions.CalculateSize();
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TimestampRules other) {
      if (other == null) {
        return;
      }
      if (other.const_ != null) {
        if (const_ == null) {
          Const = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Const.MergeFrom(other.Const);
      }
      if (other.within_ != null) {
        if (within_ == null) {
          Within = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        Within.MergeFrom(other.Within);
      }
      example_.Add(other.example_);
      switch (other.LessThanCase) {
        case LessThanOneofCase.Lt:
          if (Lt == null) {
            Lt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
          }
          Lt.MergeFrom(other.Lt);
          break;
        case LessThanOneofCase.Lte:
          if (Lte == null) {
            Lte = new global::Google.Protobuf.WellKnownTypes.Timestamp();
          }
          Lte.MergeFrom(other.Lte);
          break;
        case LessThanOneofCase.LtNow:
          LtNow = other.LtNow;
          break;
      }

      switch (other.GreaterThanCase) {
        case GreaterThanOneofCase.Gt:
          if (Gt == null) {
            Gt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
          }
          Gt.MergeFrom(other.Gt);
          break;
        case GreaterThanOneofCase.Gte:
          if (Gte == null) {
            Gte = new global::Google.Protobuf.WellKnownTypes.Timestamp();
          }
          Gte.MergeFrom(other.Gte);
          break;
        case GreaterThanOneofCase.GtNow:
          GtNow = other.GtNow;
          break;
      }

      pb::ExtensionSet.MergeFrom(ref _extensions, other._extensions);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            if (!pb::ExtensionSet.TryMergeFieldFrom(ref _extensions, input)) {
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            }
            break;
          case 18: {
            if (const_ == null) {
              Const = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Const);
            break;
          }
          case 26: {
            global::Google.Protobuf.WellKnownTypes.Timestamp subBuilder = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            if (lessThanCase_ == LessThanOneofCase.Lt) {
              subBuilder.MergeFrom(Lt);
            }
            input.ReadMessage(subBuilder);
            Lt = subBuilder;
            break;
          }
          case 34: {
            global::Google.Protobuf.WellKnownTypes.Timestamp subBuilder = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            if (lessThanCase_ == LessThanOneofCase.Lte) {
              subBuilder.MergeFrom(Lte);
            }
            input.ReadMessage(subBuilder);
            Lte = subBuilder;
            break;
          }
          case 42: {
            global::Google.Protobuf.WellKnownTypes.Timestamp subBuilder = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            if (greaterThanCase_ == GreaterThanOneofCase.Gt) {
              subBuilder.MergeFrom(Gt);
            }
            input.ReadMessage(subBuilder);
            Gt = subBuilder;
            break;
          }
          case 50: {
            global::Google.Protobuf.WellKnownTypes.Timestamp subBuilder = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            if (greaterThanCase_ == GreaterThanOneofCase.Gte) {
              subBuilder.MergeFrom(Gte);
            }
            input.ReadMessage(subBuilder);
            Gte = subBuilder;
            break;
          }
          case 56: {
            LtNow = input.ReadBool();
            break;
          }
          case 64: {
            GtNow = input.ReadBool();
            break;
          }
          case 74: {
            if (within_ == null) {
              Within = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(Within);
            break;
          }
          case 82: {
            example_.AddEntriesFrom(input, _repeated_example_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            if (!pb::ExtensionSet.TryMergeFieldFrom(ref _extensions, ref input)) {
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            }
            break;
          case 18: {
            if (const_ == null) {
              Const = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Const);
            break;
          }
          case 26: {
            global::Google.Protobuf.WellKnownTypes.Timestamp subBuilder = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            if (lessThanCase_ == LessThanOneofCase.Lt) {
              subBuilder.MergeFrom(Lt);
            }
            input.ReadMessage(subBuilder);
            Lt = subBuilder;
            break;
          }
          case 34: {
            global::Google.Protobuf.WellKnownTypes.Timestamp subBuilder = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            if (lessThanCase_ == LessThanOneofCase.Lte) {
              subBuilder.MergeFrom(Lte);
            }
            input.ReadMessage(subBuilder);
            Lte = subBuilder;
            break;
          }
          case 42: {
            global::Google.Protobuf.WellKnownTypes.Timestamp subBuilder = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            if (greaterThanCase_ == GreaterThanOneofCase.Gt) {
              subBuilder.MergeFrom(Gt);
            }
            input.ReadMessage(subBuilder);
            Gt = subBuilder;
            break;
          }
          case 50: {
            global::Google.Protobuf.WellKnownTypes.Timestamp subBuilder = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            if (greaterThanCase_ == GreaterThanOneofCase.Gte) {
              subBuilder.MergeFrom(Gte);
            }
            input.ReadMessage(subBuilder);
            Gte = subBuilder;
            break;
          }
          case 56: {
            LtNow = input.ReadBool();
            break;
          }
          case 64: {
            GtNow = input.ReadBool();
            break;
          }
          case 74: {
            if (within_ == null) {
              Within = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(Within);
            break;
          }
          case 82: {
            example_.AddEntriesFrom(ref input, _repeated_example_codec);
            break;
          }
        }
      }
    }
    #endif

    public TValue GetExtension<TValue>(pb::Extension<TimestampRules, TValue> extension) {
      return pb::ExtensionSet.Get(ref _extensions, extension);
    }
    public pbc::RepeatedField<TValue> GetExtension<TValue>(pb::RepeatedExtension<TimestampRules, TValue> extension) {
      return pb::ExtensionSet.Get(ref _extensions, extension);
    }
    public pbc::RepeatedField<TValue> GetOrInitializeExtension<TValue>(pb::RepeatedExtension<TimestampRules, TValue> extension) {
      return pb::ExtensionSet.GetOrInitialize(ref _extensions, extension);
    }
    public void SetExtension<TValue>(pb::Extension<TimestampRules, TValue> extension, TValue value) {
      pb::ExtensionSet.Set(ref _extensions, extension, value);
    }
    public bool HasExtension<TValue>(pb::Extension<TimestampRules, TValue> extension) {
      return pb::ExtensionSet.Has(ref _extensions, extension);
    }
    public void ClearExtension<TValue>(pb::Extension<TimestampRules, TValue> extension) {
      pb::ExtensionSet.Clear(ref _extensions, extension);
    }
    public void ClearExtension<TValue>(pb::RepeatedExtension<TimestampRules, TValue> extension) {
      pb::ExtensionSet.Clear(ref _extensions, extension);
    }

  }

  /// <summary>
  /// `Violations` is a collection of `Violation` messages. This message type is returned by
  /// protovalidate when a proto message fails to meet the requirements set by the `Rule` validation rules.
  /// Each individual violation is represented by a `Violation` message.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Violations : pb::IMessage<Violations>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Violations> _parser = new pb::MessageParser<Violations>(() => new Violations());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Violations> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Buf.Validate.ValidateReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Violations() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Violations(Violations other) : this() {
      violations_ = other.violations_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Violations Clone() {
      return new Violations(this);
    }

    /// <summary>Field number for the "violations" field.</summary>
    public const int Violations_FieldNumber = 1;
    private static readonly pb::FieldCodec<global::Buf.Validate.Violation> _repeated_violations_codec
        = pb::FieldCodec.ForMessage(10, global::Buf.Validate.Violation.Parser);
    private readonly pbc::RepeatedField<global::Buf.Validate.Violation> violations_ = new pbc::RepeatedField<global::Buf.Validate.Violation>();
    /// <summary>
    /// `violations` is a repeated field that contains all the `Violation` messages corresponding to the violations detected.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Buf.Validate.Violation> Violations_ {
      get { return violations_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Violations);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Violations other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!violations_.Equals(other.violations_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= violations_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      violations_.WriteTo(output, _repeated_violations_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      violations_.WriteTo(ref output, _repeated_violations_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += violations_.CalculateSize(_repeated_violations_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Violations other) {
      if (other == null) {
        return;
      }
      violations_.Add(other.violations_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            violations_.AddEntriesFrom(input, _repeated_violations_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            violations_.AddEntriesFrom(ref input, _repeated_violations_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// `Violation` represents a single instance where a validation rule, expressed
  /// as a `Rule`, was not met. It provides information about the field that
  /// caused the violation, the specific rule that wasn't fulfilled, and a
  /// human-readable error message.
  ///
  /// ```json
  /// {
  ///   "fieldPath": "bar",
  ///   "ruleId": "foo.bar",
  ///   "message": "bar must be greater than 0"
  /// }
  /// ```
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Violation : pb::IMessage<Violation>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Violation> _parser = new pb::MessageParser<Violation>(() => new Violation());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Violation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Buf.Validate.ValidateReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Violation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Violation(Violation other) : this() {
      _hasBits0 = other._hasBits0;
      field_ = other.field_ != null ? other.field_.Clone() : null;
      rule_ = other.rule_ != null ? other.rule_.Clone() : null;
      ruleId_ = other.ruleId_;
      message_ = other.message_;
      forKey_ = other.forKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Violation Clone() {
      return new Violation(this);
    }

    /// <summary>Field number for the "field" field.</summary>
    public const int FieldFieldNumber = 5;
    private global::Buf.Validate.FieldPath field_;
    /// <summary>
    /// `field` is a machine-readable path to the field that failed validation.
    /// This could be a nested field, in which case the path will include all the parent fields leading to the actual field that caused the violation.
    ///
    /// For example, consider the following message:
    ///
    /// ```proto
    /// message Message {
    ///   bool a = 1 [(buf.validate.field).required = true];
    /// }
    /// ```
    ///
    /// It could produce the following violation:
    ///
    /// ```textproto
    /// violation {
    ///   field { element { field_number: 1, field_name: "a", field_type: 8 } }
    ///   ...
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Buf.Validate.FieldPath Field {
      get { return field_; }
      set {
        field_ = value;
      }
    }

    /// <summary>Field number for the "rule" field.</summary>
    public const int RuleFieldNumber = 6;
    private global::Buf.Validate.FieldPath rule_;
    /// <summary>
    /// `rule` is a machine-readable path that points to the specific rule rule that failed validation.
    /// This will be a nested field starting from the FieldRules of the field that failed validation.
    /// For custom rules, this will provide the path of the rule, e.g. `cel[0]`.
    ///
    /// For example, consider the following message:
    ///
    /// ```proto
    /// message Message {
    ///   bool a = 1 [(buf.validate.field).required = true];
    ///   bool b = 2 [(buf.validate.field).cel = {
    ///     id: "custom_rule",
    ///     expression: "!this ? 'b must be true': ''"
    ///   }]
    /// }
    /// ```
    ///
    /// It could produce the following violations:
    ///
    /// ```textproto
    /// violation {
    ///   rule { element { field_number: 25, field_name: "required", field_type: 8 } }
    ///   ...
    /// }
    /// violation {
    ///   rule { element { field_number: 23, field_name: "cel", field_type: 11, index: 0 } }
    ///   ...
    /// }
    /// ```
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Buf.Validate.FieldPath Rule {
      get { return rule_; }
      set {
        rule_ = value;
      }
    }

    /// <summary>Field number for the "rule_id" field.</summary>
    public const int RuleIdFieldNumber = 2;
    private readonly static string RuleIdDefaultValue = "";

    private string ruleId_;
    /// <summary>
    /// `rule_id` is the unique identifier of the `Rule` that was not fulfilled.
    /// This is the same `id` that was specified in the `Rule` message, allowing easy tracing of which rule was violated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string RuleId {
      get { return ruleId_ ?? RuleIdDefaultValue; }
      set {
        ruleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "rule_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRuleId {
      get { return ruleId_ != null; }
    }
    /// <summary>Clears the value of the "rule_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRuleId() {
      ruleId_ = null;
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 3;
    private readonly static string MessageDefaultValue = "";

    private string message_;
    /// <summary>
    /// `message` is a human-readable error message that describes the nature of the violation.
    /// This can be the default error message from the violated `Rule`, or it can be a custom message that gives more context about the violation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Message {
      get { return message_ ?? MessageDefaultValue; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "message" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMessage {
      get { return message_ != null; }
    }
    /// <summary>Clears the value of the "message" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMessage() {
      message_ = null;
    }

    /// <summary>Field number for the "for_key" field.</summary>
    public const int ForKeyFieldNumber = 4;
    private readonly static bool ForKeyDefaultValue = false;

    private bool forKey_;
    /// <summary>
    /// `for_key` indicates whether the violation was caused by a map key, rather than a value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ForKey {
      get { if ((_hasBits0 & 1) != 0) { return forKey_; } else { return ForKeyDefaultValue; } }
      set {
        _hasBits0 |= 1;
        forKey_ = value;
      }
    }
    /// <summary>Gets whether the "for_key" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasForKey {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "for_key" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearForKey() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Violation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Violation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Field, other.Field)) return false;
      if (!object.Equals(Rule, other.Rule)) return false;
      if (RuleId != other.RuleId) return false;
      if (Message != other.Message) return false;
      if (ForKey != other.ForKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (field_ != null) hash ^= Field.GetHashCode();
      if (rule_ != null) hash ^= Rule.GetHashCode();
      if (HasRuleId) hash ^= RuleId.GetHashCode();
      if (HasMessage) hash ^= Message.GetHashCode();
      if (HasForKey) hash ^= ForKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasRuleId) {
        output.WriteRawTag(18);
        output.WriteString(RuleId);
      }
      if (HasMessage) {
        output.WriteRawTag(26);
        output.WriteString(Message);
      }
      if (HasForKey) {
        output.WriteRawTag(32);
        output.WriteBool(ForKey);
      }
      if (field_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Field);
      }
      if (rule_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Rule);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasRuleId) {
        output.WriteRawTag(18);
        output.WriteString(RuleId);
      }
      if (HasMessage) {
        output.WriteRawTag(26);
        output.WriteString(Message);
      }
      if (HasForKey) {
        output.WriteRawTag(32);
        output.WriteBool(ForKey);
      }
      if (field_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Field);
      }
      if (rule_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Rule);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (field_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Field);
      }
      if (rule_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rule);
      }
      if (HasRuleId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RuleId);
      }
      if (HasMessage) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (HasForKey) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Violation other) {
      if (other == null) {
        return;
      }
      if (other.field_ != null) {
        if (field_ == null) {
          Field = new global::Buf.Validate.FieldPath();
        }
        Field.MergeFrom(other.Field);
      }
      if (other.rule_ != null) {
        if (rule_ == null) {
          Rule = new global::Buf.Validate.FieldPath();
        }
        Rule.MergeFrom(other.Rule);
      }
      if (other.HasRuleId) {
        RuleId = other.RuleId;
      }
      if (other.HasMessage) {
        Message = other.Message;
      }
      if (other.HasForKey) {
        ForKey = other.ForKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            RuleId = input.ReadString();
            break;
          }
          case 26: {
            Message = input.ReadString();
            break;
          }
          case 32: {
            ForKey = input.ReadBool();
            break;
          }
          case 42: {
            if (field_ == null) {
              Field = new global::Buf.Validate.FieldPath();
            }
            input.ReadMessage(Field);
            break;
          }
          case 50: {
            if (rule_ == null) {
              Rule = new global::Buf.Validate.FieldPath();
            }
            input.ReadMessage(Rule);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 18: {
            RuleId = input.ReadString();
            break;
          }
          case 26: {
            Message = input.ReadString();
            break;
          }
          case 32: {
            ForKey = input.ReadBool();
            break;
          }
          case 42: {
            if (field_ == null) {
              Field = new global::Buf.Validate.FieldPath();
            }
            input.ReadMessage(Field);
            break;
          }
          case 50: {
            if (rule_ == null) {
              Rule = new global::Buf.Validate.FieldPath();
            }
            input.ReadMessage(Rule);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// `FieldPath` provides a path to a nested protobuf field.
  ///
  /// This message provides enough information to render a dotted field path even without protobuf descriptors.
  /// It also provides enough information to resolve a nested field through unknown wire data.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class FieldPath : pb::IMessage<FieldPath>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FieldPath> _parser = new pb::MessageParser<FieldPath>(() => new FieldPath());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<FieldPath> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Buf.Validate.ValidateReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FieldPath() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FieldPath(FieldPath other) : this() {
      elements_ = other.elements_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FieldPath Clone() {
      return new FieldPath(this);
    }

    /// <summary>Field number for the "elements" field.</summary>
    public const int ElementsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Buf.Validate.FieldPathElement> _repeated_elements_codec
        = pb::FieldCodec.ForMessage(10, global::Buf.Validate.FieldPathElement.Parser);
    private readonly pbc::RepeatedField<global::Buf.Validate.FieldPathElement> elements_ = new pbc::RepeatedField<global::Buf.Validate.FieldPathElement>();
    /// <summary>
    /// `elements` contains each element of the path, starting from the root and recursing downward.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Buf.Validate.FieldPathElement> Elements {
      get { return elements_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as FieldPath);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(FieldPath other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!elements_.Equals(other.elements_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= elements_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      elements_.WriteTo(output, _repeated_elements_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      elements_.WriteTo(ref output, _repeated_elements_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += elements_.CalculateSize(_repeated_elements_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(FieldPath other) {
      if (other == null) {
        return;
      }
      elements_.Add(other.elements_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            elements_.AddEntriesFrom(input, _repeated_elements_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            elements_.AddEntriesFrom(ref input, _repeated_elements_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// `FieldPathElement` provides enough information to nest through a single protobuf field.
  ///
  /// If the selected field is a map or repeated field, the `subscript` value selects a specific element from it.
  /// A path that refers to a value nested under a map key or repeated field index will have a `subscript` value.
  /// The `field_type` field allows unambiguous resolution of a field even if descriptors are not available.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class FieldPathElement : pb::IMessage<FieldPathElement>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FieldPathElement> _parser = new pb::MessageParser<FieldPathElement>(() => new FieldPathElement());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<FieldPathElement> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Buf.Validate.ValidateReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FieldPathElement() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FieldPathElement(FieldPathElement other) : this() {
      _hasBits0 = other._hasBits0;
      fieldNumber_ = other.fieldNumber_;
      fieldName_ = other.fieldName_;
      fieldType_ = other.fieldType_;
      keyType_ = other.keyType_;
      valueType_ = other.valueType_;
      switch (other.SubscriptCase) {
        case SubscriptOneofCase.Index:
          Index = other.Index;
          break;
        case SubscriptOneofCase.BoolKey:
          BoolKey = other.BoolKey;
          break;
        case SubscriptOneofCase.IntKey:
          IntKey = other.IntKey;
          break;
        case SubscriptOneofCase.UintKey:
          UintKey = other.UintKey;
          break;
        case SubscriptOneofCase.StringKey:
          StringKey = other.StringKey;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FieldPathElement Clone() {
      return new FieldPathElement(this);
    }

    /// <summary>Field number for the "field_number" field.</summary>
    public const int FieldNumberFieldNumber = 1;
    private readonly static int FieldNumberDefaultValue = 0;

    private int fieldNumber_;
    /// <summary>
    /// `field_number` is the field number this path element refers to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FieldNumber {
      get { if ((_hasBits0 & 1) != 0) { return fieldNumber_; } else { return FieldNumberDefaultValue; } }
      set {
        _hasBits0 |= 1;
        fieldNumber_ = value;
      }
    }
    /// <summary>Gets whether the "field_number" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFieldNumber {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "field_number" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFieldNumber() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "field_name" field.</summary>
    public const int FieldNameFieldNumber = 2;
    private readonly static string FieldNameDefaultValue = "";

    private string fieldName_;
    /// <summary>
    /// `field_name` contains the field name this path element refers to.
    /// This can be used to display a human-readable path even if the field number is unknown.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FieldName {
      get { return fieldName_ ?? FieldNameDefaultValue; }
      set {
        fieldName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "field_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFieldName {
      get { return fieldName_ != null; }
    }
    /// <summary>Clears the value of the "field_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFieldName() {
      fieldName_ = null;
    }

    /// <summary>Field number for the "field_type" field.</summary>
    public const int FieldTypeFieldNumber = 3;
    private readonly static global::Google.Protobuf.Reflection.FieldDescriptorProto.Types.Type FieldTypeDefaultValue = global::Google.Protobuf.Reflection.FieldDescriptorProto.Types.Type.Double;

    private global::Google.Protobuf.Reflection.FieldDescriptorProto.Types.Type fieldType_;
    /// <summary>
    /// `field_type` specifies the type of this field. When using reflection, this value is not needed.
    ///
    /// This value is provided to make it possible to traverse unknown fields through wire data.
    /// When traversing wire data, be mindful of both packed[1] and delimited[2] encoding schemes.
    ///
    /// [1]: https://protobuf.dev/programming-guides/encoding/#packed
    /// [2]: https://protobuf.dev/programming-guides/encoding/#groups
    ///
    /// N.B.: Although groups are deprecated, the corresponding delimited encoding scheme is not, and
    /// can be explicitly used in Protocol Buffers 2023 Edition.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.Reflection.FieldDescriptorProto.Types.Type FieldType {
      get { if ((_hasBits0 & 2) != 0) { return fieldType_; } else { return FieldTypeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        fieldType_ = value;
      }
    }
    /// <summary>Gets whether the "field_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFieldType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "field_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFieldType() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "key_type" field.</summary>
    public const int KeyTypeFieldNumber = 4;
    private readonly static global::Google.Protobuf.Reflection.FieldDescriptorProto.Types.Type KeyTypeDefaultValue = global::Google.Protobuf.Reflection.FieldDescriptorProto.Types.Type.Double;

    private global::Google.Protobuf.Reflection.FieldDescriptorProto.Types.Type keyType_;
    /// <summary>
    /// `key_type` specifies the map key type of this field. This value is useful when traversing
    /// unknown fields through wire data: specifically, it allows handling the differences between
    /// different integer encodings.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.Reflection.FieldDescriptorProto.Types.Type KeyType {
      get { if ((_hasBits0 & 4) != 0) { return keyType_; } else { return KeyTypeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        keyType_ = value;
      }
    }
    /// <summary>Gets whether the "key_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasKeyType {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "key_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearKeyType() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "value_type" field.</summary>
    public const int ValueTypeFieldNumber = 5;
    private readonly static global::Google.Protobuf.Reflection.FieldDescriptorProto.Types.Type ValueTypeDefaultValue = global::Google.Protobuf.Reflection.FieldDescriptorProto.Types.Type.Double;

    private global::Google.Protobuf.Reflection.FieldDescriptorProto.Types.Type valueType_;
    /// <summary>
    /// `value_type` specifies map value type of this field. This is useful if you want to display a
    /// value inside unknown fields through wire data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.Reflection.FieldDescriptorProto.Types.Type ValueType {
      get { if ((_hasBits0 & 8) != 0) { return valueType_; } else { return ValueTypeDefaultValue; } }
      set {
        _hasBits0 |= 8;
        valueType_ = value;
      }
    }
    /// <summary>Gets whether the "value_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasValueType {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "value_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearValueType() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 6;
    /// <summary>
    /// `index` specifies a 0-based index into a repeated field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong Index {
      get { return HasIndex ? (ulong) subscript_ : 0UL; }
      set {
        subscript_ = value;
        subscriptCase_ = SubscriptOneofCase.Index;
      }
    }
    /// <summary>Gets whether the "index" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIndex {
      get { return subscriptCase_ == SubscriptOneofCase.Index; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "index" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIndex() {
      if (HasIndex) {
        ClearSubscript();
      }
    }

    /// <summary>Field number for the "bool_key" field.</summary>
    public const int BoolKeyFieldNumber = 7;
    /// <summary>
    /// `bool_key` specifies a map key of type bool.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool BoolKey {
      get { return HasBoolKey ? (bool) subscript_ : false; }
      set {
        subscript_ = value;
        subscriptCase_ = SubscriptOneofCase.BoolKey;
      }
    }
    /// <summary>Gets whether the "bool_key" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBoolKey {
      get { return subscriptCase_ == SubscriptOneofCase.BoolKey; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "bool_key" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBoolKey() {
      if (HasBoolKey) {
        ClearSubscript();
      }
    }

    /// <summary>Field number for the "int_key" field.</summary>
    public const int IntKeyFieldNumber = 8;
    /// <summary>
    /// `int_key` specifies a map key of type int32, int64, sint32, sint64, sfixed32 or sfixed64.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long IntKey {
      get { return HasIntKey ? (long) subscript_ : 0L; }
      set {
        subscript_ = value;
        subscriptCase_ = SubscriptOneofCase.IntKey;
      }
    }
    /// <summary>Gets whether the "int_key" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIntKey {
      get { return subscriptCase_ == SubscriptOneofCase.IntKey; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "int_key" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIntKey() {
      if (HasIntKey) {
        ClearSubscript();
      }
    }

    /// <summary>Field number for the "uint_key" field.</summary>
    public const int UintKeyFieldNumber = 9;
    /// <summary>
    /// `uint_key` specifies a map key of type uint32, uint64, fixed32 or fixed64.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong UintKey {
      get { return HasUintKey ? (ulong) subscript_ : 0UL; }
      set {
        subscript_ = value;
        subscriptCase_ = SubscriptOneofCase.UintKey;
      }
    }
    /// <summary>Gets whether the "uint_key" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUintKey {
      get { return subscriptCase_ == SubscriptOneofCase.UintKey; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "uint_key" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUintKey() {
      if (HasUintKey) {
        ClearSubscript();
      }
    }

    /// <summary>Field number for the "string_key" field.</summary>
    public const int StringKeyFieldNumber = 10;
    /// <summary>
    /// `string_key` specifies a map key of type string.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string StringKey {
      get { return HasStringKey ? (string) subscript_ : ""; }
      set {
        subscript_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        subscriptCase_ = SubscriptOneofCase.StringKey;
      }
    }
    /// <summary>Gets whether the "string_key" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasStringKey {
      get { return subscriptCase_ == SubscriptOneofCase.StringKey; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "string_key" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStringKey() {
      if (HasStringKey) {
        ClearSubscript();
      }
    }

    private object subscript_;
    /// <summary>Enum of possible cases for the "subscript" oneof.</summary>
    public enum SubscriptOneofCase {
      None = 0,
      Index = 6,
      BoolKey = 7,
      IntKey = 8,
      UintKey = 9,
      StringKey = 10,
    }
    private SubscriptOneofCase subscriptCase_ = SubscriptOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SubscriptOneofCase SubscriptCase {
      get { return subscriptCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSubscript() {
      subscriptCase_ = SubscriptOneofCase.None;
      subscript_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as FieldPathElement);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(FieldPathElement other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FieldNumber != other.FieldNumber) return false;
      if (FieldName != other.FieldName) return false;
      if (FieldType != other.FieldType) return false;
      if (KeyType != other.KeyType) return false;
      if (ValueType != other.ValueType) return false;
      if (Index != other.Index) return false;
      if (BoolKey != other.BoolKey) return false;
      if (IntKey != other.IntKey) return false;
      if (UintKey != other.UintKey) return false;
      if (StringKey != other.StringKey) return false;
      if (SubscriptCase != other.SubscriptCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasFieldNumber) hash ^= FieldNumber.GetHashCode();
      if (HasFieldName) hash ^= FieldName.GetHashCode();
      if (HasFieldType) hash ^= FieldType.GetHashCode();
      if (HasKeyType) hash ^= KeyType.GetHashCode();
      if (HasValueType) hash ^= ValueType.GetHashCode();
      if (HasIndex) hash ^= Index.GetHashCode();
      if (HasBoolKey) hash ^= BoolKey.GetHashCode();
      if (HasIntKey) hash ^= IntKey.GetHashCode();
      if (HasUintKey) hash ^= UintKey.GetHashCode();
      if (HasStringKey) hash ^= StringKey.GetHashCode();
      hash ^= (int) subscriptCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasFieldNumber) {
        output.WriteRawTag(8);
        output.WriteInt32(FieldNumber);
      }
      if (HasFieldName) {
        output.WriteRawTag(18);
        output.WriteString(FieldName);
      }
      if (HasFieldType) {
        output.WriteRawTag(24);
        output.WriteEnum((int) FieldType);
      }
      if (HasKeyType) {
        output.WriteRawTag(32);
        output.WriteEnum((int) KeyType);
      }
      if (HasValueType) {
        output.WriteRawTag(40);
        output.WriteEnum((int) ValueType);
      }
      if (HasIndex) {
        output.WriteRawTag(48);
        output.WriteUInt64(Index);
      }
      if (HasBoolKey) {
        output.WriteRawTag(56);
        output.WriteBool(BoolKey);
      }
      if (HasIntKey) {
        output.WriteRawTag(64);
        output.WriteInt64(IntKey);
      }
      if (HasUintKey) {
        output.WriteRawTag(72);
        output.WriteUInt64(UintKey);
      }
      if (HasStringKey) {
        output.WriteRawTag(82);
        output.WriteString(StringKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasFieldNumber) {
        output.WriteRawTag(8);
        output.WriteInt32(FieldNumber);
      }
      if (HasFieldName) {
        output.WriteRawTag(18);
        output.WriteString(FieldName);
      }
      if (HasFieldType) {
        output.WriteRawTag(24);
        output.WriteEnum((int) FieldType);
      }
      if (HasKeyType) {
        output.WriteRawTag(32);
        output.WriteEnum((int) KeyType);
      }
      if (HasValueType) {
        output.WriteRawTag(40);
        output.WriteEnum((int) ValueType);
      }
      if (HasIndex) {
        output.WriteRawTag(48);
        output.WriteUInt64(Index);
      }
      if (HasBoolKey) {
        output.WriteRawTag(56);
        output.WriteBool(BoolKey);
      }
      if (HasIntKey) {
        output.WriteRawTag(64);
        output.WriteInt64(IntKey);
      }
      if (HasUintKey) {
        output.WriteRawTag(72);
        output.WriteUInt64(UintKey);
      }
      if (HasStringKey) {
        output.WriteRawTag(82);
        output.WriteString(StringKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasFieldNumber) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FieldNumber);
      }
      if (HasFieldName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FieldName);
      }
      if (HasFieldType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FieldType);
      }
      if (HasKeyType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) KeyType);
      }
      if (HasValueType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ValueType);
      }
      if (HasIndex) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Index);
      }
      if (HasBoolKey) {
        size += 1 + 1;
      }
      if (HasIntKey) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(IntKey);
      }
      if (HasUintKey) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UintKey);
      }
      if (HasStringKey) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StringKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(FieldPathElement other) {
      if (other == null) {
        return;
      }
      if (other.HasFieldNumber) {
        FieldNumber = other.FieldNumber;
      }
      if (other.HasFieldName) {
        FieldName = other.FieldName;
      }
      if (other.HasFieldType) {
        FieldType = other.FieldType;
      }
      if (other.HasKeyType) {
        KeyType = other.KeyType;
      }
      if (other.HasValueType) {
        ValueType = other.ValueType;
      }
      switch (other.SubscriptCase) {
        case SubscriptOneofCase.Index:
          Index = other.Index;
          break;
        case SubscriptOneofCase.BoolKey:
          BoolKey = other.BoolKey;
          break;
        case SubscriptOneofCase.IntKey:
          IntKey = other.IntKey;
          break;
        case SubscriptOneofCase.UintKey:
          UintKey = other.UintKey;
          break;
        case SubscriptOneofCase.StringKey:
          StringKey = other.StringKey;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FieldNumber = input.ReadInt32();
            break;
          }
          case 18: {
            FieldName = input.ReadString();
            break;
          }
          case 24: {
            FieldType = (global::Google.Protobuf.Reflection.FieldDescriptorProto.Types.Type) input.ReadEnum();
            break;
          }
          case 32: {
            KeyType = (global::Google.Protobuf.Reflection.FieldDescriptorProto.Types.Type) input.ReadEnum();
            break;
          }
          case 40: {
            ValueType = (global::Google.Protobuf.Reflection.FieldDescriptorProto.Types.Type) input.ReadEnum();
            break;
          }
          case 48: {
            Index = input.ReadUInt64();
            break;
          }
          case 56: {
            BoolKey = input.ReadBool();
            break;
          }
          case 64: {
            IntKey = input.ReadInt64();
            break;
          }
          case 72: {
            UintKey = input.ReadUInt64();
            break;
          }
          case 82: {
            StringKey = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            FieldNumber = input.ReadInt32();
            break;
          }
          case 18: {
            FieldName = input.ReadString();
            break;
          }
          case 24: {
            FieldType = (global::Google.Protobuf.Reflection.FieldDescriptorProto.Types.Type) input.ReadEnum();
            break;
          }
          case 32: {
            KeyType = (global::Google.Protobuf.Reflection.FieldDescriptorProto.Types.Type) input.ReadEnum();
            break;
          }
          case 40: {
            ValueType = (global::Google.Protobuf.Reflection.FieldDescriptorProto.Types.Type) input.ReadEnum();
            break;
          }
          case 48: {
            Index = input.ReadUInt64();
            break;
          }
          case 56: {
            BoolKey = input.ReadBool();
            break;
          }
          case 64: {
            IntKey = input.ReadInt64();
            break;
          }
          case 72: {
            UintKey = input.ReadUInt64();
            break;
          }
          case 82: {
            StringKey = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
