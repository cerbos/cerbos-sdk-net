// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: validate/validate.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Validate {

  /// <summary>Holder for reflection information generated from validate/validate.proto</summary>
  public static partial class ValidateReflection {

    #region Descriptor
    /// <summary>File descriptor for validate/validate.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ValidateReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Chd2YWxpZGF0ZS92YWxpZGF0ZS5wcm90bxIIdmFsaWRhdGUaIGdvb2dsZS9w",
            "cm90b2J1Zi9kZXNjcmlwdG9yLnByb3RvGh5nb29nbGUvcHJvdG9idWYvZHVy",
            "YXRpb24ucHJvdG8aH2dvb2dsZS9wcm90b2J1Zi90aW1lc3RhbXAucHJvdG8i",
            "yAgKCkZpZWxkUnVsZXMSMAoHbWVzc2FnZRgRIAEoCzIWLnZhbGlkYXRlLk1l",
            "c3NhZ2VSdWxlc1IHbWVzc2FnZRIsCgVmbG9hdBgBIAEoCzIULnZhbGlkYXRl",
            "LkZsb2F0UnVsZXNIAFIFZmxvYXQSLwoGZG91YmxlGAIgASgLMhUudmFsaWRh",
            "dGUuRG91YmxlUnVsZXNIAFIGZG91YmxlEiwKBWludDMyGAMgASgLMhQudmFs",
            "aWRhdGUuSW50MzJSdWxlc0gAUgVpbnQzMhIsCgVpbnQ2NBgEIAEoCzIULnZh",
            "bGlkYXRlLkludDY0UnVsZXNIAFIFaW50NjQSLwoGdWludDMyGAUgASgLMhUu",
            "dmFsaWRhdGUuVUludDMyUnVsZXNIAFIGdWludDMyEi8KBnVpbnQ2NBgGIAEo",
            "CzIVLnZhbGlkYXRlLlVJbnQ2NFJ1bGVzSABSBnVpbnQ2NBIvCgZzaW50MzIY",
            "ByABKAsyFS52YWxpZGF0ZS5TSW50MzJSdWxlc0gAUgZzaW50MzISLwoGc2lu",
            "dDY0GAggASgLMhUudmFsaWRhdGUuU0ludDY0UnVsZXNIAFIGc2ludDY0EjIK",
            "B2ZpeGVkMzIYCSABKAsyFi52YWxpZGF0ZS5GaXhlZDMyUnVsZXNIAFIHZml4",
            "ZWQzMhIyCgdmaXhlZDY0GAogASgLMhYudmFsaWRhdGUuRml4ZWQ2NFJ1bGVz",
            "SABSB2ZpeGVkNjQSNQoIc2ZpeGVkMzIYCyABKAsyFy52YWxpZGF0ZS5TRml4",
            "ZWQzMlJ1bGVzSABSCHNmaXhlZDMyEjUKCHNmaXhlZDY0GAwgASgLMhcudmFs",
            "aWRhdGUuU0ZpeGVkNjRSdWxlc0gAUghzZml4ZWQ2NBIpCgRib29sGA0gASgL",
            "MhMudmFsaWRhdGUuQm9vbFJ1bGVzSABSBGJvb2wSLwoGc3RyaW5nGA4gASgL",
            "MhUudmFsaWRhdGUuU3RyaW5nUnVsZXNIAFIGc3RyaW5nEiwKBWJ5dGVzGA8g",
            "ASgLMhQudmFsaWRhdGUuQnl0ZXNSdWxlc0gAUgVieXRlcxIpCgRlbnVtGBAg",
            "ASgLMhMudmFsaWRhdGUuRW51bVJ1bGVzSABSBGVudW0SNQoIcmVwZWF0ZWQY",
            "EiABKAsyFy52YWxpZGF0ZS5SZXBlYXRlZFJ1bGVzSABSCHJlcGVhdGVkEiYK",
            "A21hcBgTIAEoCzISLnZhbGlkYXRlLk1hcFJ1bGVzSABSA21hcBImCgNhbnkY",
            "FCABKAsyEi52YWxpZGF0ZS5BbnlSdWxlc0gAUgNhbnkSNQoIZHVyYXRpb24Y",
            "FSABKAsyFy52YWxpZGF0ZS5EdXJhdGlvblJ1bGVzSABSCGR1cmF0aW9uEjgK",
            "CXRpbWVzdGFtcBgWIAEoCzIYLnZhbGlkYXRlLlRpbWVzdGFtcFJ1bGVzSABS",
            "CXRpbWVzdGFtcEIGCgR0eXBlIrABCgpGbG9hdFJ1bGVzEhQKBWNvbnN0GAEg",
            "ASgCUgVjb25zdBIOCgJsdBgCIAEoAlICbHQSEAoDbHRlGAMgASgCUgNsdGUS",
            "DgoCZ3QYBCABKAJSAmd0EhAKA2d0ZRgFIAEoAlIDZ3RlEg4KAmluGAYgAygC",
            "UgJpbhIVCgZub3RfaW4YByADKAJSBW5vdEluEiEKDGlnbm9yZV9lbXB0eRgI",
            "IAEoCFILaWdub3JlRW1wdHkisQEKC0RvdWJsZVJ1bGVzEhQKBWNvbnN0GAEg",
            "ASgBUgVjb25zdBIOCgJsdBgCIAEoAVICbHQSEAoDbHRlGAMgASgBUgNsdGUS",
            "DgoCZ3QYBCABKAFSAmd0EhAKA2d0ZRgFIAEoAVIDZ3RlEg4KAmluGAYgAygB",
            "UgJpbhIVCgZub3RfaW4YByADKAFSBW5vdEluEiEKDGlnbm9yZV9lbXB0eRgI",
            "IAEoCFILaWdub3JlRW1wdHkisAEKCkludDMyUnVsZXMSFAoFY29uc3QYASAB",
            "KAVSBWNvbnN0Eg4KAmx0GAIgASgFUgJsdBIQCgNsdGUYAyABKAVSA2x0ZRIO",
            "CgJndBgEIAEoBVICZ3QSEAoDZ3RlGAUgASgFUgNndGUSDgoCaW4YBiADKAVS",
            "AmluEhUKBm5vdF9pbhgHIAMoBVIFbm90SW4SIQoMaWdub3JlX2VtcHR5GAgg",
            "ASgIUgtpZ25vcmVFbXB0eSKwAQoKSW50NjRSdWxlcxIUCgVjb25zdBgBIAEo",
            "A1IFY29uc3QSDgoCbHQYAiABKANSAmx0EhAKA2x0ZRgDIAEoA1IDbHRlEg4K",
            "Amd0GAQgASgDUgJndBIQCgNndGUYBSABKANSA2d0ZRIOCgJpbhgGIAMoA1IC",
            "aW4SFQoGbm90X2luGAcgAygDUgVub3RJbhIhCgxpZ25vcmVfZW1wdHkYCCAB",
            "KAhSC2lnbm9yZUVtcHR5IrEBCgtVSW50MzJSdWxlcxIUCgVjb25zdBgBIAEo",
            "DVIFY29uc3QSDgoCbHQYAiABKA1SAmx0EhAKA2x0ZRgDIAEoDVIDbHRlEg4K",
            "Amd0GAQgASgNUgJndBIQCgNndGUYBSABKA1SA2d0ZRIOCgJpbhgGIAMoDVIC",
            "aW4SFQoGbm90X2luGAcgAygNUgVub3RJbhIhCgxpZ25vcmVfZW1wdHkYCCAB",
            "KAhSC2lnbm9yZUVtcHR5IrEBCgtVSW50NjRSdWxlcxIUCgVjb25zdBgBIAEo",
            "BFIFY29uc3QSDgoCbHQYAiABKARSAmx0EhAKA2x0ZRgDIAEoBFIDbHRlEg4K",
            "Amd0GAQgASgEUgJndBIQCgNndGUYBSABKARSA2d0ZRIOCgJpbhgGIAMoBFIC",
            "aW4SFQoGbm90X2luGAcgAygEUgVub3RJbhIhCgxpZ25vcmVfZW1wdHkYCCAB",
            "KAhSC2lnbm9yZUVtcHR5IrEBCgtTSW50MzJSdWxlcxIUCgVjb25zdBgBIAEo",
            "EVIFY29uc3QSDgoCbHQYAiABKBFSAmx0EhAKA2x0ZRgDIAEoEVIDbHRlEg4K",
            "Amd0GAQgASgRUgJndBIQCgNndGUYBSABKBFSA2d0ZRIOCgJpbhgGIAMoEVIC",
            "aW4SFQoGbm90X2luGAcgAygRUgVub3RJbhIhCgxpZ25vcmVfZW1wdHkYCCAB",
            "KAhSC2lnbm9yZUVtcHR5IrEBCgtTSW50NjRSdWxlcxIUCgVjb25zdBgBIAEo",
            "ElIFY29uc3QSDgoCbHQYAiABKBJSAmx0EhAKA2x0ZRgDIAEoElIDbHRlEg4K",
            "Amd0GAQgASgSUgJndBIQCgNndGUYBSABKBJSA2d0ZRIOCgJpbhgGIAMoElIC",
            "aW4SFQoGbm90X2luGAcgAygSUgVub3RJbhIhCgxpZ25vcmVfZW1wdHkYCCAB",
            "KAhSC2lnbm9yZUVtcHR5IrIBCgxGaXhlZDMyUnVsZXMSFAoFY29uc3QYASAB",
            "KAdSBWNvbnN0Eg4KAmx0GAIgASgHUgJsdBIQCgNsdGUYAyABKAdSA2x0ZRIO",
            "CgJndBgEIAEoB1ICZ3QSEAoDZ3RlGAUgASgHUgNndGUSDgoCaW4YBiADKAdS",
            "AmluEhUKBm5vdF9pbhgHIAMoB1IFbm90SW4SIQoMaWdub3JlX2VtcHR5GAgg",
            "ASgIUgtpZ25vcmVFbXB0eSKyAQoMRml4ZWQ2NFJ1bGVzEhQKBWNvbnN0GAEg",
            "ASgGUgVjb25zdBIOCgJsdBgCIAEoBlICbHQSEAoDbHRlGAMgASgGUgNsdGUS",
            "DgoCZ3QYBCABKAZSAmd0EhAKA2d0ZRgFIAEoBlIDZ3RlEg4KAmluGAYgAygG",
            "UgJpbhIVCgZub3RfaW4YByADKAZSBW5vdEluEiEKDGlnbm9yZV9lbXB0eRgI",
            "IAEoCFILaWdub3JlRW1wdHkiswEKDVNGaXhlZDMyUnVsZXMSFAoFY29uc3QY",
            "ASABKA9SBWNvbnN0Eg4KAmx0GAIgASgPUgJsdBIQCgNsdGUYAyABKA9SA2x0",
            "ZRIOCgJndBgEIAEoD1ICZ3QSEAoDZ3RlGAUgASgPUgNndGUSDgoCaW4YBiAD",
            "KA9SAmluEhUKBm5vdF9pbhgHIAMoD1IFbm90SW4SIQoMaWdub3JlX2VtcHR5",
            "GAggASgIUgtpZ25vcmVFbXB0eSKzAQoNU0ZpeGVkNjRSdWxlcxIUCgVjb25z",
            "dBgBIAEoEFIFY29uc3QSDgoCbHQYAiABKBBSAmx0EhAKA2x0ZRgDIAEoEFID",
            "bHRlEg4KAmd0GAQgASgQUgJndBIQCgNndGUYBSABKBBSA2d0ZRIOCgJpbhgG",
            "IAMoEFICaW4SFQoGbm90X2luGAcgAygQUgVub3RJbhIhCgxpZ25vcmVfZW1w",
            "dHkYCCABKAhSC2lnbm9yZUVtcHR5IiEKCUJvb2xSdWxlcxIUCgVjb25zdBgB",
            "IAEoCFIFY29uc3Qi1AUKC1N0cmluZ1J1bGVzEhQKBWNvbnN0GAEgASgJUgVj",
            "b25zdBIQCgNsZW4YEyABKARSA2xlbhIXCgdtaW5fbGVuGAIgASgEUgZtaW5M",
            "ZW4SFwoHbWF4X2xlbhgDIAEoBFIGbWF4TGVuEhsKCWxlbl9ieXRlcxgUIAEo",
            "BFIIbGVuQnl0ZXMSGwoJbWluX2J5dGVzGAQgASgEUghtaW5CeXRlcxIbCglt",
            "YXhfYnl0ZXMYBSABKARSCG1heEJ5dGVzEhgKB3BhdHRlcm4YBiABKAlSB3Bh",
            "dHRlcm4SFgoGcHJlZml4GAcgASgJUgZwcmVmaXgSFgoGc3VmZml4GAggASgJ",
            "UgZzdWZmaXgSGgoIY29udGFpbnMYCSABKAlSCGNvbnRhaW5zEiEKDG5vdF9j",
            "b250YWlucxgXIAEoCVILbm90Q29udGFpbnMSDgoCaW4YCiADKAlSAmluEhUK",
            "Bm5vdF9pbhgLIAMoCVIFbm90SW4SFgoFZW1haWwYDCABKAhIAFIFZW1haWwS",
            "HAoIaG9zdG5hbWUYDSABKAhIAFIIaG9zdG5hbWUSEAoCaXAYDiABKAhIAFIC",
            "aXASFAoEaXB2NBgPIAEoCEgAUgRpcHY0EhQKBGlwdjYYECABKAhIAFIEaXB2",
            "NhISCgN1cmkYESABKAhIAFIDdXJpEhkKB3VyaV9yZWYYEiABKAhIAFIGdXJp",
            "UmVmEhoKB2FkZHJlc3MYFSABKAhIAFIHYWRkcmVzcxIUCgR1dWlkGBYgASgI",
            "SABSBHV1aWQSQAoQd2VsbF9rbm93bl9yZWdleBgYIAEoDjIULnZhbGlkYXRl",
            "Lktub3duUmVnZXhIAFIOd2VsbEtub3duUmVnZXgSHAoGc3RyaWN0GBkgASgI",
            "OgR0cnVlUgZzdHJpY3QSIQoMaWdub3JlX2VtcHR5GBogASgIUgtpZ25vcmVF",
            "bXB0eUIMCgp3ZWxsX2tub3duIuICCgpCeXRlc1J1bGVzEhQKBWNvbnN0GAEg",
            "ASgMUgVjb25zdBIQCgNsZW4YDSABKARSA2xlbhIXCgdtaW5fbGVuGAIgASgE",
            "UgZtaW5MZW4SFwoHbWF4X2xlbhgDIAEoBFIGbWF4TGVuEhgKB3BhdHRlcm4Y",
            "BCABKAlSB3BhdHRlcm4SFgoGcHJlZml4GAUgASgMUgZwcmVmaXgSFgoGc3Vm",
            "Zml4GAYgASgMUgZzdWZmaXgSGgoIY29udGFpbnMYByABKAxSCGNvbnRhaW5z",
            "Eg4KAmluGAggAygMUgJpbhIVCgZub3RfaW4YCSADKAxSBW5vdEluEhAKAmlw",
            "GAogASgISABSAmlwEhQKBGlwdjQYCyABKAhIAFIEaXB2NBIUCgRpcHY2GAwg",
            "ASgISABSBGlwdjYSIQoMaWdub3JlX2VtcHR5GA4gASgIUgtpZ25vcmVFbXB0",
            "eUIMCgp3ZWxsX2tub3duImsKCUVudW1SdWxlcxIUCgVjb25zdBgBIAEoBVIF",
            "Y29uc3QSIQoMZGVmaW5lZF9vbmx5GAIgASgIUgtkZWZpbmVkT25seRIOCgJp",
            "bhgDIAMoBVICaW4SFQoGbm90X2luGAQgAygFUgVub3RJbiI+CgxNZXNzYWdl",
            "UnVsZXMSEgoEc2tpcBgBIAEoCFIEc2tpcBIaCghyZXF1aXJlZBgCIAEoCFII",
            "cmVxdWlyZWQisAEKDVJlcGVhdGVkUnVsZXMSGwoJbWluX2l0ZW1zGAEgASgE",
            "UghtaW5JdGVtcxIbCgltYXhfaXRlbXMYAiABKARSCG1heEl0ZW1zEhYKBnVu",
            "aXF1ZRgDIAEoCFIGdW5pcXVlEioKBWl0ZW1zGAQgASgLMhQudmFsaWRhdGUu",
            "RmllbGRSdWxlc1IFaXRlbXMSIQoMaWdub3JlX2VtcHR5GAUgASgIUgtpZ25v",
            "cmVFbXB0eSLcAQoITWFwUnVsZXMSGwoJbWluX3BhaXJzGAEgASgEUghtaW5Q",
            "YWlycxIbCgltYXhfcGFpcnMYAiABKARSCG1heFBhaXJzEhsKCW5vX3NwYXJz",
            "ZRgDIAEoCFIIbm9TcGFyc2USKAoEa2V5cxgEIAEoCzIULnZhbGlkYXRlLkZp",
            "ZWxkUnVsZXNSBGtleXMSLAoGdmFsdWVzGAUgASgLMhQudmFsaWRhdGUuRmll",
            "bGRSdWxlc1IGdmFsdWVzEiEKDGlnbm9yZV9lbXB0eRgGIAEoCFILaWdub3Jl",
            "RW1wdHkiTQoIQW55UnVsZXMSGgoIcmVxdWlyZWQYASABKAhSCHJlcXVpcmVk",
            "Eg4KAmluGAIgAygJUgJpbhIVCgZub3RfaW4YAyADKAlSBW5vdEluIukCCg1E",
            "dXJhdGlvblJ1bGVzEhoKCHJlcXVpcmVkGAEgASgIUghyZXF1aXJlZBIvCgVj",
            "b25zdBgCIAEoCzIZLmdvb2dsZS5wcm90b2J1Zi5EdXJhdGlvblIFY29uc3QS",
            "KQoCbHQYAyABKAsyGS5nb29nbGUucHJvdG9idWYuRHVyYXRpb25SAmx0EisK",
            "A2x0ZRgEIAEoCzIZLmdvb2dsZS5wcm90b2J1Zi5EdXJhdGlvblIDbHRlEikK",
            "Amd0GAUgASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uUgJndBIrCgNn",
            "dGUYBiABKAsyGS5nb29nbGUucHJvdG9idWYuRHVyYXRpb25SA2d0ZRIpCgJp",
            "bhgHIAMoCzIZLmdvb2dsZS5wcm90b2J1Zi5EdXJhdGlvblICaW4SMAoGbm90",
            "X2luGAggAygLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uUgVub3RJbiLz",
            "AgoOVGltZXN0YW1wUnVsZXMSGgoIcmVxdWlyZWQYASABKAhSCHJlcXVpcmVk",
            "EjAKBWNvbnN0GAIgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcFIF",
            "Y29uc3QSKgoCbHQYAyABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1w",
            "UgJsdBIsCgNsdGUYBCABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1w",
            "UgNsdGUSKgoCZ3QYBSABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1w",
            "UgJndBIsCgNndGUYBiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1w",
            "UgNndGUSFQoGbHRfbm93GAcgASgIUgVsdE5vdxIVCgZndF9ub3cYCCABKAhS",
            "BWd0Tm93EjEKBndpdGhpbhgJIAEoCzIZLmdvb2dsZS5wcm90b2J1Zi5EdXJh",
            "dGlvblIGd2l0aGluKkYKCktub3duUmVnZXgSCwoHVU5LTk9XThAAEhQKEEhU",
            "VFBfSEVBREVSX05BTUUQARIVChFIVFRQX0hFQURFUl9WQUxVRRACOjwKCGRp",
            "c2FibGVkEh8uZ29vZ2xlLnByb3RvYnVmLk1lc3NhZ2VPcHRpb25zGK8IIAEo",
            "CFIIZGlzYWJsZWQ6OgoHaWdub3JlZBIfLmdvb2dsZS5wcm90b2J1Zi5NZXNz",
            "YWdlT3B0aW9ucxiwCCABKAhSB2lnbm9yZWQ6OgoIcmVxdWlyZWQSHS5nb29n",
            "bGUucHJvdG9idWYuT25lb2ZPcHRpb25zGK8IIAEoCFIIcmVxdWlyZWQ6SgoF",
            "cnVsZXMSHS5nb29nbGUucHJvdG9idWYuRmllbGRPcHRpb25zGK8IIAEoCzIU",
            "LnZhbGlkYXRlLkZpZWxkUnVsZXNSBXJ1bGVzQlAKGmlvLmVudm95cHJveHku",
            "cGd2LnZhbGlkYXRlWjJnaXRodWIuY29tL2Vudm95cHJveHkvcHJvdG9jLWdl",
            "bi12YWxpZGF0ZS92YWxpZGF0ZQ=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.Reflection.DescriptorReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.DurationReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Validate.KnownRegex), }, new pb::Extension[] { ValidateExtensions.Disabled, ValidateExtensions.Ignored, ValidateExtensions.Required, ValidateExtensions.Rules }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Validate.FieldRules), global::Validate.FieldRules.Parser, new[]{ "Message", "Float", "Double", "Int32", "Int64", "Uint32", "Uint64", "Sint32", "Sint64", "Fixed32", "Fixed64", "Sfixed32", "Sfixed64", "Bool", "String", "Bytes", "Enum", "Repeated", "Map", "Any", "Duration", "Timestamp" }, new[]{ "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Validate.FloatRules), global::Validate.FloatRules.Parser, new[]{ "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn", "IgnoreEmpty" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Validate.DoubleRules), global::Validate.DoubleRules.Parser, new[]{ "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn", "IgnoreEmpty" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Validate.Int32Rules), global::Validate.Int32Rules.Parser, new[]{ "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn", "IgnoreEmpty" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Validate.Int64Rules), global::Validate.Int64Rules.Parser, new[]{ "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn", "IgnoreEmpty" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Validate.UInt32Rules), global::Validate.UInt32Rules.Parser, new[]{ "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn", "IgnoreEmpty" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Validate.UInt64Rules), global::Validate.UInt64Rules.Parser, new[]{ "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn", "IgnoreEmpty" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Validate.SInt32Rules), global::Validate.SInt32Rules.Parser, new[]{ "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn", "IgnoreEmpty" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Validate.SInt64Rules), global::Validate.SInt64Rules.Parser, new[]{ "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn", "IgnoreEmpty" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Validate.Fixed32Rules), global::Validate.Fixed32Rules.Parser, new[]{ "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn", "IgnoreEmpty" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Validate.Fixed64Rules), global::Validate.Fixed64Rules.Parser, new[]{ "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn", "IgnoreEmpty" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Validate.SFixed32Rules), global::Validate.SFixed32Rules.Parser, new[]{ "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn", "IgnoreEmpty" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Validate.SFixed64Rules), global::Validate.SFixed64Rules.Parser, new[]{ "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn", "IgnoreEmpty" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Validate.BoolRules), global::Validate.BoolRules.Parser, new[]{ "Const" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Validate.StringRules), global::Validate.StringRules.Parser, new[]{ "Const", "Len", "MinLen", "MaxLen", "LenBytes", "MinBytes", "MaxBytes", "Pattern", "Prefix", "Suffix", "Contains", "NotContains", "In", "NotIn", "Email", "Hostname", "Ip", "Ipv4", "Ipv6", "Uri", "UriRef", "Address", "Uuid", "WellKnownRegex", "Strict", "IgnoreEmpty" }, new[]{ "WellKnown" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Validate.BytesRules), global::Validate.BytesRules.Parser, new[]{ "Const", "Len", "MinLen", "MaxLen", "Pattern", "Prefix", "Suffix", "Contains", "In", "NotIn", "Ip", "Ipv4", "Ipv6", "IgnoreEmpty" }, new[]{ "WellKnown" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Validate.EnumRules), global::Validate.EnumRules.Parser, new[]{ "Const", "DefinedOnly", "In", "NotIn" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Validate.MessageRules), global::Validate.MessageRules.Parser, new[]{ "Skip", "Required" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Validate.RepeatedRules), global::Validate.RepeatedRules.Parser, new[]{ "MinItems", "MaxItems", "Unique", "Items", "IgnoreEmpty" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Validate.MapRules), global::Validate.MapRules.Parser, new[]{ "MinPairs", "MaxPairs", "NoSparse", "Keys", "Values", "IgnoreEmpty" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Validate.AnyRules), global::Validate.AnyRules.Parser, new[]{ "Required", "In", "NotIn" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Validate.DurationRules), global::Validate.DurationRules.Parser, new[]{ "Required", "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Validate.TimestampRules), global::Validate.TimestampRules.Parser, new[]{ "Required", "Const", "Lt", "Lte", "Gt", "Gte", "LtNow", "GtNow", "Within" }, null, null, null, null)
          }));
    }
    #endregion

  }
  /// <summary>Holder for extension identifiers generated from the top level of validate/validate.proto</summary>
  public static partial class ValidateExtensions {
    /// <summary>
    /// Disabled nullifies any validation rules for this message, including any
    /// message fields associated with it that do support validation.
    /// </summary>
    public static readonly pb::Extension<global::Google.Protobuf.Reflection.MessageOptions, bool> Disabled =
      new pb::Extension<global::Google.Protobuf.Reflection.MessageOptions, bool>(1071, pb::FieldCodec.ForBool(8568, false));
    /// <summary>
    /// Ignore skips generation of validation methods for this message.
    /// </summary>
    public static readonly pb::Extension<global::Google.Protobuf.Reflection.MessageOptions, bool> Ignored =
      new pb::Extension<global::Google.Protobuf.Reflection.MessageOptions, bool>(1072, pb::FieldCodec.ForBool(8576, false));
    /// <summary>
    /// Required ensures that exactly one the field options in a oneof is set;
    /// validation fails if no fields in the oneof are set.
    /// </summary>
    public static readonly pb::Extension<global::Google.Protobuf.Reflection.OneofOptions, bool> Required =
      new pb::Extension<global::Google.Protobuf.Reflection.OneofOptions, bool>(1071, pb::FieldCodec.ForBool(8568, false));
    /// <summary>
    /// Rules specify the validations to be performed on this field. By default,
    /// no validation is performed against a field.
    /// </summary>
    public static readonly pb::Extension<global::Google.Protobuf.Reflection.FieldOptions, global::Validate.FieldRules> Rules =
      new pb::Extension<global::Google.Protobuf.Reflection.FieldOptions, global::Validate.FieldRules>(1071, pb::FieldCodec.ForMessage(8570, global::Validate.FieldRules.Parser));
  }

  #region Enums
  /// <summary>
  /// WellKnownRegex contain some well-known patterns.
  /// </summary>
  public enum KnownRegex {
    [pbr::OriginalName("UNKNOWN")] Unknown = 0,
    /// <summary>
    /// HTTP header name as defined by RFC 7230.
    /// </summary>
    [pbr::OriginalName("HTTP_HEADER_NAME")] HttpHeaderName = 1,
    /// <summary>
    /// HTTP header value as defined by RFC 7230.
    /// </summary>
    [pbr::OriginalName("HTTP_HEADER_VALUE")] HttpHeaderValue = 2,
  }

  #endregion

  #region Messages
  /// <summary>
  /// FieldRules encapsulates the rules for each type of field. Depending on the
  /// field, the correct set should be used to ensure proper validations.
  /// </summary>
  public sealed partial class FieldRules : pb::IMessage<FieldRules>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FieldRules> _parser = new pb::MessageParser<FieldRules>(() => new FieldRules());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<FieldRules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Validate.ValidateReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FieldRules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FieldRules(FieldRules other) : this() {
      message_ = other.message_ != null ? other.message_.Clone() : null;
      switch (other.TypeCase) {
        case TypeOneofCase.Float:
          Float = other.Float.Clone();
          break;
        case TypeOneofCase.Double:
          Double = other.Double.Clone();
          break;
        case TypeOneofCase.Int32:
          Int32 = other.Int32.Clone();
          break;
        case TypeOneofCase.Int64:
          Int64 = other.Int64.Clone();
          break;
        case TypeOneofCase.Uint32:
          Uint32 = other.Uint32.Clone();
          break;
        case TypeOneofCase.Uint64:
          Uint64 = other.Uint64.Clone();
          break;
        case TypeOneofCase.Sint32:
          Sint32 = other.Sint32.Clone();
          break;
        case TypeOneofCase.Sint64:
          Sint64 = other.Sint64.Clone();
          break;
        case TypeOneofCase.Fixed32:
          Fixed32 = other.Fixed32.Clone();
          break;
        case TypeOneofCase.Fixed64:
          Fixed64 = other.Fixed64.Clone();
          break;
        case TypeOneofCase.Sfixed32:
          Sfixed32 = other.Sfixed32.Clone();
          break;
        case TypeOneofCase.Sfixed64:
          Sfixed64 = other.Sfixed64.Clone();
          break;
        case TypeOneofCase.Bool:
          Bool = other.Bool.Clone();
          break;
        case TypeOneofCase.String:
          String = other.String.Clone();
          break;
        case TypeOneofCase.Bytes:
          Bytes = other.Bytes.Clone();
          break;
        case TypeOneofCase.Enum:
          Enum = other.Enum.Clone();
          break;
        case TypeOneofCase.Repeated:
          Repeated = other.Repeated.Clone();
          break;
        case TypeOneofCase.Map:
          Map = other.Map.Clone();
          break;
        case TypeOneofCase.Any:
          Any = other.Any.Clone();
          break;
        case TypeOneofCase.Duration:
          Duration = other.Duration.Clone();
          break;
        case TypeOneofCase.Timestamp:
          Timestamp = other.Timestamp.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FieldRules Clone() {
      return new FieldRules(this);
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 17;
    private global::Validate.MessageRules message_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Validate.MessageRules Message {
      get { return message_; }
      set {
        message_ = value;
      }
    }

    /// <summary>Field number for the "float" field.</summary>
    public const int FloatFieldNumber = 1;
    /// <summary>
    /// Scalar Field Types
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Validate.FloatRules Float {
      get { return typeCase_ == TypeOneofCase.Float ? (global::Validate.FloatRules) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Float;
      }
    }

    /// <summary>Field number for the "double" field.</summary>
    public const int DoubleFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Validate.DoubleRules Double {
      get { return typeCase_ == TypeOneofCase.Double ? (global::Validate.DoubleRules) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Double;
      }
    }

    /// <summary>Field number for the "int32" field.</summary>
    public const int Int32FieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Validate.Int32Rules Int32 {
      get { return typeCase_ == TypeOneofCase.Int32 ? (global::Validate.Int32Rules) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Int32;
      }
    }

    /// <summary>Field number for the "int64" field.</summary>
    public const int Int64FieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Validate.Int64Rules Int64 {
      get { return typeCase_ == TypeOneofCase.Int64 ? (global::Validate.Int64Rules) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Int64;
      }
    }

    /// <summary>Field number for the "uint32" field.</summary>
    public const int Uint32FieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Validate.UInt32Rules Uint32 {
      get { return typeCase_ == TypeOneofCase.Uint32 ? (global::Validate.UInt32Rules) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Uint32;
      }
    }

    /// <summary>Field number for the "uint64" field.</summary>
    public const int Uint64FieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Validate.UInt64Rules Uint64 {
      get { return typeCase_ == TypeOneofCase.Uint64 ? (global::Validate.UInt64Rules) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Uint64;
      }
    }

    /// <summary>Field number for the "sint32" field.</summary>
    public const int Sint32FieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Validate.SInt32Rules Sint32 {
      get { return typeCase_ == TypeOneofCase.Sint32 ? (global::Validate.SInt32Rules) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Sint32;
      }
    }

    /// <summary>Field number for the "sint64" field.</summary>
    public const int Sint64FieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Validate.SInt64Rules Sint64 {
      get { return typeCase_ == TypeOneofCase.Sint64 ? (global::Validate.SInt64Rules) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Sint64;
      }
    }

    /// <summary>Field number for the "fixed32" field.</summary>
    public const int Fixed32FieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Validate.Fixed32Rules Fixed32 {
      get { return typeCase_ == TypeOneofCase.Fixed32 ? (global::Validate.Fixed32Rules) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Fixed32;
      }
    }

    /// <summary>Field number for the "fixed64" field.</summary>
    public const int Fixed64FieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Validate.Fixed64Rules Fixed64 {
      get { return typeCase_ == TypeOneofCase.Fixed64 ? (global::Validate.Fixed64Rules) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Fixed64;
      }
    }

    /// <summary>Field number for the "sfixed32" field.</summary>
    public const int Sfixed32FieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Validate.SFixed32Rules Sfixed32 {
      get { return typeCase_ == TypeOneofCase.Sfixed32 ? (global::Validate.SFixed32Rules) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Sfixed32;
      }
    }

    /// <summary>Field number for the "sfixed64" field.</summary>
    public const int Sfixed64FieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Validate.SFixed64Rules Sfixed64 {
      get { return typeCase_ == TypeOneofCase.Sfixed64 ? (global::Validate.SFixed64Rules) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Sfixed64;
      }
    }

    /// <summary>Field number for the "bool" field.</summary>
    public const int BoolFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Validate.BoolRules Bool {
      get { return typeCase_ == TypeOneofCase.Bool ? (global::Validate.BoolRules) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Bool;
      }
    }

    /// <summary>Field number for the "string" field.</summary>
    public const int StringFieldNumber = 14;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Validate.StringRules String {
      get { return typeCase_ == TypeOneofCase.String ? (global::Validate.StringRules) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.String;
      }
    }

    /// <summary>Field number for the "bytes" field.</summary>
    public const int BytesFieldNumber = 15;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Validate.BytesRules Bytes {
      get { return typeCase_ == TypeOneofCase.Bytes ? (global::Validate.BytesRules) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Bytes;
      }
    }

    /// <summary>Field number for the "enum" field.</summary>
    public const int EnumFieldNumber = 16;
    /// <summary>
    /// Complex Field Types
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Validate.EnumRules Enum {
      get { return typeCase_ == TypeOneofCase.Enum ? (global::Validate.EnumRules) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Enum;
      }
    }

    /// <summary>Field number for the "repeated" field.</summary>
    public const int RepeatedFieldNumber = 18;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Validate.RepeatedRules Repeated {
      get { return typeCase_ == TypeOneofCase.Repeated ? (global::Validate.RepeatedRules) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Repeated;
      }
    }

    /// <summary>Field number for the "map" field.</summary>
    public const int MapFieldNumber = 19;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Validate.MapRules Map {
      get { return typeCase_ == TypeOneofCase.Map ? (global::Validate.MapRules) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Map;
      }
    }

    /// <summary>Field number for the "any" field.</summary>
    public const int AnyFieldNumber = 20;
    /// <summary>
    /// Well-Known Field Types
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Validate.AnyRules Any {
      get { return typeCase_ == TypeOneofCase.Any ? (global::Validate.AnyRules) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Any;
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 21;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Validate.DurationRules Duration {
      get { return typeCase_ == TypeOneofCase.Duration ? (global::Validate.DurationRules) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Duration;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 22;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Validate.TimestampRules Timestamp {
      get { return typeCase_ == TypeOneofCase.Timestamp ? (global::Validate.TimestampRules) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Timestamp;
      }
    }

    private object type_;
    /// <summary>Enum of possible cases for the "type" oneof.</summary>
    public enum TypeOneofCase {
      None = 0,
      Float = 1,
      Double = 2,
      Int32 = 3,
      Int64 = 4,
      Uint32 = 5,
      Uint64 = 6,
      Sint32 = 7,
      Sint64 = 8,
      Fixed32 = 9,
      Fixed64 = 10,
      Sfixed32 = 11,
      Sfixed64 = 12,
      Bool = 13,
      String = 14,
      Bytes = 15,
      Enum = 16,
      Repeated = 18,
      Map = 19,
      Any = 20,
      Duration = 21,
      Timestamp = 22,
    }
    private TypeOneofCase typeCase_ = TypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TypeOneofCase TypeCase {
      get { return typeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearType() {
      typeCase_ = TypeOneofCase.None;
      type_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as FieldRules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(FieldRules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Message, other.Message)) return false;
      if (!object.Equals(Float, other.Float)) return false;
      if (!object.Equals(Double, other.Double)) return false;
      if (!object.Equals(Int32, other.Int32)) return false;
      if (!object.Equals(Int64, other.Int64)) return false;
      if (!object.Equals(Uint32, other.Uint32)) return false;
      if (!object.Equals(Uint64, other.Uint64)) return false;
      if (!object.Equals(Sint32, other.Sint32)) return false;
      if (!object.Equals(Sint64, other.Sint64)) return false;
      if (!object.Equals(Fixed32, other.Fixed32)) return false;
      if (!object.Equals(Fixed64, other.Fixed64)) return false;
      if (!object.Equals(Sfixed32, other.Sfixed32)) return false;
      if (!object.Equals(Sfixed64, other.Sfixed64)) return false;
      if (!object.Equals(Bool, other.Bool)) return false;
      if (!object.Equals(String, other.String)) return false;
      if (!object.Equals(Bytes, other.Bytes)) return false;
      if (!object.Equals(Enum, other.Enum)) return false;
      if (!object.Equals(Repeated, other.Repeated)) return false;
      if (!object.Equals(Map, other.Map)) return false;
      if (!object.Equals(Any, other.Any)) return false;
      if (!object.Equals(Duration, other.Duration)) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      if (TypeCase != other.TypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (message_ != null) hash ^= Message.GetHashCode();
      if (typeCase_ == TypeOneofCase.Float) hash ^= Float.GetHashCode();
      if (typeCase_ == TypeOneofCase.Double) hash ^= Double.GetHashCode();
      if (typeCase_ == TypeOneofCase.Int32) hash ^= Int32.GetHashCode();
      if (typeCase_ == TypeOneofCase.Int64) hash ^= Int64.GetHashCode();
      if (typeCase_ == TypeOneofCase.Uint32) hash ^= Uint32.GetHashCode();
      if (typeCase_ == TypeOneofCase.Uint64) hash ^= Uint64.GetHashCode();
      if (typeCase_ == TypeOneofCase.Sint32) hash ^= Sint32.GetHashCode();
      if (typeCase_ == TypeOneofCase.Sint64) hash ^= Sint64.GetHashCode();
      if (typeCase_ == TypeOneofCase.Fixed32) hash ^= Fixed32.GetHashCode();
      if (typeCase_ == TypeOneofCase.Fixed64) hash ^= Fixed64.GetHashCode();
      if (typeCase_ == TypeOneofCase.Sfixed32) hash ^= Sfixed32.GetHashCode();
      if (typeCase_ == TypeOneofCase.Sfixed64) hash ^= Sfixed64.GetHashCode();
      if (typeCase_ == TypeOneofCase.Bool) hash ^= Bool.GetHashCode();
      if (typeCase_ == TypeOneofCase.String) hash ^= String.GetHashCode();
      if (typeCase_ == TypeOneofCase.Bytes) hash ^= Bytes.GetHashCode();
      if (typeCase_ == TypeOneofCase.Enum) hash ^= Enum.GetHashCode();
      if (typeCase_ == TypeOneofCase.Repeated) hash ^= Repeated.GetHashCode();
      if (typeCase_ == TypeOneofCase.Map) hash ^= Map.GetHashCode();
      if (typeCase_ == TypeOneofCase.Any) hash ^= Any.GetHashCode();
      if (typeCase_ == TypeOneofCase.Duration) hash ^= Duration.GetHashCode();
      if (typeCase_ == TypeOneofCase.Timestamp) hash ^= Timestamp.GetHashCode();
      hash ^= (int) typeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (typeCase_ == TypeOneofCase.Float) {
        output.WriteRawTag(10);
        output.WriteMessage(Float);
      }
      if (typeCase_ == TypeOneofCase.Double) {
        output.WriteRawTag(18);
        output.WriteMessage(Double);
      }
      if (typeCase_ == TypeOneofCase.Int32) {
        output.WriteRawTag(26);
        output.WriteMessage(Int32);
      }
      if (typeCase_ == TypeOneofCase.Int64) {
        output.WriteRawTag(34);
        output.WriteMessage(Int64);
      }
      if (typeCase_ == TypeOneofCase.Uint32) {
        output.WriteRawTag(42);
        output.WriteMessage(Uint32);
      }
      if (typeCase_ == TypeOneofCase.Uint64) {
        output.WriteRawTag(50);
        output.WriteMessage(Uint64);
      }
      if (typeCase_ == TypeOneofCase.Sint32) {
        output.WriteRawTag(58);
        output.WriteMessage(Sint32);
      }
      if (typeCase_ == TypeOneofCase.Sint64) {
        output.WriteRawTag(66);
        output.WriteMessage(Sint64);
      }
      if (typeCase_ == TypeOneofCase.Fixed32) {
        output.WriteRawTag(74);
        output.WriteMessage(Fixed32);
      }
      if (typeCase_ == TypeOneofCase.Fixed64) {
        output.WriteRawTag(82);
        output.WriteMessage(Fixed64);
      }
      if (typeCase_ == TypeOneofCase.Sfixed32) {
        output.WriteRawTag(90);
        output.WriteMessage(Sfixed32);
      }
      if (typeCase_ == TypeOneofCase.Sfixed64) {
        output.WriteRawTag(98);
        output.WriteMessage(Sfixed64);
      }
      if (typeCase_ == TypeOneofCase.Bool) {
        output.WriteRawTag(106);
        output.WriteMessage(Bool);
      }
      if (typeCase_ == TypeOneofCase.String) {
        output.WriteRawTag(114);
        output.WriteMessage(String);
      }
      if (typeCase_ == TypeOneofCase.Bytes) {
        output.WriteRawTag(122);
        output.WriteMessage(Bytes);
      }
      if (typeCase_ == TypeOneofCase.Enum) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(Enum);
      }
      if (message_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(Message);
      }
      if (typeCase_ == TypeOneofCase.Repeated) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(Repeated);
      }
      if (typeCase_ == TypeOneofCase.Map) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(Map);
      }
      if (typeCase_ == TypeOneofCase.Any) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(Any);
      }
      if (typeCase_ == TypeOneofCase.Duration) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(Duration);
      }
      if (typeCase_ == TypeOneofCase.Timestamp) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (typeCase_ == TypeOneofCase.Float) {
        output.WriteRawTag(10);
        output.WriteMessage(Float);
      }
      if (typeCase_ == TypeOneofCase.Double) {
        output.WriteRawTag(18);
        output.WriteMessage(Double);
      }
      if (typeCase_ == TypeOneofCase.Int32) {
        output.WriteRawTag(26);
        output.WriteMessage(Int32);
      }
      if (typeCase_ == TypeOneofCase.Int64) {
        output.WriteRawTag(34);
        output.WriteMessage(Int64);
      }
      if (typeCase_ == TypeOneofCase.Uint32) {
        output.WriteRawTag(42);
        output.WriteMessage(Uint32);
      }
      if (typeCase_ == TypeOneofCase.Uint64) {
        output.WriteRawTag(50);
        output.WriteMessage(Uint64);
      }
      if (typeCase_ == TypeOneofCase.Sint32) {
        output.WriteRawTag(58);
        output.WriteMessage(Sint32);
      }
      if (typeCase_ == TypeOneofCase.Sint64) {
        output.WriteRawTag(66);
        output.WriteMessage(Sint64);
      }
      if (typeCase_ == TypeOneofCase.Fixed32) {
        output.WriteRawTag(74);
        output.WriteMessage(Fixed32);
      }
      if (typeCase_ == TypeOneofCase.Fixed64) {
        output.WriteRawTag(82);
        output.WriteMessage(Fixed64);
      }
      if (typeCase_ == TypeOneofCase.Sfixed32) {
        output.WriteRawTag(90);
        output.WriteMessage(Sfixed32);
      }
      if (typeCase_ == TypeOneofCase.Sfixed64) {
        output.WriteRawTag(98);
        output.WriteMessage(Sfixed64);
      }
      if (typeCase_ == TypeOneofCase.Bool) {
        output.WriteRawTag(106);
        output.WriteMessage(Bool);
      }
      if (typeCase_ == TypeOneofCase.String) {
        output.WriteRawTag(114);
        output.WriteMessage(String);
      }
      if (typeCase_ == TypeOneofCase.Bytes) {
        output.WriteRawTag(122);
        output.WriteMessage(Bytes);
      }
      if (typeCase_ == TypeOneofCase.Enum) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(Enum);
      }
      if (message_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(Message);
      }
      if (typeCase_ == TypeOneofCase.Repeated) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(Repeated);
      }
      if (typeCase_ == TypeOneofCase.Map) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(Map);
      }
      if (typeCase_ == TypeOneofCase.Any) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(Any);
      }
      if (typeCase_ == TypeOneofCase.Duration) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(Duration);
      }
      if (typeCase_ == TypeOneofCase.Timestamp) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (message_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Message);
      }
      if (typeCase_ == TypeOneofCase.Float) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Float);
      }
      if (typeCase_ == TypeOneofCase.Double) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Double);
      }
      if (typeCase_ == TypeOneofCase.Int32) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Int32);
      }
      if (typeCase_ == TypeOneofCase.Int64) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Int64);
      }
      if (typeCase_ == TypeOneofCase.Uint32) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Uint32);
      }
      if (typeCase_ == TypeOneofCase.Uint64) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Uint64);
      }
      if (typeCase_ == TypeOneofCase.Sint32) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sint32);
      }
      if (typeCase_ == TypeOneofCase.Sint64) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sint64);
      }
      if (typeCase_ == TypeOneofCase.Fixed32) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Fixed32);
      }
      if (typeCase_ == TypeOneofCase.Fixed64) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Fixed64);
      }
      if (typeCase_ == TypeOneofCase.Sfixed32) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sfixed32);
      }
      if (typeCase_ == TypeOneofCase.Sfixed64) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sfixed64);
      }
      if (typeCase_ == TypeOneofCase.Bool) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bool);
      }
      if (typeCase_ == TypeOneofCase.String) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(String);
      }
      if (typeCase_ == TypeOneofCase.Bytes) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bytes);
      }
      if (typeCase_ == TypeOneofCase.Enum) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Enum);
      }
      if (typeCase_ == TypeOneofCase.Repeated) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Repeated);
      }
      if (typeCase_ == TypeOneofCase.Map) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Map);
      }
      if (typeCase_ == TypeOneofCase.Any) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Any);
      }
      if (typeCase_ == TypeOneofCase.Duration) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Duration);
      }
      if (typeCase_ == TypeOneofCase.Timestamp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(FieldRules other) {
      if (other == null) {
        return;
      }
      if (other.message_ != null) {
        if (message_ == null) {
          Message = new global::Validate.MessageRules();
        }
        Message.MergeFrom(other.Message);
      }
      switch (other.TypeCase) {
        case TypeOneofCase.Float:
          if (Float == null) {
            Float = new global::Validate.FloatRules();
          }
          Float.MergeFrom(other.Float);
          break;
        case TypeOneofCase.Double:
          if (Double == null) {
            Double = new global::Validate.DoubleRules();
          }
          Double.MergeFrom(other.Double);
          break;
        case TypeOneofCase.Int32:
          if (Int32 == null) {
            Int32 = new global::Validate.Int32Rules();
          }
          Int32.MergeFrom(other.Int32);
          break;
        case TypeOneofCase.Int64:
          if (Int64 == null) {
            Int64 = new global::Validate.Int64Rules();
          }
          Int64.MergeFrom(other.Int64);
          break;
        case TypeOneofCase.Uint32:
          if (Uint32 == null) {
            Uint32 = new global::Validate.UInt32Rules();
          }
          Uint32.MergeFrom(other.Uint32);
          break;
        case TypeOneofCase.Uint64:
          if (Uint64 == null) {
            Uint64 = new global::Validate.UInt64Rules();
          }
          Uint64.MergeFrom(other.Uint64);
          break;
        case TypeOneofCase.Sint32:
          if (Sint32 == null) {
            Sint32 = new global::Validate.SInt32Rules();
          }
          Sint32.MergeFrom(other.Sint32);
          break;
        case TypeOneofCase.Sint64:
          if (Sint64 == null) {
            Sint64 = new global::Validate.SInt64Rules();
          }
          Sint64.MergeFrom(other.Sint64);
          break;
        case TypeOneofCase.Fixed32:
          if (Fixed32 == null) {
            Fixed32 = new global::Validate.Fixed32Rules();
          }
          Fixed32.MergeFrom(other.Fixed32);
          break;
        case TypeOneofCase.Fixed64:
          if (Fixed64 == null) {
            Fixed64 = new global::Validate.Fixed64Rules();
          }
          Fixed64.MergeFrom(other.Fixed64);
          break;
        case TypeOneofCase.Sfixed32:
          if (Sfixed32 == null) {
            Sfixed32 = new global::Validate.SFixed32Rules();
          }
          Sfixed32.MergeFrom(other.Sfixed32);
          break;
        case TypeOneofCase.Sfixed64:
          if (Sfixed64 == null) {
            Sfixed64 = new global::Validate.SFixed64Rules();
          }
          Sfixed64.MergeFrom(other.Sfixed64);
          break;
        case TypeOneofCase.Bool:
          if (Bool == null) {
            Bool = new global::Validate.BoolRules();
          }
          Bool.MergeFrom(other.Bool);
          break;
        case TypeOneofCase.String:
          if (String == null) {
            String = new global::Validate.StringRules();
          }
          String.MergeFrom(other.String);
          break;
        case TypeOneofCase.Bytes:
          if (Bytes == null) {
            Bytes = new global::Validate.BytesRules();
          }
          Bytes.MergeFrom(other.Bytes);
          break;
        case TypeOneofCase.Enum:
          if (Enum == null) {
            Enum = new global::Validate.EnumRules();
          }
          Enum.MergeFrom(other.Enum);
          break;
        case TypeOneofCase.Repeated:
          if (Repeated == null) {
            Repeated = new global::Validate.RepeatedRules();
          }
          Repeated.MergeFrom(other.Repeated);
          break;
        case TypeOneofCase.Map:
          if (Map == null) {
            Map = new global::Validate.MapRules();
          }
          Map.MergeFrom(other.Map);
          break;
        case TypeOneofCase.Any:
          if (Any == null) {
            Any = new global::Validate.AnyRules();
          }
          Any.MergeFrom(other.Any);
          break;
        case TypeOneofCase.Duration:
          if (Duration == null) {
            Duration = new global::Validate.DurationRules();
          }
          Duration.MergeFrom(other.Duration);
          break;
        case TypeOneofCase.Timestamp:
          if (Timestamp == null) {
            Timestamp = new global::Validate.TimestampRules();
          }
          Timestamp.MergeFrom(other.Timestamp);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Validate.FloatRules subBuilder = new global::Validate.FloatRules();
            if (typeCase_ == TypeOneofCase.Float) {
              subBuilder.MergeFrom(Float);
            }
            input.ReadMessage(subBuilder);
            Float = subBuilder;
            break;
          }
          case 18: {
            global::Validate.DoubleRules subBuilder = new global::Validate.DoubleRules();
            if (typeCase_ == TypeOneofCase.Double) {
              subBuilder.MergeFrom(Double);
            }
            input.ReadMessage(subBuilder);
            Double = subBuilder;
            break;
          }
          case 26: {
            global::Validate.Int32Rules subBuilder = new global::Validate.Int32Rules();
            if (typeCase_ == TypeOneofCase.Int32) {
              subBuilder.MergeFrom(Int32);
            }
            input.ReadMessage(subBuilder);
            Int32 = subBuilder;
            break;
          }
          case 34: {
            global::Validate.Int64Rules subBuilder = new global::Validate.Int64Rules();
            if (typeCase_ == TypeOneofCase.Int64) {
              subBuilder.MergeFrom(Int64);
            }
            input.ReadMessage(subBuilder);
            Int64 = subBuilder;
            break;
          }
          case 42: {
            global::Validate.UInt32Rules subBuilder = new global::Validate.UInt32Rules();
            if (typeCase_ == TypeOneofCase.Uint32) {
              subBuilder.MergeFrom(Uint32);
            }
            input.ReadMessage(subBuilder);
            Uint32 = subBuilder;
            break;
          }
          case 50: {
            global::Validate.UInt64Rules subBuilder = new global::Validate.UInt64Rules();
            if (typeCase_ == TypeOneofCase.Uint64) {
              subBuilder.MergeFrom(Uint64);
            }
            input.ReadMessage(subBuilder);
            Uint64 = subBuilder;
            break;
          }
          case 58: {
            global::Validate.SInt32Rules subBuilder = new global::Validate.SInt32Rules();
            if (typeCase_ == TypeOneofCase.Sint32) {
              subBuilder.MergeFrom(Sint32);
            }
            input.ReadMessage(subBuilder);
            Sint32 = subBuilder;
            break;
          }
          case 66: {
            global::Validate.SInt64Rules subBuilder = new global::Validate.SInt64Rules();
            if (typeCase_ == TypeOneofCase.Sint64) {
              subBuilder.MergeFrom(Sint64);
            }
            input.ReadMessage(subBuilder);
            Sint64 = subBuilder;
            break;
          }
          case 74: {
            global::Validate.Fixed32Rules subBuilder = new global::Validate.Fixed32Rules();
            if (typeCase_ == TypeOneofCase.Fixed32) {
              subBuilder.MergeFrom(Fixed32);
            }
            input.ReadMessage(subBuilder);
            Fixed32 = subBuilder;
            break;
          }
          case 82: {
            global::Validate.Fixed64Rules subBuilder = new global::Validate.Fixed64Rules();
            if (typeCase_ == TypeOneofCase.Fixed64) {
              subBuilder.MergeFrom(Fixed64);
            }
            input.ReadMessage(subBuilder);
            Fixed64 = subBuilder;
            break;
          }
          case 90: {
            global::Validate.SFixed32Rules subBuilder = new global::Validate.SFixed32Rules();
            if (typeCase_ == TypeOneofCase.Sfixed32) {
              subBuilder.MergeFrom(Sfixed32);
            }
            input.ReadMessage(subBuilder);
            Sfixed32 = subBuilder;
            break;
          }
          case 98: {
            global::Validate.SFixed64Rules subBuilder = new global::Validate.SFixed64Rules();
            if (typeCase_ == TypeOneofCase.Sfixed64) {
              subBuilder.MergeFrom(Sfixed64);
            }
            input.ReadMessage(subBuilder);
            Sfixed64 = subBuilder;
            break;
          }
          case 106: {
            global::Validate.BoolRules subBuilder = new global::Validate.BoolRules();
            if (typeCase_ == TypeOneofCase.Bool) {
              subBuilder.MergeFrom(Bool);
            }
            input.ReadMessage(subBuilder);
            Bool = subBuilder;
            break;
          }
          case 114: {
            global::Validate.StringRules subBuilder = new global::Validate.StringRules();
            if (typeCase_ == TypeOneofCase.String) {
              subBuilder.MergeFrom(String);
            }
            input.ReadMessage(subBuilder);
            String = subBuilder;
            break;
          }
          case 122: {
            global::Validate.BytesRules subBuilder = new global::Validate.BytesRules();
            if (typeCase_ == TypeOneofCase.Bytes) {
              subBuilder.MergeFrom(Bytes);
            }
            input.ReadMessage(subBuilder);
            Bytes = subBuilder;
            break;
          }
          case 130: {
            global::Validate.EnumRules subBuilder = new global::Validate.EnumRules();
            if (typeCase_ == TypeOneofCase.Enum) {
              subBuilder.MergeFrom(Enum);
            }
            input.ReadMessage(subBuilder);
            Enum = subBuilder;
            break;
          }
          case 138: {
            if (message_ == null) {
              Message = new global::Validate.MessageRules();
            }
            input.ReadMessage(Message);
            break;
          }
          case 146: {
            global::Validate.RepeatedRules subBuilder = new global::Validate.RepeatedRules();
            if (typeCase_ == TypeOneofCase.Repeated) {
              subBuilder.MergeFrom(Repeated);
            }
            input.ReadMessage(subBuilder);
            Repeated = subBuilder;
            break;
          }
          case 154: {
            global::Validate.MapRules subBuilder = new global::Validate.MapRules();
            if (typeCase_ == TypeOneofCase.Map) {
              subBuilder.MergeFrom(Map);
            }
            input.ReadMessage(subBuilder);
            Map = subBuilder;
            break;
          }
          case 162: {
            global::Validate.AnyRules subBuilder = new global::Validate.AnyRules();
            if (typeCase_ == TypeOneofCase.Any) {
              subBuilder.MergeFrom(Any);
            }
            input.ReadMessage(subBuilder);
            Any = subBuilder;
            break;
          }
          case 170: {
            global::Validate.DurationRules subBuilder = new global::Validate.DurationRules();
            if (typeCase_ == TypeOneofCase.Duration) {
              subBuilder.MergeFrom(Duration);
            }
            input.ReadMessage(subBuilder);
            Duration = subBuilder;
            break;
          }
          case 178: {
            global::Validate.TimestampRules subBuilder = new global::Validate.TimestampRules();
            if (typeCase_ == TypeOneofCase.Timestamp) {
              subBuilder.MergeFrom(Timestamp);
            }
            input.ReadMessage(subBuilder);
            Timestamp = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::Validate.FloatRules subBuilder = new global::Validate.FloatRules();
            if (typeCase_ == TypeOneofCase.Float) {
              subBuilder.MergeFrom(Float);
            }
            input.ReadMessage(subBuilder);
            Float = subBuilder;
            break;
          }
          case 18: {
            global::Validate.DoubleRules subBuilder = new global::Validate.DoubleRules();
            if (typeCase_ == TypeOneofCase.Double) {
              subBuilder.MergeFrom(Double);
            }
            input.ReadMessage(subBuilder);
            Double = subBuilder;
            break;
          }
          case 26: {
            global::Validate.Int32Rules subBuilder = new global::Validate.Int32Rules();
            if (typeCase_ == TypeOneofCase.Int32) {
              subBuilder.MergeFrom(Int32);
            }
            input.ReadMessage(subBuilder);
            Int32 = subBuilder;
            break;
          }
          case 34: {
            global::Validate.Int64Rules subBuilder = new global::Validate.Int64Rules();
            if (typeCase_ == TypeOneofCase.Int64) {
              subBuilder.MergeFrom(Int64);
            }
            input.ReadMessage(subBuilder);
            Int64 = subBuilder;
            break;
          }
          case 42: {
            global::Validate.UInt32Rules subBuilder = new global::Validate.UInt32Rules();
            if (typeCase_ == TypeOneofCase.Uint32) {
              subBuilder.MergeFrom(Uint32);
            }
            input.ReadMessage(subBuilder);
            Uint32 = subBuilder;
            break;
          }
          case 50: {
            global::Validate.UInt64Rules subBuilder = new global::Validate.UInt64Rules();
            if (typeCase_ == TypeOneofCase.Uint64) {
              subBuilder.MergeFrom(Uint64);
            }
            input.ReadMessage(subBuilder);
            Uint64 = subBuilder;
            break;
          }
          case 58: {
            global::Validate.SInt32Rules subBuilder = new global::Validate.SInt32Rules();
            if (typeCase_ == TypeOneofCase.Sint32) {
              subBuilder.MergeFrom(Sint32);
            }
            input.ReadMessage(subBuilder);
            Sint32 = subBuilder;
            break;
          }
          case 66: {
            global::Validate.SInt64Rules subBuilder = new global::Validate.SInt64Rules();
            if (typeCase_ == TypeOneofCase.Sint64) {
              subBuilder.MergeFrom(Sint64);
            }
            input.ReadMessage(subBuilder);
            Sint64 = subBuilder;
            break;
          }
          case 74: {
            global::Validate.Fixed32Rules subBuilder = new global::Validate.Fixed32Rules();
            if (typeCase_ == TypeOneofCase.Fixed32) {
              subBuilder.MergeFrom(Fixed32);
            }
            input.ReadMessage(subBuilder);
            Fixed32 = subBuilder;
            break;
          }
          case 82: {
            global::Validate.Fixed64Rules subBuilder = new global::Validate.Fixed64Rules();
            if (typeCase_ == TypeOneofCase.Fixed64) {
              subBuilder.MergeFrom(Fixed64);
            }
            input.ReadMessage(subBuilder);
            Fixed64 = subBuilder;
            break;
          }
          case 90: {
            global::Validate.SFixed32Rules subBuilder = new global::Validate.SFixed32Rules();
            if (typeCase_ == TypeOneofCase.Sfixed32) {
              subBuilder.MergeFrom(Sfixed32);
            }
            input.ReadMessage(subBuilder);
            Sfixed32 = subBuilder;
            break;
          }
          case 98: {
            global::Validate.SFixed64Rules subBuilder = new global::Validate.SFixed64Rules();
            if (typeCase_ == TypeOneofCase.Sfixed64) {
              subBuilder.MergeFrom(Sfixed64);
            }
            input.ReadMessage(subBuilder);
            Sfixed64 = subBuilder;
            break;
          }
          case 106: {
            global::Validate.BoolRules subBuilder = new global::Validate.BoolRules();
            if (typeCase_ == TypeOneofCase.Bool) {
              subBuilder.MergeFrom(Bool);
            }
            input.ReadMessage(subBuilder);
            Bool = subBuilder;
            break;
          }
          case 114: {
            global::Validate.StringRules subBuilder = new global::Validate.StringRules();
            if (typeCase_ == TypeOneofCase.String) {
              subBuilder.MergeFrom(String);
            }
            input.ReadMessage(subBuilder);
            String = subBuilder;
            break;
          }
          case 122: {
            global::Validate.BytesRules subBuilder = new global::Validate.BytesRules();
            if (typeCase_ == TypeOneofCase.Bytes) {
              subBuilder.MergeFrom(Bytes);
            }
            input.ReadMessage(subBuilder);
            Bytes = subBuilder;
            break;
          }
          case 130: {
            global::Validate.EnumRules subBuilder = new global::Validate.EnumRules();
            if (typeCase_ == TypeOneofCase.Enum) {
              subBuilder.MergeFrom(Enum);
            }
            input.ReadMessage(subBuilder);
            Enum = subBuilder;
            break;
          }
          case 138: {
            if (message_ == null) {
              Message = new global::Validate.MessageRules();
            }
            input.ReadMessage(Message);
            break;
          }
          case 146: {
            global::Validate.RepeatedRules subBuilder = new global::Validate.RepeatedRules();
            if (typeCase_ == TypeOneofCase.Repeated) {
              subBuilder.MergeFrom(Repeated);
            }
            input.ReadMessage(subBuilder);
            Repeated = subBuilder;
            break;
          }
          case 154: {
            global::Validate.MapRules subBuilder = new global::Validate.MapRules();
            if (typeCase_ == TypeOneofCase.Map) {
              subBuilder.MergeFrom(Map);
            }
            input.ReadMessage(subBuilder);
            Map = subBuilder;
            break;
          }
          case 162: {
            global::Validate.AnyRules subBuilder = new global::Validate.AnyRules();
            if (typeCase_ == TypeOneofCase.Any) {
              subBuilder.MergeFrom(Any);
            }
            input.ReadMessage(subBuilder);
            Any = subBuilder;
            break;
          }
          case 170: {
            global::Validate.DurationRules subBuilder = new global::Validate.DurationRules();
            if (typeCase_ == TypeOneofCase.Duration) {
              subBuilder.MergeFrom(Duration);
            }
            input.ReadMessage(subBuilder);
            Duration = subBuilder;
            break;
          }
          case 178: {
            global::Validate.TimestampRules subBuilder = new global::Validate.TimestampRules();
            if (typeCase_ == TypeOneofCase.Timestamp) {
              subBuilder.MergeFrom(Timestamp);
            }
            input.ReadMessage(subBuilder);
            Timestamp = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// FloatRules describes the constraints applied to `float` values
  /// </summary>
  public sealed partial class FloatRules : pb::IMessage<FloatRules>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FloatRules> _parser = new pb::MessageParser<FloatRules>(() => new FloatRules());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<FloatRules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Validate.ValidateReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FloatRules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FloatRules(FloatRules other) : this() {
      _hasBits0 = other._hasBits0;
      const_ = other.const_;
      lt_ = other.lt_;
      lte_ = other.lte_;
      gt_ = other.gt_;
      gte_ = other.gte_;
      in_ = other.in_.Clone();
      notIn_ = other.notIn_.Clone();
      ignoreEmpty_ = other.ignoreEmpty_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FloatRules Clone() {
      return new FloatRules(this);
    }

    /// <summary>Field number for the "const" field.</summary>
    public const int ConstFieldNumber = 1;
    private readonly static float ConstDefaultValue = 0F;

    private float const_;
    /// <summary>
    /// Const specifies that this field must be exactly the specified value
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Const {
      get { if ((_hasBits0 & 1) != 0) { return const_; } else { return ConstDefaultValue; } }
      set {
        _hasBits0 |= 1;
        const_ = value;
      }
    }
    /// <summary>Gets whether the "const" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasConst {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "const" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearConst() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "lt" field.</summary>
    public const int LtFieldNumber = 2;
    private readonly static float LtDefaultValue = 0F;

    private float lt_;
    /// <summary>
    /// Lt specifies that this field must be less than the specified value,
    /// exclusive
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Lt {
      get { if ((_hasBits0 & 2) != 0) { return lt_; } else { return LtDefaultValue; } }
      set {
        _hasBits0 |= 2;
        lt_ = value;
      }
    }
    /// <summary>Gets whether the "lt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLt {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "lt" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLt() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "lte" field.</summary>
    public const int LteFieldNumber = 3;
    private readonly static float LteDefaultValue = 0F;

    private float lte_;
    /// <summary>
    /// Lte specifies that this field must be less than or equal to the
    /// specified value, inclusive
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Lte {
      get { if ((_hasBits0 & 4) != 0) { return lte_; } else { return LteDefaultValue; } }
      set {
        _hasBits0 |= 4;
        lte_ = value;
      }
    }
    /// <summary>Gets whether the "lte" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLte {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "lte" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLte() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "gt" field.</summary>
    public const int GtFieldNumber = 4;
    private readonly static float GtDefaultValue = 0F;

    private float gt_;
    /// <summary>
    /// Gt specifies that this field must be greater than the specified value,
    /// exclusive. If the value of Gt is larger than a specified Lt or Lte, the
    /// range is reversed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Gt {
      get { if ((_hasBits0 & 8) != 0) { return gt_; } else { return GtDefaultValue; } }
      set {
        _hasBits0 |= 8;
        gt_ = value;
      }
    }
    /// <summary>Gets whether the "gt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGt {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "gt" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGt() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "gte" field.</summary>
    public const int GteFieldNumber = 5;
    private readonly static float GteDefaultValue = 0F;

    private float gte_;
    /// <summary>
    /// Gte specifies that this field must be greater than or equal to the
    /// specified value, inclusive. If the value of Gte is larger than a
    /// specified Lt or Lte, the range is reversed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Gte {
      get { if ((_hasBits0 & 16) != 0) { return gte_; } else { return GteDefaultValue; } }
      set {
        _hasBits0 |= 16;
        gte_ = value;
      }
    }
    /// <summary>Gets whether the "gte" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGte {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "gte" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGte() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "in" field.</summary>
    public const int InFieldNumber = 6;
    private static readonly pb::FieldCodec<float> _repeated_in_codec
        = pb::FieldCodec.ForFloat(53);
    private readonly pbc::RepeatedField<float> in_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// In specifies that this field must be equal to one of the specified
    /// values
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<float> In {
      get { return in_; }
    }

    /// <summary>Field number for the "not_in" field.</summary>
    public const int NotInFieldNumber = 7;
    private static readonly pb::FieldCodec<float> _repeated_notIn_codec
        = pb::FieldCodec.ForFloat(61);
    private readonly pbc::RepeatedField<float> notIn_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// NotIn specifies that this field cannot be equal to one of the specified
    /// values
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<float> NotIn {
      get { return notIn_; }
    }

    /// <summary>Field number for the "ignore_empty" field.</summary>
    public const int IgnoreEmptyFieldNumber = 8;
    private readonly static bool IgnoreEmptyDefaultValue = false;

    private bool ignoreEmpty_;
    /// <summary>
    /// IgnoreEmpty specifies that the validation rules of this field should be
    /// evaluated only if the field is not empty
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IgnoreEmpty {
      get { if ((_hasBits0 & 32) != 0) { return ignoreEmpty_; } else { return IgnoreEmptyDefaultValue; } }
      set {
        _hasBits0 |= 32;
        ignoreEmpty_ = value;
      }
    }
    /// <summary>Gets whether the "ignore_empty" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIgnoreEmpty {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "ignore_empty" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIgnoreEmpty() {
      _hasBits0 &= ~32;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as FloatRules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(FloatRules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Const, other.Const)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Lt, other.Lt)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Lte, other.Lte)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Gt, other.Gt)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Gte, other.Gte)) return false;
      if(!in_.Equals(other.in_)) return false;
      if(!notIn_.Equals(other.notIn_)) return false;
      if (IgnoreEmpty != other.IgnoreEmpty) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasConst) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Const);
      if (HasLt) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Lt);
      if (HasLte) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Lte);
      if (HasGt) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Gt);
      if (HasGte) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Gte);
      hash ^= in_.GetHashCode();
      hash ^= notIn_.GetHashCode();
      if (HasIgnoreEmpty) hash ^= IgnoreEmpty.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasConst) {
        output.WriteRawTag(13);
        output.WriteFloat(Const);
      }
      if (HasLt) {
        output.WriteRawTag(21);
        output.WriteFloat(Lt);
      }
      if (HasLte) {
        output.WriteRawTag(29);
        output.WriteFloat(Lte);
      }
      if (HasGt) {
        output.WriteRawTag(37);
        output.WriteFloat(Gt);
      }
      if (HasGte) {
        output.WriteRawTag(45);
        output.WriteFloat(Gte);
      }
      in_.WriteTo(output, _repeated_in_codec);
      notIn_.WriteTo(output, _repeated_notIn_codec);
      if (HasIgnoreEmpty) {
        output.WriteRawTag(64);
        output.WriteBool(IgnoreEmpty);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasConst) {
        output.WriteRawTag(13);
        output.WriteFloat(Const);
      }
      if (HasLt) {
        output.WriteRawTag(21);
        output.WriteFloat(Lt);
      }
      if (HasLte) {
        output.WriteRawTag(29);
        output.WriteFloat(Lte);
      }
      if (HasGt) {
        output.WriteRawTag(37);
        output.WriteFloat(Gt);
      }
      if (HasGte) {
        output.WriteRawTag(45);
        output.WriteFloat(Gte);
      }
      in_.WriteTo(ref output, _repeated_in_codec);
      notIn_.WriteTo(ref output, _repeated_notIn_codec);
      if (HasIgnoreEmpty) {
        output.WriteRawTag(64);
        output.WriteBool(IgnoreEmpty);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasConst) {
        size += 1 + 4;
      }
      if (HasLt) {
        size += 1 + 4;
      }
      if (HasLte) {
        size += 1 + 4;
      }
      if (HasGt) {
        size += 1 + 4;
      }
      if (HasGte) {
        size += 1 + 4;
      }
      size += in_.CalculateSize(_repeated_in_codec);
      size += notIn_.CalculateSize(_repeated_notIn_codec);
      if (HasIgnoreEmpty) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(FloatRules other) {
      if (other == null) {
        return;
      }
      if (other.HasConst) {
        Const = other.Const;
      }
      if (other.HasLt) {
        Lt = other.Lt;
      }
      if (other.HasLte) {
        Lte = other.Lte;
      }
      if (other.HasGt) {
        Gt = other.Gt;
      }
      if (other.HasGte) {
        Gte = other.Gte;
      }
      in_.Add(other.in_);
      notIn_.Add(other.notIn_);
      if (other.HasIgnoreEmpty) {
        IgnoreEmpty = other.IgnoreEmpty;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Const = input.ReadFloat();
            break;
          }
          case 21: {
            Lt = input.ReadFloat();
            break;
          }
          case 29: {
            Lte = input.ReadFloat();
            break;
          }
          case 37: {
            Gt = input.ReadFloat();
            break;
          }
          case 45: {
            Gte = input.ReadFloat();
            break;
          }
          case 50:
          case 53: {
            in_.AddEntriesFrom(input, _repeated_in_codec);
            break;
          }
          case 58:
          case 61: {
            notIn_.AddEntriesFrom(input, _repeated_notIn_codec);
            break;
          }
          case 64: {
            IgnoreEmpty = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            Const = input.ReadFloat();
            break;
          }
          case 21: {
            Lt = input.ReadFloat();
            break;
          }
          case 29: {
            Lte = input.ReadFloat();
            break;
          }
          case 37: {
            Gt = input.ReadFloat();
            break;
          }
          case 45: {
            Gte = input.ReadFloat();
            break;
          }
          case 50:
          case 53: {
            in_.AddEntriesFrom(ref input, _repeated_in_codec);
            break;
          }
          case 58:
          case 61: {
            notIn_.AddEntriesFrom(ref input, _repeated_notIn_codec);
            break;
          }
          case 64: {
            IgnoreEmpty = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// DoubleRules describes the constraints applied to `double` values
  /// </summary>
  public sealed partial class DoubleRules : pb::IMessage<DoubleRules>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DoubleRules> _parser = new pb::MessageParser<DoubleRules>(() => new DoubleRules());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<DoubleRules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Validate.ValidateReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DoubleRules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DoubleRules(DoubleRules other) : this() {
      _hasBits0 = other._hasBits0;
      const_ = other.const_;
      lt_ = other.lt_;
      lte_ = other.lte_;
      gt_ = other.gt_;
      gte_ = other.gte_;
      in_ = other.in_.Clone();
      notIn_ = other.notIn_.Clone();
      ignoreEmpty_ = other.ignoreEmpty_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DoubleRules Clone() {
      return new DoubleRules(this);
    }

    /// <summary>Field number for the "const" field.</summary>
    public const int ConstFieldNumber = 1;
    private readonly static double ConstDefaultValue = 0D;

    private double const_;
    /// <summary>
    /// Const specifies that this field must be exactly the specified value
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Const {
      get { if ((_hasBits0 & 1) != 0) { return const_; } else { return ConstDefaultValue; } }
      set {
        _hasBits0 |= 1;
        const_ = value;
      }
    }
    /// <summary>Gets whether the "const" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasConst {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "const" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearConst() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "lt" field.</summary>
    public const int LtFieldNumber = 2;
    private readonly static double LtDefaultValue = 0D;

    private double lt_;
    /// <summary>
    /// Lt specifies that this field must be less than the specified value,
    /// exclusive
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Lt {
      get { if ((_hasBits0 & 2) != 0) { return lt_; } else { return LtDefaultValue; } }
      set {
        _hasBits0 |= 2;
        lt_ = value;
      }
    }
    /// <summary>Gets whether the "lt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLt {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "lt" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLt() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "lte" field.</summary>
    public const int LteFieldNumber = 3;
    private readonly static double LteDefaultValue = 0D;

    private double lte_;
    /// <summary>
    /// Lte specifies that this field must be less than or equal to the
    /// specified value, inclusive
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Lte {
      get { if ((_hasBits0 & 4) != 0) { return lte_; } else { return LteDefaultValue; } }
      set {
        _hasBits0 |= 4;
        lte_ = value;
      }
    }
    /// <summary>Gets whether the "lte" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLte {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "lte" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLte() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "gt" field.</summary>
    public const int GtFieldNumber = 4;
    private readonly static double GtDefaultValue = 0D;

    private double gt_;
    /// <summary>
    /// Gt specifies that this field must be greater than the specified value,
    /// exclusive. If the value of Gt is larger than a specified Lt or Lte, the
    /// range is reversed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Gt {
      get { if ((_hasBits0 & 8) != 0) { return gt_; } else { return GtDefaultValue; } }
      set {
        _hasBits0 |= 8;
        gt_ = value;
      }
    }
    /// <summary>Gets whether the "gt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGt {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "gt" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGt() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "gte" field.</summary>
    public const int GteFieldNumber = 5;
    private readonly static double GteDefaultValue = 0D;

    private double gte_;
    /// <summary>
    /// Gte specifies that this field must be greater than or equal to the
    /// specified value, inclusive. If the value of Gte is larger than a
    /// specified Lt or Lte, the range is reversed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Gte {
      get { if ((_hasBits0 & 16) != 0) { return gte_; } else { return GteDefaultValue; } }
      set {
        _hasBits0 |= 16;
        gte_ = value;
      }
    }
    /// <summary>Gets whether the "gte" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGte {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "gte" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGte() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "in" field.</summary>
    public const int InFieldNumber = 6;
    private static readonly pb::FieldCodec<double> _repeated_in_codec
        = pb::FieldCodec.ForDouble(49);
    private readonly pbc::RepeatedField<double> in_ = new pbc::RepeatedField<double>();
    /// <summary>
    /// In specifies that this field must be equal to one of the specified
    /// values
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<double> In {
      get { return in_; }
    }

    /// <summary>Field number for the "not_in" field.</summary>
    public const int NotInFieldNumber = 7;
    private static readonly pb::FieldCodec<double> _repeated_notIn_codec
        = pb::FieldCodec.ForDouble(57);
    private readonly pbc::RepeatedField<double> notIn_ = new pbc::RepeatedField<double>();
    /// <summary>
    /// NotIn specifies that this field cannot be equal to one of the specified
    /// values
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<double> NotIn {
      get { return notIn_; }
    }

    /// <summary>Field number for the "ignore_empty" field.</summary>
    public const int IgnoreEmptyFieldNumber = 8;
    private readonly static bool IgnoreEmptyDefaultValue = false;

    private bool ignoreEmpty_;
    /// <summary>
    /// IgnoreEmpty specifies that the validation rules of this field should be
    /// evaluated only if the field is not empty
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IgnoreEmpty {
      get { if ((_hasBits0 & 32) != 0) { return ignoreEmpty_; } else { return IgnoreEmptyDefaultValue; } }
      set {
        _hasBits0 |= 32;
        ignoreEmpty_ = value;
      }
    }
    /// <summary>Gets whether the "ignore_empty" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIgnoreEmpty {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "ignore_empty" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIgnoreEmpty() {
      _hasBits0 &= ~32;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as DoubleRules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(DoubleRules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Const, other.Const)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Lt, other.Lt)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Lte, other.Lte)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Gt, other.Gt)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Gte, other.Gte)) return false;
      if(!in_.Equals(other.in_)) return false;
      if(!notIn_.Equals(other.notIn_)) return false;
      if (IgnoreEmpty != other.IgnoreEmpty) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasConst) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Const);
      if (HasLt) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Lt);
      if (HasLte) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Lte);
      if (HasGt) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Gt);
      if (HasGte) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Gte);
      hash ^= in_.GetHashCode();
      hash ^= notIn_.GetHashCode();
      if (HasIgnoreEmpty) hash ^= IgnoreEmpty.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasConst) {
        output.WriteRawTag(9);
        output.WriteDouble(Const);
      }
      if (HasLt) {
        output.WriteRawTag(17);
        output.WriteDouble(Lt);
      }
      if (HasLte) {
        output.WriteRawTag(25);
        output.WriteDouble(Lte);
      }
      if (HasGt) {
        output.WriteRawTag(33);
        output.WriteDouble(Gt);
      }
      if (HasGte) {
        output.WriteRawTag(41);
        output.WriteDouble(Gte);
      }
      in_.WriteTo(output, _repeated_in_codec);
      notIn_.WriteTo(output, _repeated_notIn_codec);
      if (HasIgnoreEmpty) {
        output.WriteRawTag(64);
        output.WriteBool(IgnoreEmpty);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasConst) {
        output.WriteRawTag(9);
        output.WriteDouble(Const);
      }
      if (HasLt) {
        output.WriteRawTag(17);
        output.WriteDouble(Lt);
      }
      if (HasLte) {
        output.WriteRawTag(25);
        output.WriteDouble(Lte);
      }
      if (HasGt) {
        output.WriteRawTag(33);
        output.WriteDouble(Gt);
      }
      if (HasGte) {
        output.WriteRawTag(41);
        output.WriteDouble(Gte);
      }
      in_.WriteTo(ref output, _repeated_in_codec);
      notIn_.WriteTo(ref output, _repeated_notIn_codec);
      if (HasIgnoreEmpty) {
        output.WriteRawTag(64);
        output.WriteBool(IgnoreEmpty);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasConst) {
        size += 1 + 8;
      }
      if (HasLt) {
        size += 1 + 8;
      }
      if (HasLte) {
        size += 1 + 8;
      }
      if (HasGt) {
        size += 1 + 8;
      }
      if (HasGte) {
        size += 1 + 8;
      }
      size += in_.CalculateSize(_repeated_in_codec);
      size += notIn_.CalculateSize(_repeated_notIn_codec);
      if (HasIgnoreEmpty) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(DoubleRules other) {
      if (other == null) {
        return;
      }
      if (other.HasConst) {
        Const = other.Const;
      }
      if (other.HasLt) {
        Lt = other.Lt;
      }
      if (other.HasLte) {
        Lte = other.Lte;
      }
      if (other.HasGt) {
        Gt = other.Gt;
      }
      if (other.HasGte) {
        Gte = other.Gte;
      }
      in_.Add(other.in_);
      notIn_.Add(other.notIn_);
      if (other.HasIgnoreEmpty) {
        IgnoreEmpty = other.IgnoreEmpty;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Const = input.ReadDouble();
            break;
          }
          case 17: {
            Lt = input.ReadDouble();
            break;
          }
          case 25: {
            Lte = input.ReadDouble();
            break;
          }
          case 33: {
            Gt = input.ReadDouble();
            break;
          }
          case 41: {
            Gte = input.ReadDouble();
            break;
          }
          case 50:
          case 49: {
            in_.AddEntriesFrom(input, _repeated_in_codec);
            break;
          }
          case 58:
          case 57: {
            notIn_.AddEntriesFrom(input, _repeated_notIn_codec);
            break;
          }
          case 64: {
            IgnoreEmpty = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            Const = input.ReadDouble();
            break;
          }
          case 17: {
            Lt = input.ReadDouble();
            break;
          }
          case 25: {
            Lte = input.ReadDouble();
            break;
          }
          case 33: {
            Gt = input.ReadDouble();
            break;
          }
          case 41: {
            Gte = input.ReadDouble();
            break;
          }
          case 50:
          case 49: {
            in_.AddEntriesFrom(ref input, _repeated_in_codec);
            break;
          }
          case 58:
          case 57: {
            notIn_.AddEntriesFrom(ref input, _repeated_notIn_codec);
            break;
          }
          case 64: {
            IgnoreEmpty = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Int32Rules describes the constraints applied to `int32` values
  /// </summary>
  public sealed partial class Int32Rules : pb::IMessage<Int32Rules>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Int32Rules> _parser = new pb::MessageParser<Int32Rules>(() => new Int32Rules());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Int32Rules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Validate.ValidateReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Int32Rules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Int32Rules(Int32Rules other) : this() {
      _hasBits0 = other._hasBits0;
      const_ = other.const_;
      lt_ = other.lt_;
      lte_ = other.lte_;
      gt_ = other.gt_;
      gte_ = other.gte_;
      in_ = other.in_.Clone();
      notIn_ = other.notIn_.Clone();
      ignoreEmpty_ = other.ignoreEmpty_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Int32Rules Clone() {
      return new Int32Rules(this);
    }

    /// <summary>Field number for the "const" field.</summary>
    public const int ConstFieldNumber = 1;
    private readonly static int ConstDefaultValue = 0;

    private int const_;
    /// <summary>
    /// Const specifies that this field must be exactly the specified value
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Const {
      get { if ((_hasBits0 & 1) != 0) { return const_; } else { return ConstDefaultValue; } }
      set {
        _hasBits0 |= 1;
        const_ = value;
      }
    }
    /// <summary>Gets whether the "const" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasConst {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "const" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearConst() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "lt" field.</summary>
    public const int LtFieldNumber = 2;
    private readonly static int LtDefaultValue = 0;

    private int lt_;
    /// <summary>
    /// Lt specifies that this field must be less than the specified value,
    /// exclusive
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Lt {
      get { if ((_hasBits0 & 2) != 0) { return lt_; } else { return LtDefaultValue; } }
      set {
        _hasBits0 |= 2;
        lt_ = value;
      }
    }
    /// <summary>Gets whether the "lt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLt {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "lt" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLt() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "lte" field.</summary>
    public const int LteFieldNumber = 3;
    private readonly static int LteDefaultValue = 0;

    private int lte_;
    /// <summary>
    /// Lte specifies that this field must be less than or equal to the
    /// specified value, inclusive
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Lte {
      get { if ((_hasBits0 & 4) != 0) { return lte_; } else { return LteDefaultValue; } }
      set {
        _hasBits0 |= 4;
        lte_ = value;
      }
    }
    /// <summary>Gets whether the "lte" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLte {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "lte" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLte() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "gt" field.</summary>
    public const int GtFieldNumber = 4;
    private readonly static int GtDefaultValue = 0;

    private int gt_;
    /// <summary>
    /// Gt specifies that this field must be greater than the specified value,
    /// exclusive. If the value of Gt is larger than a specified Lt or Lte, the
    /// range is reversed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Gt {
      get { if ((_hasBits0 & 8) != 0) { return gt_; } else { return GtDefaultValue; } }
      set {
        _hasBits0 |= 8;
        gt_ = value;
      }
    }
    /// <summary>Gets whether the "gt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGt {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "gt" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGt() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "gte" field.</summary>
    public const int GteFieldNumber = 5;
    private readonly static int GteDefaultValue = 0;

    private int gte_;
    /// <summary>
    /// Gte specifies that this field must be greater than or equal to the
    /// specified value, inclusive. If the value of Gte is larger than a
    /// specified Lt or Lte, the range is reversed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Gte {
      get { if ((_hasBits0 & 16) != 0) { return gte_; } else { return GteDefaultValue; } }
      set {
        _hasBits0 |= 16;
        gte_ = value;
      }
    }
    /// <summary>Gets whether the "gte" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGte {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "gte" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGte() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "in" field.</summary>
    public const int InFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_in_codec
        = pb::FieldCodec.ForInt32(48);
    private readonly pbc::RepeatedField<int> in_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// In specifies that this field must be equal to one of the specified
    /// values
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> In {
      get { return in_; }
    }

    /// <summary>Field number for the "not_in" field.</summary>
    public const int NotInFieldNumber = 7;
    private static readonly pb::FieldCodec<int> _repeated_notIn_codec
        = pb::FieldCodec.ForInt32(56);
    private readonly pbc::RepeatedField<int> notIn_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// NotIn specifies that this field cannot be equal to one of the specified
    /// values
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> NotIn {
      get { return notIn_; }
    }

    /// <summary>Field number for the "ignore_empty" field.</summary>
    public const int IgnoreEmptyFieldNumber = 8;
    private readonly static bool IgnoreEmptyDefaultValue = false;

    private bool ignoreEmpty_;
    /// <summary>
    /// IgnoreEmpty specifies that the validation rules of this field should be
    /// evaluated only if the field is not empty
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IgnoreEmpty {
      get { if ((_hasBits0 & 32) != 0) { return ignoreEmpty_; } else { return IgnoreEmptyDefaultValue; } }
      set {
        _hasBits0 |= 32;
        ignoreEmpty_ = value;
      }
    }
    /// <summary>Gets whether the "ignore_empty" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIgnoreEmpty {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "ignore_empty" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIgnoreEmpty() {
      _hasBits0 &= ~32;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Int32Rules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Int32Rules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Const != other.Const) return false;
      if (Lt != other.Lt) return false;
      if (Lte != other.Lte) return false;
      if (Gt != other.Gt) return false;
      if (Gte != other.Gte) return false;
      if(!in_.Equals(other.in_)) return false;
      if(!notIn_.Equals(other.notIn_)) return false;
      if (IgnoreEmpty != other.IgnoreEmpty) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasConst) hash ^= Const.GetHashCode();
      if (HasLt) hash ^= Lt.GetHashCode();
      if (HasLte) hash ^= Lte.GetHashCode();
      if (HasGt) hash ^= Gt.GetHashCode();
      if (HasGte) hash ^= Gte.GetHashCode();
      hash ^= in_.GetHashCode();
      hash ^= notIn_.GetHashCode();
      if (HasIgnoreEmpty) hash ^= IgnoreEmpty.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasConst) {
        output.WriteRawTag(8);
        output.WriteInt32(Const);
      }
      if (HasLt) {
        output.WriteRawTag(16);
        output.WriteInt32(Lt);
      }
      if (HasLte) {
        output.WriteRawTag(24);
        output.WriteInt32(Lte);
      }
      if (HasGt) {
        output.WriteRawTag(32);
        output.WriteInt32(Gt);
      }
      if (HasGte) {
        output.WriteRawTag(40);
        output.WriteInt32(Gte);
      }
      in_.WriteTo(output, _repeated_in_codec);
      notIn_.WriteTo(output, _repeated_notIn_codec);
      if (HasIgnoreEmpty) {
        output.WriteRawTag(64);
        output.WriteBool(IgnoreEmpty);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasConst) {
        output.WriteRawTag(8);
        output.WriteInt32(Const);
      }
      if (HasLt) {
        output.WriteRawTag(16);
        output.WriteInt32(Lt);
      }
      if (HasLte) {
        output.WriteRawTag(24);
        output.WriteInt32(Lte);
      }
      if (HasGt) {
        output.WriteRawTag(32);
        output.WriteInt32(Gt);
      }
      if (HasGte) {
        output.WriteRawTag(40);
        output.WriteInt32(Gte);
      }
      in_.WriteTo(ref output, _repeated_in_codec);
      notIn_.WriteTo(ref output, _repeated_notIn_codec);
      if (HasIgnoreEmpty) {
        output.WriteRawTag(64);
        output.WriteBool(IgnoreEmpty);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasConst) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Const);
      }
      if (HasLt) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lt);
      }
      if (HasLte) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lte);
      }
      if (HasGt) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gt);
      }
      if (HasGte) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gte);
      }
      size += in_.CalculateSize(_repeated_in_codec);
      size += notIn_.CalculateSize(_repeated_notIn_codec);
      if (HasIgnoreEmpty) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Int32Rules other) {
      if (other == null) {
        return;
      }
      if (other.HasConst) {
        Const = other.Const;
      }
      if (other.HasLt) {
        Lt = other.Lt;
      }
      if (other.HasLte) {
        Lte = other.Lte;
      }
      if (other.HasGt) {
        Gt = other.Gt;
      }
      if (other.HasGte) {
        Gte = other.Gte;
      }
      in_.Add(other.in_);
      notIn_.Add(other.notIn_);
      if (other.HasIgnoreEmpty) {
        IgnoreEmpty = other.IgnoreEmpty;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Const = input.ReadInt32();
            break;
          }
          case 16: {
            Lt = input.ReadInt32();
            break;
          }
          case 24: {
            Lte = input.ReadInt32();
            break;
          }
          case 32: {
            Gt = input.ReadInt32();
            break;
          }
          case 40: {
            Gte = input.ReadInt32();
            break;
          }
          case 50:
          case 48: {
            in_.AddEntriesFrom(input, _repeated_in_codec);
            break;
          }
          case 58:
          case 56: {
            notIn_.AddEntriesFrom(input, _repeated_notIn_codec);
            break;
          }
          case 64: {
            IgnoreEmpty = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Const = input.ReadInt32();
            break;
          }
          case 16: {
            Lt = input.ReadInt32();
            break;
          }
          case 24: {
            Lte = input.ReadInt32();
            break;
          }
          case 32: {
            Gt = input.ReadInt32();
            break;
          }
          case 40: {
            Gte = input.ReadInt32();
            break;
          }
          case 50:
          case 48: {
            in_.AddEntriesFrom(ref input, _repeated_in_codec);
            break;
          }
          case 58:
          case 56: {
            notIn_.AddEntriesFrom(ref input, _repeated_notIn_codec);
            break;
          }
          case 64: {
            IgnoreEmpty = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Int64Rules describes the constraints applied to `int64` values
  /// </summary>
  public sealed partial class Int64Rules : pb::IMessage<Int64Rules>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Int64Rules> _parser = new pb::MessageParser<Int64Rules>(() => new Int64Rules());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Int64Rules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Validate.ValidateReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Int64Rules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Int64Rules(Int64Rules other) : this() {
      _hasBits0 = other._hasBits0;
      const_ = other.const_;
      lt_ = other.lt_;
      lte_ = other.lte_;
      gt_ = other.gt_;
      gte_ = other.gte_;
      in_ = other.in_.Clone();
      notIn_ = other.notIn_.Clone();
      ignoreEmpty_ = other.ignoreEmpty_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Int64Rules Clone() {
      return new Int64Rules(this);
    }

    /// <summary>Field number for the "const" field.</summary>
    public const int ConstFieldNumber = 1;
    private readonly static long ConstDefaultValue = 0L;

    private long const_;
    /// <summary>
    /// Const specifies that this field must be exactly the specified value
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Const {
      get { if ((_hasBits0 & 1) != 0) { return const_; } else { return ConstDefaultValue; } }
      set {
        _hasBits0 |= 1;
        const_ = value;
      }
    }
    /// <summary>Gets whether the "const" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasConst {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "const" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearConst() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "lt" field.</summary>
    public const int LtFieldNumber = 2;
    private readonly static long LtDefaultValue = 0L;

    private long lt_;
    /// <summary>
    /// Lt specifies that this field must be less than the specified value,
    /// exclusive
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Lt {
      get { if ((_hasBits0 & 2) != 0) { return lt_; } else { return LtDefaultValue; } }
      set {
        _hasBits0 |= 2;
        lt_ = value;
      }
    }
    /// <summary>Gets whether the "lt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLt {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "lt" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLt() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "lte" field.</summary>
    public const int LteFieldNumber = 3;
    private readonly static long LteDefaultValue = 0L;

    private long lte_;
    /// <summary>
    /// Lte specifies that this field must be less than or equal to the
    /// specified value, inclusive
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Lte {
      get { if ((_hasBits0 & 4) != 0) { return lte_; } else { return LteDefaultValue; } }
      set {
        _hasBits0 |= 4;
        lte_ = value;
      }
    }
    /// <summary>Gets whether the "lte" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLte {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "lte" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLte() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "gt" field.</summary>
    public const int GtFieldNumber = 4;
    private readonly static long GtDefaultValue = 0L;

    private long gt_;
    /// <summary>
    /// Gt specifies that this field must be greater than the specified value,
    /// exclusive. If the value of Gt is larger than a specified Lt or Lte, the
    /// range is reversed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Gt {
      get { if ((_hasBits0 & 8) != 0) { return gt_; } else { return GtDefaultValue; } }
      set {
        _hasBits0 |= 8;
        gt_ = value;
      }
    }
    /// <summary>Gets whether the "gt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGt {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "gt" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGt() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "gte" field.</summary>
    public const int GteFieldNumber = 5;
    private readonly static long GteDefaultValue = 0L;

    private long gte_;
    /// <summary>
    /// Gte specifies that this field must be greater than or equal to the
    /// specified value, inclusive. If the value of Gte is larger than a
    /// specified Lt or Lte, the range is reversed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Gte {
      get { if ((_hasBits0 & 16) != 0) { return gte_; } else { return GteDefaultValue; } }
      set {
        _hasBits0 |= 16;
        gte_ = value;
      }
    }
    /// <summary>Gets whether the "gte" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGte {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "gte" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGte() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "in" field.</summary>
    public const int InFieldNumber = 6;
    private static readonly pb::FieldCodec<long> _repeated_in_codec
        = pb::FieldCodec.ForInt64(48);
    private readonly pbc::RepeatedField<long> in_ = new pbc::RepeatedField<long>();
    /// <summary>
    /// In specifies that this field must be equal to one of the specified
    /// values
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<long> In {
      get { return in_; }
    }

    /// <summary>Field number for the "not_in" field.</summary>
    public const int NotInFieldNumber = 7;
    private static readonly pb::FieldCodec<long> _repeated_notIn_codec
        = pb::FieldCodec.ForInt64(56);
    private readonly pbc::RepeatedField<long> notIn_ = new pbc::RepeatedField<long>();
    /// <summary>
    /// NotIn specifies that this field cannot be equal to one of the specified
    /// values
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<long> NotIn {
      get { return notIn_; }
    }

    /// <summary>Field number for the "ignore_empty" field.</summary>
    public const int IgnoreEmptyFieldNumber = 8;
    private readonly static bool IgnoreEmptyDefaultValue = false;

    private bool ignoreEmpty_;
    /// <summary>
    /// IgnoreEmpty specifies that the validation rules of this field should be
    /// evaluated only if the field is not empty
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IgnoreEmpty {
      get { if ((_hasBits0 & 32) != 0) { return ignoreEmpty_; } else { return IgnoreEmptyDefaultValue; } }
      set {
        _hasBits0 |= 32;
        ignoreEmpty_ = value;
      }
    }
    /// <summary>Gets whether the "ignore_empty" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIgnoreEmpty {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "ignore_empty" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIgnoreEmpty() {
      _hasBits0 &= ~32;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Int64Rules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Int64Rules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Const != other.Const) return false;
      if (Lt != other.Lt) return false;
      if (Lte != other.Lte) return false;
      if (Gt != other.Gt) return false;
      if (Gte != other.Gte) return false;
      if(!in_.Equals(other.in_)) return false;
      if(!notIn_.Equals(other.notIn_)) return false;
      if (IgnoreEmpty != other.IgnoreEmpty) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasConst) hash ^= Const.GetHashCode();
      if (HasLt) hash ^= Lt.GetHashCode();
      if (HasLte) hash ^= Lte.GetHashCode();
      if (HasGt) hash ^= Gt.GetHashCode();
      if (HasGte) hash ^= Gte.GetHashCode();
      hash ^= in_.GetHashCode();
      hash ^= notIn_.GetHashCode();
      if (HasIgnoreEmpty) hash ^= IgnoreEmpty.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasConst) {
        output.WriteRawTag(8);
        output.WriteInt64(Const);
      }
      if (HasLt) {
        output.WriteRawTag(16);
        output.WriteInt64(Lt);
      }
      if (HasLte) {
        output.WriteRawTag(24);
        output.WriteInt64(Lte);
      }
      if (HasGt) {
        output.WriteRawTag(32);
        output.WriteInt64(Gt);
      }
      if (HasGte) {
        output.WriteRawTag(40);
        output.WriteInt64(Gte);
      }
      in_.WriteTo(output, _repeated_in_codec);
      notIn_.WriteTo(output, _repeated_notIn_codec);
      if (HasIgnoreEmpty) {
        output.WriteRawTag(64);
        output.WriteBool(IgnoreEmpty);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasConst) {
        output.WriteRawTag(8);
        output.WriteInt64(Const);
      }
      if (HasLt) {
        output.WriteRawTag(16);
        output.WriteInt64(Lt);
      }
      if (HasLte) {
        output.WriteRawTag(24);
        output.WriteInt64(Lte);
      }
      if (HasGt) {
        output.WriteRawTag(32);
        output.WriteInt64(Gt);
      }
      if (HasGte) {
        output.WriteRawTag(40);
        output.WriteInt64(Gte);
      }
      in_.WriteTo(ref output, _repeated_in_codec);
      notIn_.WriteTo(ref output, _repeated_notIn_codec);
      if (HasIgnoreEmpty) {
        output.WriteRawTag(64);
        output.WriteBool(IgnoreEmpty);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasConst) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Const);
      }
      if (HasLt) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Lt);
      }
      if (HasLte) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Lte);
      }
      if (HasGt) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Gt);
      }
      if (HasGte) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Gte);
      }
      size += in_.CalculateSize(_repeated_in_codec);
      size += notIn_.CalculateSize(_repeated_notIn_codec);
      if (HasIgnoreEmpty) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Int64Rules other) {
      if (other == null) {
        return;
      }
      if (other.HasConst) {
        Const = other.Const;
      }
      if (other.HasLt) {
        Lt = other.Lt;
      }
      if (other.HasLte) {
        Lte = other.Lte;
      }
      if (other.HasGt) {
        Gt = other.Gt;
      }
      if (other.HasGte) {
        Gte = other.Gte;
      }
      in_.Add(other.in_);
      notIn_.Add(other.notIn_);
      if (other.HasIgnoreEmpty) {
        IgnoreEmpty = other.IgnoreEmpty;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Const = input.ReadInt64();
            break;
          }
          case 16: {
            Lt = input.ReadInt64();
            break;
          }
          case 24: {
            Lte = input.ReadInt64();
            break;
          }
          case 32: {
            Gt = input.ReadInt64();
            break;
          }
          case 40: {
            Gte = input.ReadInt64();
            break;
          }
          case 50:
          case 48: {
            in_.AddEntriesFrom(input, _repeated_in_codec);
            break;
          }
          case 58:
          case 56: {
            notIn_.AddEntriesFrom(input, _repeated_notIn_codec);
            break;
          }
          case 64: {
            IgnoreEmpty = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Const = input.ReadInt64();
            break;
          }
          case 16: {
            Lt = input.ReadInt64();
            break;
          }
          case 24: {
            Lte = input.ReadInt64();
            break;
          }
          case 32: {
            Gt = input.ReadInt64();
            break;
          }
          case 40: {
            Gte = input.ReadInt64();
            break;
          }
          case 50:
          case 48: {
            in_.AddEntriesFrom(ref input, _repeated_in_codec);
            break;
          }
          case 58:
          case 56: {
            notIn_.AddEntriesFrom(ref input, _repeated_notIn_codec);
            break;
          }
          case 64: {
            IgnoreEmpty = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// UInt32Rules describes the constraints applied to `uint32` values
  /// </summary>
  public sealed partial class UInt32Rules : pb::IMessage<UInt32Rules>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UInt32Rules> _parser = new pb::MessageParser<UInt32Rules>(() => new UInt32Rules());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<UInt32Rules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Validate.ValidateReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UInt32Rules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UInt32Rules(UInt32Rules other) : this() {
      _hasBits0 = other._hasBits0;
      const_ = other.const_;
      lt_ = other.lt_;
      lte_ = other.lte_;
      gt_ = other.gt_;
      gte_ = other.gte_;
      in_ = other.in_.Clone();
      notIn_ = other.notIn_.Clone();
      ignoreEmpty_ = other.ignoreEmpty_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UInt32Rules Clone() {
      return new UInt32Rules(this);
    }

    /// <summary>Field number for the "const" field.</summary>
    public const int ConstFieldNumber = 1;
    private readonly static uint ConstDefaultValue = 0;

    private uint const_;
    /// <summary>
    /// Const specifies that this field must be exactly the specified value
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Const {
      get { if ((_hasBits0 & 1) != 0) { return const_; } else { return ConstDefaultValue; } }
      set {
        _hasBits0 |= 1;
        const_ = value;
      }
    }
    /// <summary>Gets whether the "const" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasConst {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "const" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearConst() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "lt" field.</summary>
    public const int LtFieldNumber = 2;
    private readonly static uint LtDefaultValue = 0;

    private uint lt_;
    /// <summary>
    /// Lt specifies that this field must be less than the specified value,
    /// exclusive
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Lt {
      get { if ((_hasBits0 & 2) != 0) { return lt_; } else { return LtDefaultValue; } }
      set {
        _hasBits0 |= 2;
        lt_ = value;
      }
    }
    /// <summary>Gets whether the "lt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLt {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "lt" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLt() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "lte" field.</summary>
    public const int LteFieldNumber = 3;
    private readonly static uint LteDefaultValue = 0;

    private uint lte_;
    /// <summary>
    /// Lte specifies that this field must be less than or equal to the
    /// specified value, inclusive
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Lte {
      get { if ((_hasBits0 & 4) != 0) { return lte_; } else { return LteDefaultValue; } }
      set {
        _hasBits0 |= 4;
        lte_ = value;
      }
    }
    /// <summary>Gets whether the "lte" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLte {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "lte" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLte() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "gt" field.</summary>
    public const int GtFieldNumber = 4;
    private readonly static uint GtDefaultValue = 0;

    private uint gt_;
    /// <summary>
    /// Gt specifies that this field must be greater than the specified value,
    /// exclusive. If the value of Gt is larger than a specified Lt or Lte, the
    /// range is reversed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Gt {
      get { if ((_hasBits0 & 8) != 0) { return gt_; } else { return GtDefaultValue; } }
      set {
        _hasBits0 |= 8;
        gt_ = value;
      }
    }
    /// <summary>Gets whether the "gt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGt {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "gt" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGt() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "gte" field.</summary>
    public const int GteFieldNumber = 5;
    private readonly static uint GteDefaultValue = 0;

    private uint gte_;
    /// <summary>
    /// Gte specifies that this field must be greater than or equal to the
    /// specified value, inclusive. If the value of Gte is larger than a
    /// specified Lt or Lte, the range is reversed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Gte {
      get { if ((_hasBits0 & 16) != 0) { return gte_; } else { return GteDefaultValue; } }
      set {
        _hasBits0 |= 16;
        gte_ = value;
      }
    }
    /// <summary>Gets whether the "gte" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGte {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "gte" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGte() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "in" field.</summary>
    public const int InFieldNumber = 6;
    private static readonly pb::FieldCodec<uint> _repeated_in_codec
        = pb::FieldCodec.ForUInt32(48);
    private readonly pbc::RepeatedField<uint> in_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// In specifies that this field must be equal to one of the specified
    /// values
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<uint> In {
      get { return in_; }
    }

    /// <summary>Field number for the "not_in" field.</summary>
    public const int NotInFieldNumber = 7;
    private static readonly pb::FieldCodec<uint> _repeated_notIn_codec
        = pb::FieldCodec.ForUInt32(56);
    private readonly pbc::RepeatedField<uint> notIn_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// NotIn specifies that this field cannot be equal to one of the specified
    /// values
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<uint> NotIn {
      get { return notIn_; }
    }

    /// <summary>Field number for the "ignore_empty" field.</summary>
    public const int IgnoreEmptyFieldNumber = 8;
    private readonly static bool IgnoreEmptyDefaultValue = false;

    private bool ignoreEmpty_;
    /// <summary>
    /// IgnoreEmpty specifies that the validation rules of this field should be
    /// evaluated only if the field is not empty
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IgnoreEmpty {
      get { if ((_hasBits0 & 32) != 0) { return ignoreEmpty_; } else { return IgnoreEmptyDefaultValue; } }
      set {
        _hasBits0 |= 32;
        ignoreEmpty_ = value;
      }
    }
    /// <summary>Gets whether the "ignore_empty" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIgnoreEmpty {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "ignore_empty" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIgnoreEmpty() {
      _hasBits0 &= ~32;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as UInt32Rules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(UInt32Rules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Const != other.Const) return false;
      if (Lt != other.Lt) return false;
      if (Lte != other.Lte) return false;
      if (Gt != other.Gt) return false;
      if (Gte != other.Gte) return false;
      if(!in_.Equals(other.in_)) return false;
      if(!notIn_.Equals(other.notIn_)) return false;
      if (IgnoreEmpty != other.IgnoreEmpty) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasConst) hash ^= Const.GetHashCode();
      if (HasLt) hash ^= Lt.GetHashCode();
      if (HasLte) hash ^= Lte.GetHashCode();
      if (HasGt) hash ^= Gt.GetHashCode();
      if (HasGte) hash ^= Gte.GetHashCode();
      hash ^= in_.GetHashCode();
      hash ^= notIn_.GetHashCode();
      if (HasIgnoreEmpty) hash ^= IgnoreEmpty.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasConst) {
        output.WriteRawTag(8);
        output.WriteUInt32(Const);
      }
      if (HasLt) {
        output.WriteRawTag(16);
        output.WriteUInt32(Lt);
      }
      if (HasLte) {
        output.WriteRawTag(24);
        output.WriteUInt32(Lte);
      }
      if (HasGt) {
        output.WriteRawTag(32);
        output.WriteUInt32(Gt);
      }
      if (HasGte) {
        output.WriteRawTag(40);
        output.WriteUInt32(Gte);
      }
      in_.WriteTo(output, _repeated_in_codec);
      notIn_.WriteTo(output, _repeated_notIn_codec);
      if (HasIgnoreEmpty) {
        output.WriteRawTag(64);
        output.WriteBool(IgnoreEmpty);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasConst) {
        output.WriteRawTag(8);
        output.WriteUInt32(Const);
      }
      if (HasLt) {
        output.WriteRawTag(16);
        output.WriteUInt32(Lt);
      }
      if (HasLte) {
        output.WriteRawTag(24);
        output.WriteUInt32(Lte);
      }
      if (HasGt) {
        output.WriteRawTag(32);
        output.WriteUInt32(Gt);
      }
      if (HasGte) {
        output.WriteRawTag(40);
        output.WriteUInt32(Gte);
      }
      in_.WriteTo(ref output, _repeated_in_codec);
      notIn_.WriteTo(ref output, _repeated_notIn_codec);
      if (HasIgnoreEmpty) {
        output.WriteRawTag(64);
        output.WriteBool(IgnoreEmpty);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasConst) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Const);
      }
      if (HasLt) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Lt);
      }
      if (HasLte) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Lte);
      }
      if (HasGt) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Gt);
      }
      if (HasGte) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Gte);
      }
      size += in_.CalculateSize(_repeated_in_codec);
      size += notIn_.CalculateSize(_repeated_notIn_codec);
      if (HasIgnoreEmpty) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(UInt32Rules other) {
      if (other == null) {
        return;
      }
      if (other.HasConst) {
        Const = other.Const;
      }
      if (other.HasLt) {
        Lt = other.Lt;
      }
      if (other.HasLte) {
        Lte = other.Lte;
      }
      if (other.HasGt) {
        Gt = other.Gt;
      }
      if (other.HasGte) {
        Gte = other.Gte;
      }
      in_.Add(other.in_);
      notIn_.Add(other.notIn_);
      if (other.HasIgnoreEmpty) {
        IgnoreEmpty = other.IgnoreEmpty;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Const = input.ReadUInt32();
            break;
          }
          case 16: {
            Lt = input.ReadUInt32();
            break;
          }
          case 24: {
            Lte = input.ReadUInt32();
            break;
          }
          case 32: {
            Gt = input.ReadUInt32();
            break;
          }
          case 40: {
            Gte = input.ReadUInt32();
            break;
          }
          case 50:
          case 48: {
            in_.AddEntriesFrom(input, _repeated_in_codec);
            break;
          }
          case 58:
          case 56: {
            notIn_.AddEntriesFrom(input, _repeated_notIn_codec);
            break;
          }
          case 64: {
            IgnoreEmpty = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Const = input.ReadUInt32();
            break;
          }
          case 16: {
            Lt = input.ReadUInt32();
            break;
          }
          case 24: {
            Lte = input.ReadUInt32();
            break;
          }
          case 32: {
            Gt = input.ReadUInt32();
            break;
          }
          case 40: {
            Gte = input.ReadUInt32();
            break;
          }
          case 50:
          case 48: {
            in_.AddEntriesFrom(ref input, _repeated_in_codec);
            break;
          }
          case 58:
          case 56: {
            notIn_.AddEntriesFrom(ref input, _repeated_notIn_codec);
            break;
          }
          case 64: {
            IgnoreEmpty = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// UInt64Rules describes the constraints applied to `uint64` values
  /// </summary>
  public sealed partial class UInt64Rules : pb::IMessage<UInt64Rules>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UInt64Rules> _parser = new pb::MessageParser<UInt64Rules>(() => new UInt64Rules());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<UInt64Rules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Validate.ValidateReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UInt64Rules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UInt64Rules(UInt64Rules other) : this() {
      _hasBits0 = other._hasBits0;
      const_ = other.const_;
      lt_ = other.lt_;
      lte_ = other.lte_;
      gt_ = other.gt_;
      gte_ = other.gte_;
      in_ = other.in_.Clone();
      notIn_ = other.notIn_.Clone();
      ignoreEmpty_ = other.ignoreEmpty_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UInt64Rules Clone() {
      return new UInt64Rules(this);
    }

    /// <summary>Field number for the "const" field.</summary>
    public const int ConstFieldNumber = 1;
    private readonly static ulong ConstDefaultValue = 0UL;

    private ulong const_;
    /// <summary>
    /// Const specifies that this field must be exactly the specified value
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong Const {
      get { if ((_hasBits0 & 1) != 0) { return const_; } else { return ConstDefaultValue; } }
      set {
        _hasBits0 |= 1;
        const_ = value;
      }
    }
    /// <summary>Gets whether the "const" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasConst {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "const" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearConst() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "lt" field.</summary>
    public const int LtFieldNumber = 2;
    private readonly static ulong LtDefaultValue = 0UL;

    private ulong lt_;
    /// <summary>
    /// Lt specifies that this field must be less than the specified value,
    /// exclusive
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong Lt {
      get { if ((_hasBits0 & 2) != 0) { return lt_; } else { return LtDefaultValue; } }
      set {
        _hasBits0 |= 2;
        lt_ = value;
      }
    }
    /// <summary>Gets whether the "lt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLt {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "lt" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLt() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "lte" field.</summary>
    public const int LteFieldNumber = 3;
    private readonly static ulong LteDefaultValue = 0UL;

    private ulong lte_;
    /// <summary>
    /// Lte specifies that this field must be less than or equal to the
    /// specified value, inclusive
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong Lte {
      get { if ((_hasBits0 & 4) != 0) { return lte_; } else { return LteDefaultValue; } }
      set {
        _hasBits0 |= 4;
        lte_ = value;
      }
    }
    /// <summary>Gets whether the "lte" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLte {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "lte" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLte() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "gt" field.</summary>
    public const int GtFieldNumber = 4;
    private readonly static ulong GtDefaultValue = 0UL;

    private ulong gt_;
    /// <summary>
    /// Gt specifies that this field must be greater than the specified value,
    /// exclusive. If the value of Gt is larger than a specified Lt or Lte, the
    /// range is reversed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong Gt {
      get { if ((_hasBits0 & 8) != 0) { return gt_; } else { return GtDefaultValue; } }
      set {
        _hasBits0 |= 8;
        gt_ = value;
      }
    }
    /// <summary>Gets whether the "gt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGt {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "gt" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGt() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "gte" field.</summary>
    public const int GteFieldNumber = 5;
    private readonly static ulong GteDefaultValue = 0UL;

    private ulong gte_;
    /// <summary>
    /// Gte specifies that this field must be greater than or equal to the
    /// specified value, inclusive. If the value of Gte is larger than a
    /// specified Lt or Lte, the range is reversed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong Gte {
      get { if ((_hasBits0 & 16) != 0) { return gte_; } else { return GteDefaultValue; } }
      set {
        _hasBits0 |= 16;
        gte_ = value;
      }
    }
    /// <summary>Gets whether the "gte" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGte {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "gte" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGte() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "in" field.</summary>
    public const int InFieldNumber = 6;
    private static readonly pb::FieldCodec<ulong> _repeated_in_codec
        = pb::FieldCodec.ForUInt64(48);
    private readonly pbc::RepeatedField<ulong> in_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    /// In specifies that this field must be equal to one of the specified
    /// values
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<ulong> In {
      get { return in_; }
    }

    /// <summary>Field number for the "not_in" field.</summary>
    public const int NotInFieldNumber = 7;
    private static readonly pb::FieldCodec<ulong> _repeated_notIn_codec
        = pb::FieldCodec.ForUInt64(56);
    private readonly pbc::RepeatedField<ulong> notIn_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    /// NotIn specifies that this field cannot be equal to one of the specified
    /// values
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<ulong> NotIn {
      get { return notIn_; }
    }

    /// <summary>Field number for the "ignore_empty" field.</summary>
    public const int IgnoreEmptyFieldNumber = 8;
    private readonly static bool IgnoreEmptyDefaultValue = false;

    private bool ignoreEmpty_;
    /// <summary>
    /// IgnoreEmpty specifies that the validation rules of this field should be
    /// evaluated only if the field is not empty
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IgnoreEmpty {
      get { if ((_hasBits0 & 32) != 0) { return ignoreEmpty_; } else { return IgnoreEmptyDefaultValue; } }
      set {
        _hasBits0 |= 32;
        ignoreEmpty_ = value;
      }
    }
    /// <summary>Gets whether the "ignore_empty" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIgnoreEmpty {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "ignore_empty" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIgnoreEmpty() {
      _hasBits0 &= ~32;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as UInt64Rules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(UInt64Rules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Const != other.Const) return false;
      if (Lt != other.Lt) return false;
      if (Lte != other.Lte) return false;
      if (Gt != other.Gt) return false;
      if (Gte != other.Gte) return false;
      if(!in_.Equals(other.in_)) return false;
      if(!notIn_.Equals(other.notIn_)) return false;
      if (IgnoreEmpty != other.IgnoreEmpty) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasConst) hash ^= Const.GetHashCode();
      if (HasLt) hash ^= Lt.GetHashCode();
      if (HasLte) hash ^= Lte.GetHashCode();
      if (HasGt) hash ^= Gt.GetHashCode();
      if (HasGte) hash ^= Gte.GetHashCode();
      hash ^= in_.GetHashCode();
      hash ^= notIn_.GetHashCode();
      if (HasIgnoreEmpty) hash ^= IgnoreEmpty.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasConst) {
        output.WriteRawTag(8);
        output.WriteUInt64(Const);
      }
      if (HasLt) {
        output.WriteRawTag(16);
        output.WriteUInt64(Lt);
      }
      if (HasLte) {
        output.WriteRawTag(24);
        output.WriteUInt64(Lte);
      }
      if (HasGt) {
        output.WriteRawTag(32);
        output.WriteUInt64(Gt);
      }
      if (HasGte) {
        output.WriteRawTag(40);
        output.WriteUInt64(Gte);
      }
      in_.WriteTo(output, _repeated_in_codec);
      notIn_.WriteTo(output, _repeated_notIn_codec);
      if (HasIgnoreEmpty) {
        output.WriteRawTag(64);
        output.WriteBool(IgnoreEmpty);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasConst) {
        output.WriteRawTag(8);
        output.WriteUInt64(Const);
      }
      if (HasLt) {
        output.WriteRawTag(16);
        output.WriteUInt64(Lt);
      }
      if (HasLte) {
        output.WriteRawTag(24);
        output.WriteUInt64(Lte);
      }
      if (HasGt) {
        output.WriteRawTag(32);
        output.WriteUInt64(Gt);
      }
      if (HasGte) {
        output.WriteRawTag(40);
        output.WriteUInt64(Gte);
      }
      in_.WriteTo(ref output, _repeated_in_codec);
      notIn_.WriteTo(ref output, _repeated_notIn_codec);
      if (HasIgnoreEmpty) {
        output.WriteRawTag(64);
        output.WriteBool(IgnoreEmpty);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasConst) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Const);
      }
      if (HasLt) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Lt);
      }
      if (HasLte) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Lte);
      }
      if (HasGt) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Gt);
      }
      if (HasGte) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Gte);
      }
      size += in_.CalculateSize(_repeated_in_codec);
      size += notIn_.CalculateSize(_repeated_notIn_codec);
      if (HasIgnoreEmpty) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(UInt64Rules other) {
      if (other == null) {
        return;
      }
      if (other.HasConst) {
        Const = other.Const;
      }
      if (other.HasLt) {
        Lt = other.Lt;
      }
      if (other.HasLte) {
        Lte = other.Lte;
      }
      if (other.HasGt) {
        Gt = other.Gt;
      }
      if (other.HasGte) {
        Gte = other.Gte;
      }
      in_.Add(other.in_);
      notIn_.Add(other.notIn_);
      if (other.HasIgnoreEmpty) {
        IgnoreEmpty = other.IgnoreEmpty;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Const = input.ReadUInt64();
            break;
          }
          case 16: {
            Lt = input.ReadUInt64();
            break;
          }
          case 24: {
            Lte = input.ReadUInt64();
            break;
          }
          case 32: {
            Gt = input.ReadUInt64();
            break;
          }
          case 40: {
            Gte = input.ReadUInt64();
            break;
          }
          case 50:
          case 48: {
            in_.AddEntriesFrom(input, _repeated_in_codec);
            break;
          }
          case 58:
          case 56: {
            notIn_.AddEntriesFrom(input, _repeated_notIn_codec);
            break;
          }
          case 64: {
            IgnoreEmpty = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Const = input.ReadUInt64();
            break;
          }
          case 16: {
            Lt = input.ReadUInt64();
            break;
          }
          case 24: {
            Lte = input.ReadUInt64();
            break;
          }
          case 32: {
            Gt = input.ReadUInt64();
            break;
          }
          case 40: {
            Gte = input.ReadUInt64();
            break;
          }
          case 50:
          case 48: {
            in_.AddEntriesFrom(ref input, _repeated_in_codec);
            break;
          }
          case 58:
          case 56: {
            notIn_.AddEntriesFrom(ref input, _repeated_notIn_codec);
            break;
          }
          case 64: {
            IgnoreEmpty = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// SInt32Rules describes the constraints applied to `sint32` values
  /// </summary>
  public sealed partial class SInt32Rules : pb::IMessage<SInt32Rules>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SInt32Rules> _parser = new pb::MessageParser<SInt32Rules>(() => new SInt32Rules());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SInt32Rules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Validate.ValidateReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SInt32Rules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SInt32Rules(SInt32Rules other) : this() {
      _hasBits0 = other._hasBits0;
      const_ = other.const_;
      lt_ = other.lt_;
      lte_ = other.lte_;
      gt_ = other.gt_;
      gte_ = other.gte_;
      in_ = other.in_.Clone();
      notIn_ = other.notIn_.Clone();
      ignoreEmpty_ = other.ignoreEmpty_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SInt32Rules Clone() {
      return new SInt32Rules(this);
    }

    /// <summary>Field number for the "const" field.</summary>
    public const int ConstFieldNumber = 1;
    private readonly static int ConstDefaultValue = 0;

    private int const_;
    /// <summary>
    /// Const specifies that this field must be exactly the specified value
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Const {
      get { if ((_hasBits0 & 1) != 0) { return const_; } else { return ConstDefaultValue; } }
      set {
        _hasBits0 |= 1;
        const_ = value;
      }
    }
    /// <summary>Gets whether the "const" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasConst {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "const" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearConst() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "lt" field.</summary>
    public const int LtFieldNumber = 2;
    private readonly static int LtDefaultValue = 0;

    private int lt_;
    /// <summary>
    /// Lt specifies that this field must be less than the specified value,
    /// exclusive
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Lt {
      get { if ((_hasBits0 & 2) != 0) { return lt_; } else { return LtDefaultValue; } }
      set {
        _hasBits0 |= 2;
        lt_ = value;
      }
    }
    /// <summary>Gets whether the "lt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLt {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "lt" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLt() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "lte" field.</summary>
    public const int LteFieldNumber = 3;
    private readonly static int LteDefaultValue = 0;

    private int lte_;
    /// <summary>
    /// Lte specifies that this field must be less than or equal to the
    /// specified value, inclusive
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Lte {
      get { if ((_hasBits0 & 4) != 0) { return lte_; } else { return LteDefaultValue; } }
      set {
        _hasBits0 |= 4;
        lte_ = value;
      }
    }
    /// <summary>Gets whether the "lte" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLte {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "lte" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLte() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "gt" field.</summary>
    public const int GtFieldNumber = 4;
    private readonly static int GtDefaultValue = 0;

    private int gt_;
    /// <summary>
    /// Gt specifies that this field must be greater than the specified value,
    /// exclusive. If the value of Gt is larger than a specified Lt or Lte, the
    /// range is reversed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Gt {
      get { if ((_hasBits0 & 8) != 0) { return gt_; } else { return GtDefaultValue; } }
      set {
        _hasBits0 |= 8;
        gt_ = value;
      }
    }
    /// <summary>Gets whether the "gt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGt {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "gt" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGt() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "gte" field.</summary>
    public const int GteFieldNumber = 5;
    private readonly static int GteDefaultValue = 0;

    private int gte_;
    /// <summary>
    /// Gte specifies that this field must be greater than or equal to the
    /// specified value, inclusive. If the value of Gte is larger than a
    /// specified Lt or Lte, the range is reversed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Gte {
      get { if ((_hasBits0 & 16) != 0) { return gte_; } else { return GteDefaultValue; } }
      set {
        _hasBits0 |= 16;
        gte_ = value;
      }
    }
    /// <summary>Gets whether the "gte" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGte {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "gte" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGte() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "in" field.</summary>
    public const int InFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_in_codec
        = pb::FieldCodec.ForSInt32(48);
    private readonly pbc::RepeatedField<int> in_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// In specifies that this field must be equal to one of the specified
    /// values
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> In {
      get { return in_; }
    }

    /// <summary>Field number for the "not_in" field.</summary>
    public const int NotInFieldNumber = 7;
    private static readonly pb::FieldCodec<int> _repeated_notIn_codec
        = pb::FieldCodec.ForSInt32(56);
    private readonly pbc::RepeatedField<int> notIn_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// NotIn specifies that this field cannot be equal to one of the specified
    /// values
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> NotIn {
      get { return notIn_; }
    }

    /// <summary>Field number for the "ignore_empty" field.</summary>
    public const int IgnoreEmptyFieldNumber = 8;
    private readonly static bool IgnoreEmptyDefaultValue = false;

    private bool ignoreEmpty_;
    /// <summary>
    /// IgnoreEmpty specifies that the validation rules of this field should be
    /// evaluated only if the field is not empty
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IgnoreEmpty {
      get { if ((_hasBits0 & 32) != 0) { return ignoreEmpty_; } else { return IgnoreEmptyDefaultValue; } }
      set {
        _hasBits0 |= 32;
        ignoreEmpty_ = value;
      }
    }
    /// <summary>Gets whether the "ignore_empty" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIgnoreEmpty {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "ignore_empty" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIgnoreEmpty() {
      _hasBits0 &= ~32;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SInt32Rules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SInt32Rules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Const != other.Const) return false;
      if (Lt != other.Lt) return false;
      if (Lte != other.Lte) return false;
      if (Gt != other.Gt) return false;
      if (Gte != other.Gte) return false;
      if(!in_.Equals(other.in_)) return false;
      if(!notIn_.Equals(other.notIn_)) return false;
      if (IgnoreEmpty != other.IgnoreEmpty) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasConst) hash ^= Const.GetHashCode();
      if (HasLt) hash ^= Lt.GetHashCode();
      if (HasLte) hash ^= Lte.GetHashCode();
      if (HasGt) hash ^= Gt.GetHashCode();
      if (HasGte) hash ^= Gte.GetHashCode();
      hash ^= in_.GetHashCode();
      hash ^= notIn_.GetHashCode();
      if (HasIgnoreEmpty) hash ^= IgnoreEmpty.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasConst) {
        output.WriteRawTag(8);
        output.WriteSInt32(Const);
      }
      if (HasLt) {
        output.WriteRawTag(16);
        output.WriteSInt32(Lt);
      }
      if (HasLte) {
        output.WriteRawTag(24);
        output.WriteSInt32(Lte);
      }
      if (HasGt) {
        output.WriteRawTag(32);
        output.WriteSInt32(Gt);
      }
      if (HasGte) {
        output.WriteRawTag(40);
        output.WriteSInt32(Gte);
      }
      in_.WriteTo(output, _repeated_in_codec);
      notIn_.WriteTo(output, _repeated_notIn_codec);
      if (HasIgnoreEmpty) {
        output.WriteRawTag(64);
        output.WriteBool(IgnoreEmpty);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasConst) {
        output.WriteRawTag(8);
        output.WriteSInt32(Const);
      }
      if (HasLt) {
        output.WriteRawTag(16);
        output.WriteSInt32(Lt);
      }
      if (HasLte) {
        output.WriteRawTag(24);
        output.WriteSInt32(Lte);
      }
      if (HasGt) {
        output.WriteRawTag(32);
        output.WriteSInt32(Gt);
      }
      if (HasGte) {
        output.WriteRawTag(40);
        output.WriteSInt32(Gte);
      }
      in_.WriteTo(ref output, _repeated_in_codec);
      notIn_.WriteTo(ref output, _repeated_notIn_codec);
      if (HasIgnoreEmpty) {
        output.WriteRawTag(64);
        output.WriteBool(IgnoreEmpty);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasConst) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Const);
      }
      if (HasLt) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Lt);
      }
      if (HasLte) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Lte);
      }
      if (HasGt) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Gt);
      }
      if (HasGte) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Gte);
      }
      size += in_.CalculateSize(_repeated_in_codec);
      size += notIn_.CalculateSize(_repeated_notIn_codec);
      if (HasIgnoreEmpty) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SInt32Rules other) {
      if (other == null) {
        return;
      }
      if (other.HasConst) {
        Const = other.Const;
      }
      if (other.HasLt) {
        Lt = other.Lt;
      }
      if (other.HasLte) {
        Lte = other.Lte;
      }
      if (other.HasGt) {
        Gt = other.Gt;
      }
      if (other.HasGte) {
        Gte = other.Gte;
      }
      in_.Add(other.in_);
      notIn_.Add(other.notIn_);
      if (other.HasIgnoreEmpty) {
        IgnoreEmpty = other.IgnoreEmpty;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Const = input.ReadSInt32();
            break;
          }
          case 16: {
            Lt = input.ReadSInt32();
            break;
          }
          case 24: {
            Lte = input.ReadSInt32();
            break;
          }
          case 32: {
            Gt = input.ReadSInt32();
            break;
          }
          case 40: {
            Gte = input.ReadSInt32();
            break;
          }
          case 50:
          case 48: {
            in_.AddEntriesFrom(input, _repeated_in_codec);
            break;
          }
          case 58:
          case 56: {
            notIn_.AddEntriesFrom(input, _repeated_notIn_codec);
            break;
          }
          case 64: {
            IgnoreEmpty = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Const = input.ReadSInt32();
            break;
          }
          case 16: {
            Lt = input.ReadSInt32();
            break;
          }
          case 24: {
            Lte = input.ReadSInt32();
            break;
          }
          case 32: {
            Gt = input.ReadSInt32();
            break;
          }
          case 40: {
            Gte = input.ReadSInt32();
            break;
          }
          case 50:
          case 48: {
            in_.AddEntriesFrom(ref input, _repeated_in_codec);
            break;
          }
          case 58:
          case 56: {
            notIn_.AddEntriesFrom(ref input, _repeated_notIn_codec);
            break;
          }
          case 64: {
            IgnoreEmpty = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// SInt64Rules describes the constraints applied to `sint64` values
  /// </summary>
  public sealed partial class SInt64Rules : pb::IMessage<SInt64Rules>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SInt64Rules> _parser = new pb::MessageParser<SInt64Rules>(() => new SInt64Rules());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SInt64Rules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Validate.ValidateReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SInt64Rules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SInt64Rules(SInt64Rules other) : this() {
      _hasBits0 = other._hasBits0;
      const_ = other.const_;
      lt_ = other.lt_;
      lte_ = other.lte_;
      gt_ = other.gt_;
      gte_ = other.gte_;
      in_ = other.in_.Clone();
      notIn_ = other.notIn_.Clone();
      ignoreEmpty_ = other.ignoreEmpty_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SInt64Rules Clone() {
      return new SInt64Rules(this);
    }

    /// <summary>Field number for the "const" field.</summary>
    public const int ConstFieldNumber = 1;
    private readonly static long ConstDefaultValue = 0L;

    private long const_;
    /// <summary>
    /// Const specifies that this field must be exactly the specified value
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Const {
      get { if ((_hasBits0 & 1) != 0) { return const_; } else { return ConstDefaultValue; } }
      set {
        _hasBits0 |= 1;
        const_ = value;
      }
    }
    /// <summary>Gets whether the "const" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasConst {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "const" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearConst() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "lt" field.</summary>
    public const int LtFieldNumber = 2;
    private readonly static long LtDefaultValue = 0L;

    private long lt_;
    /// <summary>
    /// Lt specifies that this field must be less than the specified value,
    /// exclusive
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Lt {
      get { if ((_hasBits0 & 2) != 0) { return lt_; } else { return LtDefaultValue; } }
      set {
        _hasBits0 |= 2;
        lt_ = value;
      }
    }
    /// <summary>Gets whether the "lt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLt {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "lt" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLt() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "lte" field.</summary>
    public const int LteFieldNumber = 3;
    private readonly static long LteDefaultValue = 0L;

    private long lte_;
    /// <summary>
    /// Lte specifies that this field must be less than or equal to the
    /// specified value, inclusive
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Lte {
      get { if ((_hasBits0 & 4) != 0) { return lte_; } else { return LteDefaultValue; } }
      set {
        _hasBits0 |= 4;
        lte_ = value;
      }
    }
    /// <summary>Gets whether the "lte" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLte {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "lte" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLte() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "gt" field.</summary>
    public const int GtFieldNumber = 4;
    private readonly static long GtDefaultValue = 0L;

    private long gt_;
    /// <summary>
    /// Gt specifies that this field must be greater than the specified value,
    /// exclusive. If the value of Gt is larger than a specified Lt or Lte, the
    /// range is reversed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Gt {
      get { if ((_hasBits0 & 8) != 0) { return gt_; } else { return GtDefaultValue; } }
      set {
        _hasBits0 |= 8;
        gt_ = value;
      }
    }
    /// <summary>Gets whether the "gt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGt {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "gt" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGt() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "gte" field.</summary>
    public const int GteFieldNumber = 5;
    private readonly static long GteDefaultValue = 0L;

    private long gte_;
    /// <summary>
    /// Gte specifies that this field must be greater than or equal to the
    /// specified value, inclusive. If the value of Gte is larger than a
    /// specified Lt or Lte, the range is reversed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Gte {
      get { if ((_hasBits0 & 16) != 0) { return gte_; } else { return GteDefaultValue; } }
      set {
        _hasBits0 |= 16;
        gte_ = value;
      }
    }
    /// <summary>Gets whether the "gte" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGte {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "gte" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGte() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "in" field.</summary>
    public const int InFieldNumber = 6;
    private static readonly pb::FieldCodec<long> _repeated_in_codec
        = pb::FieldCodec.ForSInt64(48);
    private readonly pbc::RepeatedField<long> in_ = new pbc::RepeatedField<long>();
    /// <summary>
    /// In specifies that this field must be equal to one of the specified
    /// values
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<long> In {
      get { return in_; }
    }

    /// <summary>Field number for the "not_in" field.</summary>
    public const int NotInFieldNumber = 7;
    private static readonly pb::FieldCodec<long> _repeated_notIn_codec
        = pb::FieldCodec.ForSInt64(56);
    private readonly pbc::RepeatedField<long> notIn_ = new pbc::RepeatedField<long>();
    /// <summary>
    /// NotIn specifies that this field cannot be equal to one of the specified
    /// values
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<long> NotIn {
      get { return notIn_; }
    }

    /// <summary>Field number for the "ignore_empty" field.</summary>
    public const int IgnoreEmptyFieldNumber = 8;
    private readonly static bool IgnoreEmptyDefaultValue = false;

    private bool ignoreEmpty_;
    /// <summary>
    /// IgnoreEmpty specifies that the validation rules of this field should be
    /// evaluated only if the field is not empty
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IgnoreEmpty {
      get { if ((_hasBits0 & 32) != 0) { return ignoreEmpty_; } else { return IgnoreEmptyDefaultValue; } }
      set {
        _hasBits0 |= 32;
        ignoreEmpty_ = value;
      }
    }
    /// <summary>Gets whether the "ignore_empty" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIgnoreEmpty {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "ignore_empty" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIgnoreEmpty() {
      _hasBits0 &= ~32;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SInt64Rules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SInt64Rules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Const != other.Const) return false;
      if (Lt != other.Lt) return false;
      if (Lte != other.Lte) return false;
      if (Gt != other.Gt) return false;
      if (Gte != other.Gte) return false;
      if(!in_.Equals(other.in_)) return false;
      if(!notIn_.Equals(other.notIn_)) return false;
      if (IgnoreEmpty != other.IgnoreEmpty) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasConst) hash ^= Const.GetHashCode();
      if (HasLt) hash ^= Lt.GetHashCode();
      if (HasLte) hash ^= Lte.GetHashCode();
      if (HasGt) hash ^= Gt.GetHashCode();
      if (HasGte) hash ^= Gte.GetHashCode();
      hash ^= in_.GetHashCode();
      hash ^= notIn_.GetHashCode();
      if (HasIgnoreEmpty) hash ^= IgnoreEmpty.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasConst) {
        output.WriteRawTag(8);
        output.WriteSInt64(Const);
      }
      if (HasLt) {
        output.WriteRawTag(16);
        output.WriteSInt64(Lt);
      }
      if (HasLte) {
        output.WriteRawTag(24);
        output.WriteSInt64(Lte);
      }
      if (HasGt) {
        output.WriteRawTag(32);
        output.WriteSInt64(Gt);
      }
      if (HasGte) {
        output.WriteRawTag(40);
        output.WriteSInt64(Gte);
      }
      in_.WriteTo(output, _repeated_in_codec);
      notIn_.WriteTo(output, _repeated_notIn_codec);
      if (HasIgnoreEmpty) {
        output.WriteRawTag(64);
        output.WriteBool(IgnoreEmpty);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasConst) {
        output.WriteRawTag(8);
        output.WriteSInt64(Const);
      }
      if (HasLt) {
        output.WriteRawTag(16);
        output.WriteSInt64(Lt);
      }
      if (HasLte) {
        output.WriteRawTag(24);
        output.WriteSInt64(Lte);
      }
      if (HasGt) {
        output.WriteRawTag(32);
        output.WriteSInt64(Gt);
      }
      if (HasGte) {
        output.WriteRawTag(40);
        output.WriteSInt64(Gte);
      }
      in_.WriteTo(ref output, _repeated_in_codec);
      notIn_.WriteTo(ref output, _repeated_notIn_codec);
      if (HasIgnoreEmpty) {
        output.WriteRawTag(64);
        output.WriteBool(IgnoreEmpty);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasConst) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Const);
      }
      if (HasLt) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Lt);
      }
      if (HasLte) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Lte);
      }
      if (HasGt) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Gt);
      }
      if (HasGte) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Gte);
      }
      size += in_.CalculateSize(_repeated_in_codec);
      size += notIn_.CalculateSize(_repeated_notIn_codec);
      if (HasIgnoreEmpty) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SInt64Rules other) {
      if (other == null) {
        return;
      }
      if (other.HasConst) {
        Const = other.Const;
      }
      if (other.HasLt) {
        Lt = other.Lt;
      }
      if (other.HasLte) {
        Lte = other.Lte;
      }
      if (other.HasGt) {
        Gt = other.Gt;
      }
      if (other.HasGte) {
        Gte = other.Gte;
      }
      in_.Add(other.in_);
      notIn_.Add(other.notIn_);
      if (other.HasIgnoreEmpty) {
        IgnoreEmpty = other.IgnoreEmpty;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Const = input.ReadSInt64();
            break;
          }
          case 16: {
            Lt = input.ReadSInt64();
            break;
          }
          case 24: {
            Lte = input.ReadSInt64();
            break;
          }
          case 32: {
            Gt = input.ReadSInt64();
            break;
          }
          case 40: {
            Gte = input.ReadSInt64();
            break;
          }
          case 50:
          case 48: {
            in_.AddEntriesFrom(input, _repeated_in_codec);
            break;
          }
          case 58:
          case 56: {
            notIn_.AddEntriesFrom(input, _repeated_notIn_codec);
            break;
          }
          case 64: {
            IgnoreEmpty = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Const = input.ReadSInt64();
            break;
          }
          case 16: {
            Lt = input.ReadSInt64();
            break;
          }
          case 24: {
            Lte = input.ReadSInt64();
            break;
          }
          case 32: {
            Gt = input.ReadSInt64();
            break;
          }
          case 40: {
            Gte = input.ReadSInt64();
            break;
          }
          case 50:
          case 48: {
            in_.AddEntriesFrom(ref input, _repeated_in_codec);
            break;
          }
          case 58:
          case 56: {
            notIn_.AddEntriesFrom(ref input, _repeated_notIn_codec);
            break;
          }
          case 64: {
            IgnoreEmpty = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Fixed32Rules describes the constraints applied to `fixed32` values
  /// </summary>
  public sealed partial class Fixed32Rules : pb::IMessage<Fixed32Rules>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Fixed32Rules> _parser = new pb::MessageParser<Fixed32Rules>(() => new Fixed32Rules());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Fixed32Rules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Validate.ValidateReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Fixed32Rules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Fixed32Rules(Fixed32Rules other) : this() {
      _hasBits0 = other._hasBits0;
      const_ = other.const_;
      lt_ = other.lt_;
      lte_ = other.lte_;
      gt_ = other.gt_;
      gte_ = other.gte_;
      in_ = other.in_.Clone();
      notIn_ = other.notIn_.Clone();
      ignoreEmpty_ = other.ignoreEmpty_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Fixed32Rules Clone() {
      return new Fixed32Rules(this);
    }

    /// <summary>Field number for the "const" field.</summary>
    public const int ConstFieldNumber = 1;
    private readonly static uint ConstDefaultValue = 0;

    private uint const_;
    /// <summary>
    /// Const specifies that this field must be exactly the specified value
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Const {
      get { if ((_hasBits0 & 1) != 0) { return const_; } else { return ConstDefaultValue; } }
      set {
        _hasBits0 |= 1;
        const_ = value;
      }
    }
    /// <summary>Gets whether the "const" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasConst {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "const" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearConst() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "lt" field.</summary>
    public const int LtFieldNumber = 2;
    private readonly static uint LtDefaultValue = 0;

    private uint lt_;
    /// <summary>
    /// Lt specifies that this field must be less than the specified value,
    /// exclusive
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Lt {
      get { if ((_hasBits0 & 2) != 0) { return lt_; } else { return LtDefaultValue; } }
      set {
        _hasBits0 |= 2;
        lt_ = value;
      }
    }
    /// <summary>Gets whether the "lt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLt {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "lt" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLt() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "lte" field.</summary>
    public const int LteFieldNumber = 3;
    private readonly static uint LteDefaultValue = 0;

    private uint lte_;
    /// <summary>
    /// Lte specifies that this field must be less than or equal to the
    /// specified value, inclusive
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Lte {
      get { if ((_hasBits0 & 4) != 0) { return lte_; } else { return LteDefaultValue; } }
      set {
        _hasBits0 |= 4;
        lte_ = value;
      }
    }
    /// <summary>Gets whether the "lte" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLte {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "lte" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLte() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "gt" field.</summary>
    public const int GtFieldNumber = 4;
    private readonly static uint GtDefaultValue = 0;

    private uint gt_;
    /// <summary>
    /// Gt specifies that this field must be greater than the specified value,
    /// exclusive. If the value of Gt is larger than a specified Lt or Lte, the
    /// range is reversed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Gt {
      get { if ((_hasBits0 & 8) != 0) { return gt_; } else { return GtDefaultValue; } }
      set {
        _hasBits0 |= 8;
        gt_ = value;
      }
    }
    /// <summary>Gets whether the "gt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGt {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "gt" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGt() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "gte" field.</summary>
    public const int GteFieldNumber = 5;
    private readonly static uint GteDefaultValue = 0;

    private uint gte_;
    /// <summary>
    /// Gte specifies that this field must be greater than or equal to the
    /// specified value, inclusive. If the value of Gte is larger than a
    /// specified Lt or Lte, the range is reversed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Gte {
      get { if ((_hasBits0 & 16) != 0) { return gte_; } else { return GteDefaultValue; } }
      set {
        _hasBits0 |= 16;
        gte_ = value;
      }
    }
    /// <summary>Gets whether the "gte" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGte {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "gte" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGte() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "in" field.</summary>
    public const int InFieldNumber = 6;
    private static readonly pb::FieldCodec<uint> _repeated_in_codec
        = pb::FieldCodec.ForFixed32(53);
    private readonly pbc::RepeatedField<uint> in_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// In specifies that this field must be equal to one of the specified
    /// values
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<uint> In {
      get { return in_; }
    }

    /// <summary>Field number for the "not_in" field.</summary>
    public const int NotInFieldNumber = 7;
    private static readonly pb::FieldCodec<uint> _repeated_notIn_codec
        = pb::FieldCodec.ForFixed32(61);
    private readonly pbc::RepeatedField<uint> notIn_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// NotIn specifies that this field cannot be equal to one of the specified
    /// values
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<uint> NotIn {
      get { return notIn_; }
    }

    /// <summary>Field number for the "ignore_empty" field.</summary>
    public const int IgnoreEmptyFieldNumber = 8;
    private readonly static bool IgnoreEmptyDefaultValue = false;

    private bool ignoreEmpty_;
    /// <summary>
    /// IgnoreEmpty specifies that the validation rules of this field should be
    /// evaluated only if the field is not empty
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IgnoreEmpty {
      get { if ((_hasBits0 & 32) != 0) { return ignoreEmpty_; } else { return IgnoreEmptyDefaultValue; } }
      set {
        _hasBits0 |= 32;
        ignoreEmpty_ = value;
      }
    }
    /// <summary>Gets whether the "ignore_empty" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIgnoreEmpty {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "ignore_empty" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIgnoreEmpty() {
      _hasBits0 &= ~32;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Fixed32Rules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Fixed32Rules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Const != other.Const) return false;
      if (Lt != other.Lt) return false;
      if (Lte != other.Lte) return false;
      if (Gt != other.Gt) return false;
      if (Gte != other.Gte) return false;
      if(!in_.Equals(other.in_)) return false;
      if(!notIn_.Equals(other.notIn_)) return false;
      if (IgnoreEmpty != other.IgnoreEmpty) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasConst) hash ^= Const.GetHashCode();
      if (HasLt) hash ^= Lt.GetHashCode();
      if (HasLte) hash ^= Lte.GetHashCode();
      if (HasGt) hash ^= Gt.GetHashCode();
      if (HasGte) hash ^= Gte.GetHashCode();
      hash ^= in_.GetHashCode();
      hash ^= notIn_.GetHashCode();
      if (HasIgnoreEmpty) hash ^= IgnoreEmpty.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasConst) {
        output.WriteRawTag(13);
        output.WriteFixed32(Const);
      }
      if (HasLt) {
        output.WriteRawTag(21);
        output.WriteFixed32(Lt);
      }
      if (HasLte) {
        output.WriteRawTag(29);
        output.WriteFixed32(Lte);
      }
      if (HasGt) {
        output.WriteRawTag(37);
        output.WriteFixed32(Gt);
      }
      if (HasGte) {
        output.WriteRawTag(45);
        output.WriteFixed32(Gte);
      }
      in_.WriteTo(output, _repeated_in_codec);
      notIn_.WriteTo(output, _repeated_notIn_codec);
      if (HasIgnoreEmpty) {
        output.WriteRawTag(64);
        output.WriteBool(IgnoreEmpty);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasConst) {
        output.WriteRawTag(13);
        output.WriteFixed32(Const);
      }
      if (HasLt) {
        output.WriteRawTag(21);
        output.WriteFixed32(Lt);
      }
      if (HasLte) {
        output.WriteRawTag(29);
        output.WriteFixed32(Lte);
      }
      if (HasGt) {
        output.WriteRawTag(37);
        output.WriteFixed32(Gt);
      }
      if (HasGte) {
        output.WriteRawTag(45);
        output.WriteFixed32(Gte);
      }
      in_.WriteTo(ref output, _repeated_in_codec);
      notIn_.WriteTo(ref output, _repeated_notIn_codec);
      if (HasIgnoreEmpty) {
        output.WriteRawTag(64);
        output.WriteBool(IgnoreEmpty);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasConst) {
        size += 1 + 4;
      }
      if (HasLt) {
        size += 1 + 4;
      }
      if (HasLte) {
        size += 1 + 4;
      }
      if (HasGt) {
        size += 1 + 4;
      }
      if (HasGte) {
        size += 1 + 4;
      }
      size += in_.CalculateSize(_repeated_in_codec);
      size += notIn_.CalculateSize(_repeated_notIn_codec);
      if (HasIgnoreEmpty) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Fixed32Rules other) {
      if (other == null) {
        return;
      }
      if (other.HasConst) {
        Const = other.Const;
      }
      if (other.HasLt) {
        Lt = other.Lt;
      }
      if (other.HasLte) {
        Lte = other.Lte;
      }
      if (other.HasGt) {
        Gt = other.Gt;
      }
      if (other.HasGte) {
        Gte = other.Gte;
      }
      in_.Add(other.in_);
      notIn_.Add(other.notIn_);
      if (other.HasIgnoreEmpty) {
        IgnoreEmpty = other.IgnoreEmpty;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Const = input.ReadFixed32();
            break;
          }
          case 21: {
            Lt = input.ReadFixed32();
            break;
          }
          case 29: {
            Lte = input.ReadFixed32();
            break;
          }
          case 37: {
            Gt = input.ReadFixed32();
            break;
          }
          case 45: {
            Gte = input.ReadFixed32();
            break;
          }
          case 50:
          case 53: {
            in_.AddEntriesFrom(input, _repeated_in_codec);
            break;
          }
          case 58:
          case 61: {
            notIn_.AddEntriesFrom(input, _repeated_notIn_codec);
            break;
          }
          case 64: {
            IgnoreEmpty = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            Const = input.ReadFixed32();
            break;
          }
          case 21: {
            Lt = input.ReadFixed32();
            break;
          }
          case 29: {
            Lte = input.ReadFixed32();
            break;
          }
          case 37: {
            Gt = input.ReadFixed32();
            break;
          }
          case 45: {
            Gte = input.ReadFixed32();
            break;
          }
          case 50:
          case 53: {
            in_.AddEntriesFrom(ref input, _repeated_in_codec);
            break;
          }
          case 58:
          case 61: {
            notIn_.AddEntriesFrom(ref input, _repeated_notIn_codec);
            break;
          }
          case 64: {
            IgnoreEmpty = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Fixed64Rules describes the constraints applied to `fixed64` values
  /// </summary>
  public sealed partial class Fixed64Rules : pb::IMessage<Fixed64Rules>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Fixed64Rules> _parser = new pb::MessageParser<Fixed64Rules>(() => new Fixed64Rules());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Fixed64Rules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Validate.ValidateReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Fixed64Rules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Fixed64Rules(Fixed64Rules other) : this() {
      _hasBits0 = other._hasBits0;
      const_ = other.const_;
      lt_ = other.lt_;
      lte_ = other.lte_;
      gt_ = other.gt_;
      gte_ = other.gte_;
      in_ = other.in_.Clone();
      notIn_ = other.notIn_.Clone();
      ignoreEmpty_ = other.ignoreEmpty_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Fixed64Rules Clone() {
      return new Fixed64Rules(this);
    }

    /// <summary>Field number for the "const" field.</summary>
    public const int ConstFieldNumber = 1;
    private readonly static ulong ConstDefaultValue = 0UL;

    private ulong const_;
    /// <summary>
    /// Const specifies that this field must be exactly the specified value
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong Const {
      get { if ((_hasBits0 & 1) != 0) { return const_; } else { return ConstDefaultValue; } }
      set {
        _hasBits0 |= 1;
        const_ = value;
      }
    }
    /// <summary>Gets whether the "const" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasConst {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "const" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearConst() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "lt" field.</summary>
    public const int LtFieldNumber = 2;
    private readonly static ulong LtDefaultValue = 0UL;

    private ulong lt_;
    /// <summary>
    /// Lt specifies that this field must be less than the specified value,
    /// exclusive
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong Lt {
      get { if ((_hasBits0 & 2) != 0) { return lt_; } else { return LtDefaultValue; } }
      set {
        _hasBits0 |= 2;
        lt_ = value;
      }
    }
    /// <summary>Gets whether the "lt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLt {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "lt" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLt() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "lte" field.</summary>
    public const int LteFieldNumber = 3;
    private readonly static ulong LteDefaultValue = 0UL;

    private ulong lte_;
    /// <summary>
    /// Lte specifies that this field must be less than or equal to the
    /// specified value, inclusive
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong Lte {
      get { if ((_hasBits0 & 4) != 0) { return lte_; } else { return LteDefaultValue; } }
      set {
        _hasBits0 |= 4;
        lte_ = value;
      }
    }
    /// <summary>Gets whether the "lte" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLte {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "lte" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLte() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "gt" field.</summary>
    public const int GtFieldNumber = 4;
    private readonly static ulong GtDefaultValue = 0UL;

    private ulong gt_;
    /// <summary>
    /// Gt specifies that this field must be greater than the specified value,
    /// exclusive. If the value of Gt is larger than a specified Lt or Lte, the
    /// range is reversed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong Gt {
      get { if ((_hasBits0 & 8) != 0) { return gt_; } else { return GtDefaultValue; } }
      set {
        _hasBits0 |= 8;
        gt_ = value;
      }
    }
    /// <summary>Gets whether the "gt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGt {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "gt" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGt() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "gte" field.</summary>
    public const int GteFieldNumber = 5;
    private readonly static ulong GteDefaultValue = 0UL;

    private ulong gte_;
    /// <summary>
    /// Gte specifies that this field must be greater than or equal to the
    /// specified value, inclusive. If the value of Gte is larger than a
    /// specified Lt or Lte, the range is reversed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong Gte {
      get { if ((_hasBits0 & 16) != 0) { return gte_; } else { return GteDefaultValue; } }
      set {
        _hasBits0 |= 16;
        gte_ = value;
      }
    }
    /// <summary>Gets whether the "gte" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGte {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "gte" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGte() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "in" field.</summary>
    public const int InFieldNumber = 6;
    private static readonly pb::FieldCodec<ulong> _repeated_in_codec
        = pb::FieldCodec.ForFixed64(49);
    private readonly pbc::RepeatedField<ulong> in_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    /// In specifies that this field must be equal to one of the specified
    /// values
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<ulong> In {
      get { return in_; }
    }

    /// <summary>Field number for the "not_in" field.</summary>
    public const int NotInFieldNumber = 7;
    private static readonly pb::FieldCodec<ulong> _repeated_notIn_codec
        = pb::FieldCodec.ForFixed64(57);
    private readonly pbc::RepeatedField<ulong> notIn_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    /// NotIn specifies that this field cannot be equal to one of the specified
    /// values
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<ulong> NotIn {
      get { return notIn_; }
    }

    /// <summary>Field number for the "ignore_empty" field.</summary>
    public const int IgnoreEmptyFieldNumber = 8;
    private readonly static bool IgnoreEmptyDefaultValue = false;

    private bool ignoreEmpty_;
    /// <summary>
    /// IgnoreEmpty specifies that the validation rules of this field should be
    /// evaluated only if the field is not empty
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IgnoreEmpty {
      get { if ((_hasBits0 & 32) != 0) { return ignoreEmpty_; } else { return IgnoreEmptyDefaultValue; } }
      set {
        _hasBits0 |= 32;
        ignoreEmpty_ = value;
      }
    }
    /// <summary>Gets whether the "ignore_empty" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIgnoreEmpty {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "ignore_empty" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIgnoreEmpty() {
      _hasBits0 &= ~32;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Fixed64Rules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Fixed64Rules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Const != other.Const) return false;
      if (Lt != other.Lt) return false;
      if (Lte != other.Lte) return false;
      if (Gt != other.Gt) return false;
      if (Gte != other.Gte) return false;
      if(!in_.Equals(other.in_)) return false;
      if(!notIn_.Equals(other.notIn_)) return false;
      if (IgnoreEmpty != other.IgnoreEmpty) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasConst) hash ^= Const.GetHashCode();
      if (HasLt) hash ^= Lt.GetHashCode();
      if (HasLte) hash ^= Lte.GetHashCode();
      if (HasGt) hash ^= Gt.GetHashCode();
      if (HasGte) hash ^= Gte.GetHashCode();
      hash ^= in_.GetHashCode();
      hash ^= notIn_.GetHashCode();
      if (HasIgnoreEmpty) hash ^= IgnoreEmpty.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasConst) {
        output.WriteRawTag(9);
        output.WriteFixed64(Const);
      }
      if (HasLt) {
        output.WriteRawTag(17);
        output.WriteFixed64(Lt);
      }
      if (HasLte) {
        output.WriteRawTag(25);
        output.WriteFixed64(Lte);
      }
      if (HasGt) {
        output.WriteRawTag(33);
        output.WriteFixed64(Gt);
      }
      if (HasGte) {
        output.WriteRawTag(41);
        output.WriteFixed64(Gte);
      }
      in_.WriteTo(output, _repeated_in_codec);
      notIn_.WriteTo(output, _repeated_notIn_codec);
      if (HasIgnoreEmpty) {
        output.WriteRawTag(64);
        output.WriteBool(IgnoreEmpty);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasConst) {
        output.WriteRawTag(9);
        output.WriteFixed64(Const);
      }
      if (HasLt) {
        output.WriteRawTag(17);
        output.WriteFixed64(Lt);
      }
      if (HasLte) {
        output.WriteRawTag(25);
        output.WriteFixed64(Lte);
      }
      if (HasGt) {
        output.WriteRawTag(33);
        output.WriteFixed64(Gt);
      }
      if (HasGte) {
        output.WriteRawTag(41);
        output.WriteFixed64(Gte);
      }
      in_.WriteTo(ref output, _repeated_in_codec);
      notIn_.WriteTo(ref output, _repeated_notIn_codec);
      if (HasIgnoreEmpty) {
        output.WriteRawTag(64);
        output.WriteBool(IgnoreEmpty);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasConst) {
        size += 1 + 8;
      }
      if (HasLt) {
        size += 1 + 8;
      }
      if (HasLte) {
        size += 1 + 8;
      }
      if (HasGt) {
        size += 1 + 8;
      }
      if (HasGte) {
        size += 1 + 8;
      }
      size += in_.CalculateSize(_repeated_in_codec);
      size += notIn_.CalculateSize(_repeated_notIn_codec);
      if (HasIgnoreEmpty) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Fixed64Rules other) {
      if (other == null) {
        return;
      }
      if (other.HasConst) {
        Const = other.Const;
      }
      if (other.HasLt) {
        Lt = other.Lt;
      }
      if (other.HasLte) {
        Lte = other.Lte;
      }
      if (other.HasGt) {
        Gt = other.Gt;
      }
      if (other.HasGte) {
        Gte = other.Gte;
      }
      in_.Add(other.in_);
      notIn_.Add(other.notIn_);
      if (other.HasIgnoreEmpty) {
        IgnoreEmpty = other.IgnoreEmpty;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Const = input.ReadFixed64();
            break;
          }
          case 17: {
            Lt = input.ReadFixed64();
            break;
          }
          case 25: {
            Lte = input.ReadFixed64();
            break;
          }
          case 33: {
            Gt = input.ReadFixed64();
            break;
          }
          case 41: {
            Gte = input.ReadFixed64();
            break;
          }
          case 50:
          case 49: {
            in_.AddEntriesFrom(input, _repeated_in_codec);
            break;
          }
          case 58:
          case 57: {
            notIn_.AddEntriesFrom(input, _repeated_notIn_codec);
            break;
          }
          case 64: {
            IgnoreEmpty = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            Const = input.ReadFixed64();
            break;
          }
          case 17: {
            Lt = input.ReadFixed64();
            break;
          }
          case 25: {
            Lte = input.ReadFixed64();
            break;
          }
          case 33: {
            Gt = input.ReadFixed64();
            break;
          }
          case 41: {
            Gte = input.ReadFixed64();
            break;
          }
          case 50:
          case 49: {
            in_.AddEntriesFrom(ref input, _repeated_in_codec);
            break;
          }
          case 58:
          case 57: {
            notIn_.AddEntriesFrom(ref input, _repeated_notIn_codec);
            break;
          }
          case 64: {
            IgnoreEmpty = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// SFixed32Rules describes the constraints applied to `sfixed32` values
  /// </summary>
  public sealed partial class SFixed32Rules : pb::IMessage<SFixed32Rules>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SFixed32Rules> _parser = new pb::MessageParser<SFixed32Rules>(() => new SFixed32Rules());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SFixed32Rules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Validate.ValidateReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SFixed32Rules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SFixed32Rules(SFixed32Rules other) : this() {
      _hasBits0 = other._hasBits0;
      const_ = other.const_;
      lt_ = other.lt_;
      lte_ = other.lte_;
      gt_ = other.gt_;
      gte_ = other.gte_;
      in_ = other.in_.Clone();
      notIn_ = other.notIn_.Clone();
      ignoreEmpty_ = other.ignoreEmpty_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SFixed32Rules Clone() {
      return new SFixed32Rules(this);
    }

    /// <summary>Field number for the "const" field.</summary>
    public const int ConstFieldNumber = 1;
    private readonly static int ConstDefaultValue = 0;

    private int const_;
    /// <summary>
    /// Const specifies that this field must be exactly the specified value
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Const {
      get { if ((_hasBits0 & 1) != 0) { return const_; } else { return ConstDefaultValue; } }
      set {
        _hasBits0 |= 1;
        const_ = value;
      }
    }
    /// <summary>Gets whether the "const" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasConst {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "const" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearConst() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "lt" field.</summary>
    public const int LtFieldNumber = 2;
    private readonly static int LtDefaultValue = 0;

    private int lt_;
    /// <summary>
    /// Lt specifies that this field must be less than the specified value,
    /// exclusive
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Lt {
      get { if ((_hasBits0 & 2) != 0) { return lt_; } else { return LtDefaultValue; } }
      set {
        _hasBits0 |= 2;
        lt_ = value;
      }
    }
    /// <summary>Gets whether the "lt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLt {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "lt" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLt() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "lte" field.</summary>
    public const int LteFieldNumber = 3;
    private readonly static int LteDefaultValue = 0;

    private int lte_;
    /// <summary>
    /// Lte specifies that this field must be less than or equal to the
    /// specified value, inclusive
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Lte {
      get { if ((_hasBits0 & 4) != 0) { return lte_; } else { return LteDefaultValue; } }
      set {
        _hasBits0 |= 4;
        lte_ = value;
      }
    }
    /// <summary>Gets whether the "lte" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLte {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "lte" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLte() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "gt" field.</summary>
    public const int GtFieldNumber = 4;
    private readonly static int GtDefaultValue = 0;

    private int gt_;
    /// <summary>
    /// Gt specifies that this field must be greater than the specified value,
    /// exclusive. If the value of Gt is larger than a specified Lt or Lte, the
    /// range is reversed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Gt {
      get { if ((_hasBits0 & 8) != 0) { return gt_; } else { return GtDefaultValue; } }
      set {
        _hasBits0 |= 8;
        gt_ = value;
      }
    }
    /// <summary>Gets whether the "gt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGt {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "gt" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGt() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "gte" field.</summary>
    public const int GteFieldNumber = 5;
    private readonly static int GteDefaultValue = 0;

    private int gte_;
    /// <summary>
    /// Gte specifies that this field must be greater than or equal to the
    /// specified value, inclusive. If the value of Gte is larger than a
    /// specified Lt or Lte, the range is reversed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Gte {
      get { if ((_hasBits0 & 16) != 0) { return gte_; } else { return GteDefaultValue; } }
      set {
        _hasBits0 |= 16;
        gte_ = value;
      }
    }
    /// <summary>Gets whether the "gte" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGte {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "gte" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGte() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "in" field.</summary>
    public const int InFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_in_codec
        = pb::FieldCodec.ForSFixed32(53);
    private readonly pbc::RepeatedField<int> in_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// In specifies that this field must be equal to one of the specified
    /// values
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> In {
      get { return in_; }
    }

    /// <summary>Field number for the "not_in" field.</summary>
    public const int NotInFieldNumber = 7;
    private static readonly pb::FieldCodec<int> _repeated_notIn_codec
        = pb::FieldCodec.ForSFixed32(61);
    private readonly pbc::RepeatedField<int> notIn_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// NotIn specifies that this field cannot be equal to one of the specified
    /// values
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> NotIn {
      get { return notIn_; }
    }

    /// <summary>Field number for the "ignore_empty" field.</summary>
    public const int IgnoreEmptyFieldNumber = 8;
    private readonly static bool IgnoreEmptyDefaultValue = false;

    private bool ignoreEmpty_;
    /// <summary>
    /// IgnoreEmpty specifies that the validation rules of this field should be
    /// evaluated only if the field is not empty
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IgnoreEmpty {
      get { if ((_hasBits0 & 32) != 0) { return ignoreEmpty_; } else { return IgnoreEmptyDefaultValue; } }
      set {
        _hasBits0 |= 32;
        ignoreEmpty_ = value;
      }
    }
    /// <summary>Gets whether the "ignore_empty" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIgnoreEmpty {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "ignore_empty" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIgnoreEmpty() {
      _hasBits0 &= ~32;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SFixed32Rules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SFixed32Rules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Const != other.Const) return false;
      if (Lt != other.Lt) return false;
      if (Lte != other.Lte) return false;
      if (Gt != other.Gt) return false;
      if (Gte != other.Gte) return false;
      if(!in_.Equals(other.in_)) return false;
      if(!notIn_.Equals(other.notIn_)) return false;
      if (IgnoreEmpty != other.IgnoreEmpty) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasConst) hash ^= Const.GetHashCode();
      if (HasLt) hash ^= Lt.GetHashCode();
      if (HasLte) hash ^= Lte.GetHashCode();
      if (HasGt) hash ^= Gt.GetHashCode();
      if (HasGte) hash ^= Gte.GetHashCode();
      hash ^= in_.GetHashCode();
      hash ^= notIn_.GetHashCode();
      if (HasIgnoreEmpty) hash ^= IgnoreEmpty.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasConst) {
        output.WriteRawTag(13);
        output.WriteSFixed32(Const);
      }
      if (HasLt) {
        output.WriteRawTag(21);
        output.WriteSFixed32(Lt);
      }
      if (HasLte) {
        output.WriteRawTag(29);
        output.WriteSFixed32(Lte);
      }
      if (HasGt) {
        output.WriteRawTag(37);
        output.WriteSFixed32(Gt);
      }
      if (HasGte) {
        output.WriteRawTag(45);
        output.WriteSFixed32(Gte);
      }
      in_.WriteTo(output, _repeated_in_codec);
      notIn_.WriteTo(output, _repeated_notIn_codec);
      if (HasIgnoreEmpty) {
        output.WriteRawTag(64);
        output.WriteBool(IgnoreEmpty);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasConst) {
        output.WriteRawTag(13);
        output.WriteSFixed32(Const);
      }
      if (HasLt) {
        output.WriteRawTag(21);
        output.WriteSFixed32(Lt);
      }
      if (HasLte) {
        output.WriteRawTag(29);
        output.WriteSFixed32(Lte);
      }
      if (HasGt) {
        output.WriteRawTag(37);
        output.WriteSFixed32(Gt);
      }
      if (HasGte) {
        output.WriteRawTag(45);
        output.WriteSFixed32(Gte);
      }
      in_.WriteTo(ref output, _repeated_in_codec);
      notIn_.WriteTo(ref output, _repeated_notIn_codec);
      if (HasIgnoreEmpty) {
        output.WriteRawTag(64);
        output.WriteBool(IgnoreEmpty);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasConst) {
        size += 1 + 4;
      }
      if (HasLt) {
        size += 1 + 4;
      }
      if (HasLte) {
        size += 1 + 4;
      }
      if (HasGt) {
        size += 1 + 4;
      }
      if (HasGte) {
        size += 1 + 4;
      }
      size += in_.CalculateSize(_repeated_in_codec);
      size += notIn_.CalculateSize(_repeated_notIn_codec);
      if (HasIgnoreEmpty) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SFixed32Rules other) {
      if (other == null) {
        return;
      }
      if (other.HasConst) {
        Const = other.Const;
      }
      if (other.HasLt) {
        Lt = other.Lt;
      }
      if (other.HasLte) {
        Lte = other.Lte;
      }
      if (other.HasGt) {
        Gt = other.Gt;
      }
      if (other.HasGte) {
        Gte = other.Gte;
      }
      in_.Add(other.in_);
      notIn_.Add(other.notIn_);
      if (other.HasIgnoreEmpty) {
        IgnoreEmpty = other.IgnoreEmpty;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Const = input.ReadSFixed32();
            break;
          }
          case 21: {
            Lt = input.ReadSFixed32();
            break;
          }
          case 29: {
            Lte = input.ReadSFixed32();
            break;
          }
          case 37: {
            Gt = input.ReadSFixed32();
            break;
          }
          case 45: {
            Gte = input.ReadSFixed32();
            break;
          }
          case 50:
          case 53: {
            in_.AddEntriesFrom(input, _repeated_in_codec);
            break;
          }
          case 58:
          case 61: {
            notIn_.AddEntriesFrom(input, _repeated_notIn_codec);
            break;
          }
          case 64: {
            IgnoreEmpty = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            Const = input.ReadSFixed32();
            break;
          }
          case 21: {
            Lt = input.ReadSFixed32();
            break;
          }
          case 29: {
            Lte = input.ReadSFixed32();
            break;
          }
          case 37: {
            Gt = input.ReadSFixed32();
            break;
          }
          case 45: {
            Gte = input.ReadSFixed32();
            break;
          }
          case 50:
          case 53: {
            in_.AddEntriesFrom(ref input, _repeated_in_codec);
            break;
          }
          case 58:
          case 61: {
            notIn_.AddEntriesFrom(ref input, _repeated_notIn_codec);
            break;
          }
          case 64: {
            IgnoreEmpty = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// SFixed64Rules describes the constraints applied to `sfixed64` values
  /// </summary>
  public sealed partial class SFixed64Rules : pb::IMessage<SFixed64Rules>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SFixed64Rules> _parser = new pb::MessageParser<SFixed64Rules>(() => new SFixed64Rules());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SFixed64Rules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Validate.ValidateReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SFixed64Rules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SFixed64Rules(SFixed64Rules other) : this() {
      _hasBits0 = other._hasBits0;
      const_ = other.const_;
      lt_ = other.lt_;
      lte_ = other.lte_;
      gt_ = other.gt_;
      gte_ = other.gte_;
      in_ = other.in_.Clone();
      notIn_ = other.notIn_.Clone();
      ignoreEmpty_ = other.ignoreEmpty_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SFixed64Rules Clone() {
      return new SFixed64Rules(this);
    }

    /// <summary>Field number for the "const" field.</summary>
    public const int ConstFieldNumber = 1;
    private readonly static long ConstDefaultValue = 0L;

    private long const_;
    /// <summary>
    /// Const specifies that this field must be exactly the specified value
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Const {
      get { if ((_hasBits0 & 1) != 0) { return const_; } else { return ConstDefaultValue; } }
      set {
        _hasBits0 |= 1;
        const_ = value;
      }
    }
    /// <summary>Gets whether the "const" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasConst {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "const" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearConst() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "lt" field.</summary>
    public const int LtFieldNumber = 2;
    private readonly static long LtDefaultValue = 0L;

    private long lt_;
    /// <summary>
    /// Lt specifies that this field must be less than the specified value,
    /// exclusive
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Lt {
      get { if ((_hasBits0 & 2) != 0) { return lt_; } else { return LtDefaultValue; } }
      set {
        _hasBits0 |= 2;
        lt_ = value;
      }
    }
    /// <summary>Gets whether the "lt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLt {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "lt" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLt() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "lte" field.</summary>
    public const int LteFieldNumber = 3;
    private readonly static long LteDefaultValue = 0L;

    private long lte_;
    /// <summary>
    /// Lte specifies that this field must be less than or equal to the
    /// specified value, inclusive
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Lte {
      get { if ((_hasBits0 & 4) != 0) { return lte_; } else { return LteDefaultValue; } }
      set {
        _hasBits0 |= 4;
        lte_ = value;
      }
    }
    /// <summary>Gets whether the "lte" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLte {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "lte" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLte() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "gt" field.</summary>
    public const int GtFieldNumber = 4;
    private readonly static long GtDefaultValue = 0L;

    private long gt_;
    /// <summary>
    /// Gt specifies that this field must be greater than the specified value,
    /// exclusive. If the value of Gt is larger than a specified Lt or Lte, the
    /// range is reversed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Gt {
      get { if ((_hasBits0 & 8) != 0) { return gt_; } else { return GtDefaultValue; } }
      set {
        _hasBits0 |= 8;
        gt_ = value;
      }
    }
    /// <summary>Gets whether the "gt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGt {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "gt" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGt() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "gte" field.</summary>
    public const int GteFieldNumber = 5;
    private readonly static long GteDefaultValue = 0L;

    private long gte_;
    /// <summary>
    /// Gte specifies that this field must be greater than or equal to the
    /// specified value, inclusive. If the value of Gte is larger than a
    /// specified Lt or Lte, the range is reversed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Gte {
      get { if ((_hasBits0 & 16) != 0) { return gte_; } else { return GteDefaultValue; } }
      set {
        _hasBits0 |= 16;
        gte_ = value;
      }
    }
    /// <summary>Gets whether the "gte" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGte {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "gte" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGte() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "in" field.</summary>
    public const int InFieldNumber = 6;
    private static readonly pb::FieldCodec<long> _repeated_in_codec
        = pb::FieldCodec.ForSFixed64(49);
    private readonly pbc::RepeatedField<long> in_ = new pbc::RepeatedField<long>();
    /// <summary>
    /// In specifies that this field must be equal to one of the specified
    /// values
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<long> In {
      get { return in_; }
    }

    /// <summary>Field number for the "not_in" field.</summary>
    public const int NotInFieldNumber = 7;
    private static readonly pb::FieldCodec<long> _repeated_notIn_codec
        = pb::FieldCodec.ForSFixed64(57);
    private readonly pbc::RepeatedField<long> notIn_ = new pbc::RepeatedField<long>();
    /// <summary>
    /// NotIn specifies that this field cannot be equal to one of the specified
    /// values
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<long> NotIn {
      get { return notIn_; }
    }

    /// <summary>Field number for the "ignore_empty" field.</summary>
    public const int IgnoreEmptyFieldNumber = 8;
    private readonly static bool IgnoreEmptyDefaultValue = false;

    private bool ignoreEmpty_;
    /// <summary>
    /// IgnoreEmpty specifies that the validation rules of this field should be
    /// evaluated only if the field is not empty
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IgnoreEmpty {
      get { if ((_hasBits0 & 32) != 0) { return ignoreEmpty_; } else { return IgnoreEmptyDefaultValue; } }
      set {
        _hasBits0 |= 32;
        ignoreEmpty_ = value;
      }
    }
    /// <summary>Gets whether the "ignore_empty" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIgnoreEmpty {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "ignore_empty" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIgnoreEmpty() {
      _hasBits0 &= ~32;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SFixed64Rules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SFixed64Rules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Const != other.Const) return false;
      if (Lt != other.Lt) return false;
      if (Lte != other.Lte) return false;
      if (Gt != other.Gt) return false;
      if (Gte != other.Gte) return false;
      if(!in_.Equals(other.in_)) return false;
      if(!notIn_.Equals(other.notIn_)) return false;
      if (IgnoreEmpty != other.IgnoreEmpty) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasConst) hash ^= Const.GetHashCode();
      if (HasLt) hash ^= Lt.GetHashCode();
      if (HasLte) hash ^= Lte.GetHashCode();
      if (HasGt) hash ^= Gt.GetHashCode();
      if (HasGte) hash ^= Gte.GetHashCode();
      hash ^= in_.GetHashCode();
      hash ^= notIn_.GetHashCode();
      if (HasIgnoreEmpty) hash ^= IgnoreEmpty.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasConst) {
        output.WriteRawTag(9);
        output.WriteSFixed64(Const);
      }
      if (HasLt) {
        output.WriteRawTag(17);
        output.WriteSFixed64(Lt);
      }
      if (HasLte) {
        output.WriteRawTag(25);
        output.WriteSFixed64(Lte);
      }
      if (HasGt) {
        output.WriteRawTag(33);
        output.WriteSFixed64(Gt);
      }
      if (HasGte) {
        output.WriteRawTag(41);
        output.WriteSFixed64(Gte);
      }
      in_.WriteTo(output, _repeated_in_codec);
      notIn_.WriteTo(output, _repeated_notIn_codec);
      if (HasIgnoreEmpty) {
        output.WriteRawTag(64);
        output.WriteBool(IgnoreEmpty);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasConst) {
        output.WriteRawTag(9);
        output.WriteSFixed64(Const);
      }
      if (HasLt) {
        output.WriteRawTag(17);
        output.WriteSFixed64(Lt);
      }
      if (HasLte) {
        output.WriteRawTag(25);
        output.WriteSFixed64(Lte);
      }
      if (HasGt) {
        output.WriteRawTag(33);
        output.WriteSFixed64(Gt);
      }
      if (HasGte) {
        output.WriteRawTag(41);
        output.WriteSFixed64(Gte);
      }
      in_.WriteTo(ref output, _repeated_in_codec);
      notIn_.WriteTo(ref output, _repeated_notIn_codec);
      if (HasIgnoreEmpty) {
        output.WriteRawTag(64);
        output.WriteBool(IgnoreEmpty);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasConst) {
        size += 1 + 8;
      }
      if (HasLt) {
        size += 1 + 8;
      }
      if (HasLte) {
        size += 1 + 8;
      }
      if (HasGt) {
        size += 1 + 8;
      }
      if (HasGte) {
        size += 1 + 8;
      }
      size += in_.CalculateSize(_repeated_in_codec);
      size += notIn_.CalculateSize(_repeated_notIn_codec);
      if (HasIgnoreEmpty) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SFixed64Rules other) {
      if (other == null) {
        return;
      }
      if (other.HasConst) {
        Const = other.Const;
      }
      if (other.HasLt) {
        Lt = other.Lt;
      }
      if (other.HasLte) {
        Lte = other.Lte;
      }
      if (other.HasGt) {
        Gt = other.Gt;
      }
      if (other.HasGte) {
        Gte = other.Gte;
      }
      in_.Add(other.in_);
      notIn_.Add(other.notIn_);
      if (other.HasIgnoreEmpty) {
        IgnoreEmpty = other.IgnoreEmpty;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Const = input.ReadSFixed64();
            break;
          }
          case 17: {
            Lt = input.ReadSFixed64();
            break;
          }
          case 25: {
            Lte = input.ReadSFixed64();
            break;
          }
          case 33: {
            Gt = input.ReadSFixed64();
            break;
          }
          case 41: {
            Gte = input.ReadSFixed64();
            break;
          }
          case 50:
          case 49: {
            in_.AddEntriesFrom(input, _repeated_in_codec);
            break;
          }
          case 58:
          case 57: {
            notIn_.AddEntriesFrom(input, _repeated_notIn_codec);
            break;
          }
          case 64: {
            IgnoreEmpty = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            Const = input.ReadSFixed64();
            break;
          }
          case 17: {
            Lt = input.ReadSFixed64();
            break;
          }
          case 25: {
            Lte = input.ReadSFixed64();
            break;
          }
          case 33: {
            Gt = input.ReadSFixed64();
            break;
          }
          case 41: {
            Gte = input.ReadSFixed64();
            break;
          }
          case 50:
          case 49: {
            in_.AddEntriesFrom(ref input, _repeated_in_codec);
            break;
          }
          case 58:
          case 57: {
            notIn_.AddEntriesFrom(ref input, _repeated_notIn_codec);
            break;
          }
          case 64: {
            IgnoreEmpty = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// BoolRules describes the constraints applied to `bool` values
  /// </summary>
  public sealed partial class BoolRules : pb::IMessage<BoolRules>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BoolRules> _parser = new pb::MessageParser<BoolRules>(() => new BoolRules());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<BoolRules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Validate.ValidateReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BoolRules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BoolRules(BoolRules other) : this() {
      _hasBits0 = other._hasBits0;
      const_ = other.const_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BoolRules Clone() {
      return new BoolRules(this);
    }

    /// <summary>Field number for the "const" field.</summary>
    public const int ConstFieldNumber = 1;
    private readonly static bool ConstDefaultValue = false;

    private bool const_;
    /// <summary>
    /// Const specifies that this field must be exactly the specified value
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Const {
      get { if ((_hasBits0 & 1) != 0) { return const_; } else { return ConstDefaultValue; } }
      set {
        _hasBits0 |= 1;
        const_ = value;
      }
    }
    /// <summary>Gets whether the "const" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasConst {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "const" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearConst() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as BoolRules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(BoolRules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Const != other.Const) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasConst) hash ^= Const.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasConst) {
        output.WriteRawTag(8);
        output.WriteBool(Const);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasConst) {
        output.WriteRawTag(8);
        output.WriteBool(Const);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasConst) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(BoolRules other) {
      if (other == null) {
        return;
      }
      if (other.HasConst) {
        Const = other.Const;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Const = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Const = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// StringRules describe the constraints applied to `string` values
  /// </summary>
  public sealed partial class StringRules : pb::IMessage<StringRules>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StringRules> _parser = new pb::MessageParser<StringRules>(() => new StringRules());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<StringRules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Validate.ValidateReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StringRules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StringRules(StringRules other) : this() {
      _hasBits0 = other._hasBits0;
      const_ = other.const_;
      len_ = other.len_;
      minLen_ = other.minLen_;
      maxLen_ = other.maxLen_;
      lenBytes_ = other.lenBytes_;
      minBytes_ = other.minBytes_;
      maxBytes_ = other.maxBytes_;
      pattern_ = other.pattern_;
      prefix_ = other.prefix_;
      suffix_ = other.suffix_;
      contains_ = other.contains_;
      notContains_ = other.notContains_;
      in_ = other.in_.Clone();
      notIn_ = other.notIn_.Clone();
      strict_ = other.strict_;
      ignoreEmpty_ = other.ignoreEmpty_;
      switch (other.WellKnownCase) {
        case WellKnownOneofCase.Email:
          Email = other.Email;
          break;
        case WellKnownOneofCase.Hostname:
          Hostname = other.Hostname;
          break;
        case WellKnownOneofCase.Ip:
          Ip = other.Ip;
          break;
        case WellKnownOneofCase.Ipv4:
          Ipv4 = other.Ipv4;
          break;
        case WellKnownOneofCase.Ipv6:
          Ipv6 = other.Ipv6;
          break;
        case WellKnownOneofCase.Uri:
          Uri = other.Uri;
          break;
        case WellKnownOneofCase.UriRef:
          UriRef = other.UriRef;
          break;
        case WellKnownOneofCase.Address:
          Address = other.Address;
          break;
        case WellKnownOneofCase.Uuid:
          Uuid = other.Uuid;
          break;
        case WellKnownOneofCase.WellKnownRegex:
          WellKnownRegex = other.WellKnownRegex;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StringRules Clone() {
      return new StringRules(this);
    }

    /// <summary>Field number for the "const" field.</summary>
    public const int ConstFieldNumber = 1;
    private readonly static string ConstDefaultValue = "";

    private string const_;
    /// <summary>
    /// Const specifies that this field must be exactly the specified value
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Const {
      get { return const_ ?? ConstDefaultValue; }
      set {
        const_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "const" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasConst {
      get { return const_ != null; }
    }
    /// <summary>Clears the value of the "const" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearConst() {
      const_ = null;
    }

    /// <summary>Field number for the "len" field.</summary>
    public const int LenFieldNumber = 19;
    private readonly static ulong LenDefaultValue = 0UL;

    private ulong len_;
    /// <summary>
    /// Len specifies that this field must be the specified number of
    /// characters (Unicode code points). Note that the number of
    /// characters may differ from the number of bytes in the string.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong Len {
      get { if ((_hasBits0 & 16) != 0) { return len_; } else { return LenDefaultValue; } }
      set {
        _hasBits0 |= 16;
        len_ = value;
      }
    }
    /// <summary>Gets whether the "len" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLen {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "len" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLen() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "min_len" field.</summary>
    public const int MinLenFieldNumber = 2;
    private readonly static ulong MinLenDefaultValue = 0UL;

    private ulong minLen_;
    /// <summary>
    /// MinLen specifies that this field must be the specified number of
    /// characters (Unicode code points) at a minimum. Note that the number of
    /// characters may differ from the number of bytes in the string.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong MinLen {
      get { if ((_hasBits0 & 1) != 0) { return minLen_; } else { return MinLenDefaultValue; } }
      set {
        _hasBits0 |= 1;
        minLen_ = value;
      }
    }
    /// <summary>Gets whether the "min_len" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMinLen {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "min_len" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMinLen() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "max_len" field.</summary>
    public const int MaxLenFieldNumber = 3;
    private readonly static ulong MaxLenDefaultValue = 0UL;

    private ulong maxLen_;
    /// <summary>
    /// MaxLen specifies that this field must be the specified number of
    /// characters (Unicode code points) at a maximum. Note that the number of
    /// characters may differ from the number of bytes in the string.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong MaxLen {
      get { if ((_hasBits0 & 2) != 0) { return maxLen_; } else { return MaxLenDefaultValue; } }
      set {
        _hasBits0 |= 2;
        maxLen_ = value;
      }
    }
    /// <summary>Gets whether the "max_len" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaxLen {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "max_len" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaxLen() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "len_bytes" field.</summary>
    public const int LenBytesFieldNumber = 20;
    private readonly static ulong LenBytesDefaultValue = 0UL;

    private ulong lenBytes_;
    /// <summary>
    /// LenBytes specifies that this field must be the specified number of bytes
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong LenBytes {
      get { if ((_hasBits0 & 32) != 0) { return lenBytes_; } else { return LenBytesDefaultValue; } }
      set {
        _hasBits0 |= 32;
        lenBytes_ = value;
      }
    }
    /// <summary>Gets whether the "len_bytes" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLenBytes {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "len_bytes" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLenBytes() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "min_bytes" field.</summary>
    public const int MinBytesFieldNumber = 4;
    private readonly static ulong MinBytesDefaultValue = 0UL;

    private ulong minBytes_;
    /// <summary>
    /// MinBytes specifies that this field must be the specified number of bytes
    /// at a minimum
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong MinBytes {
      get { if ((_hasBits0 & 4) != 0) { return minBytes_; } else { return MinBytesDefaultValue; } }
      set {
        _hasBits0 |= 4;
        minBytes_ = value;
      }
    }
    /// <summary>Gets whether the "min_bytes" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMinBytes {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "min_bytes" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMinBytes() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "max_bytes" field.</summary>
    public const int MaxBytesFieldNumber = 5;
    private readonly static ulong MaxBytesDefaultValue = 0UL;

    private ulong maxBytes_;
    /// <summary>
    /// MaxBytes specifies that this field must be the specified number of bytes
    /// at a maximum
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong MaxBytes {
      get { if ((_hasBits0 & 8) != 0) { return maxBytes_; } else { return MaxBytesDefaultValue; } }
      set {
        _hasBits0 |= 8;
        maxBytes_ = value;
      }
    }
    /// <summary>Gets whether the "max_bytes" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaxBytes {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "max_bytes" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaxBytes() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "pattern" field.</summary>
    public const int PatternFieldNumber = 6;
    private readonly static string PatternDefaultValue = "";

    private string pattern_;
    /// <summary>
    /// Pattern specifes that this field must match against the specified
    /// regular expression (RE2 syntax). The included expression should elide
    /// any delimiters.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Pattern {
      get { return pattern_ ?? PatternDefaultValue; }
      set {
        pattern_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "pattern" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPattern {
      get { return pattern_ != null; }
    }
    /// <summary>Clears the value of the "pattern" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPattern() {
      pattern_ = null;
    }

    /// <summary>Field number for the "prefix" field.</summary>
    public const int PrefixFieldNumber = 7;
    private readonly static string PrefixDefaultValue = "";

    private string prefix_;
    /// <summary>
    /// Prefix specifies that this field must have the specified substring at
    /// the beginning of the string.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Prefix {
      get { return prefix_ ?? PrefixDefaultValue; }
      set {
        prefix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "prefix" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPrefix {
      get { return prefix_ != null; }
    }
    /// <summary>Clears the value of the "prefix" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPrefix() {
      prefix_ = null;
    }

    /// <summary>Field number for the "suffix" field.</summary>
    public const int SuffixFieldNumber = 8;
    private readonly static string SuffixDefaultValue = "";

    private string suffix_;
    /// <summary>
    /// Suffix specifies that this field must have the specified substring at
    /// the end of the string.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Suffix {
      get { return suffix_ ?? SuffixDefaultValue; }
      set {
        suffix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "suffix" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSuffix {
      get { return suffix_ != null; }
    }
    /// <summary>Clears the value of the "suffix" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSuffix() {
      suffix_ = null;
    }

    /// <summary>Field number for the "contains" field.</summary>
    public const int ContainsFieldNumber = 9;
    private readonly static string ContainsDefaultValue = "";

    private string contains_;
    /// <summary>
    /// Contains specifies that this field must have the specified substring
    /// anywhere in the string.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Contains {
      get { return contains_ ?? ContainsDefaultValue; }
      set {
        contains_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "contains" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasContains {
      get { return contains_ != null; }
    }
    /// <summary>Clears the value of the "contains" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearContains() {
      contains_ = null;
    }

    /// <summary>Field number for the "not_contains" field.</summary>
    public const int NotContainsFieldNumber = 23;
    private readonly static string NotContainsDefaultValue = "";

    private string notContains_;
    /// <summary>
    /// NotContains specifies that this field cannot have the specified substring
    /// anywhere in the string.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string NotContains {
      get { return notContains_ ?? NotContainsDefaultValue; }
      set {
        notContains_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "not_contains" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasNotContains {
      get { return notContains_ != null; }
    }
    /// <summary>Clears the value of the "not_contains" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearNotContains() {
      notContains_ = null;
    }

    /// <summary>Field number for the "in" field.</summary>
    public const int InFieldNumber = 10;
    private static readonly pb::FieldCodec<string> _repeated_in_codec
        = pb::FieldCodec.ForString(82);
    private readonly pbc::RepeatedField<string> in_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// In specifies that this field must be equal to one of the specified
    /// values
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> In {
      get { return in_; }
    }

    /// <summary>Field number for the "not_in" field.</summary>
    public const int NotInFieldNumber = 11;
    private static readonly pb::FieldCodec<string> _repeated_notIn_codec
        = pb::FieldCodec.ForString(90);
    private readonly pbc::RepeatedField<string> notIn_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// NotIn specifies that this field cannot be equal to one of the specified
    /// values
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> NotIn {
      get { return notIn_; }
    }

    /// <summary>Field number for the "email" field.</summary>
    public const int EmailFieldNumber = 12;
    /// <summary>
    /// Email specifies that the field must be a valid email address as
    /// defined by RFC 5322
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Email {
      get { return HasEmail ? (bool) wellKnown_ : false; }
      set {
        wellKnown_ = value;
        wellKnownCase_ = WellKnownOneofCase.Email;
      }
    }
    /// <summary>Gets whether the "email" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEmail {
      get { return wellKnownCase_ == WellKnownOneofCase.Email; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "email" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearEmail() {
      if (HasEmail) {
        ClearWellKnown();
      }
    }

    /// <summary>Field number for the "hostname" field.</summary>
    public const int HostnameFieldNumber = 13;
    /// <summary>
    /// Hostname specifies that the field must be a valid hostname as
    /// defined by RFC 1034. This constraint does not support
    /// internationalized domain names (IDNs).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Hostname {
      get { return HasHostname ? (bool) wellKnown_ : false; }
      set {
        wellKnown_ = value;
        wellKnownCase_ = WellKnownOneofCase.Hostname;
      }
    }
    /// <summary>Gets whether the "hostname" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHostname {
      get { return wellKnownCase_ == WellKnownOneofCase.Hostname; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "hostname" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHostname() {
      if (HasHostname) {
        ClearWellKnown();
      }
    }

    /// <summary>Field number for the "ip" field.</summary>
    public const int IpFieldNumber = 14;
    /// <summary>
    /// Ip specifies that the field must be a valid IP (v4 or v6) address.
    /// Valid IPv6 addresses should not include surrounding square brackets.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Ip {
      get { return HasIp ? (bool) wellKnown_ : false; }
      set {
        wellKnown_ = value;
        wellKnownCase_ = WellKnownOneofCase.Ip;
      }
    }
    /// <summary>Gets whether the "ip" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIp {
      get { return wellKnownCase_ == WellKnownOneofCase.Ip; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "ip" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIp() {
      if (HasIp) {
        ClearWellKnown();
      }
    }

    /// <summary>Field number for the "ipv4" field.</summary>
    public const int Ipv4FieldNumber = 15;
    /// <summary>
    /// Ipv4 specifies that the field must be a valid IPv4 address.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Ipv4 {
      get { return HasIpv4 ? (bool) wellKnown_ : false; }
      set {
        wellKnown_ = value;
        wellKnownCase_ = WellKnownOneofCase.Ipv4;
      }
    }
    /// <summary>Gets whether the "ipv4" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIpv4 {
      get { return wellKnownCase_ == WellKnownOneofCase.Ipv4; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "ipv4" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIpv4() {
      if (HasIpv4) {
        ClearWellKnown();
      }
    }

    /// <summary>Field number for the "ipv6" field.</summary>
    public const int Ipv6FieldNumber = 16;
    /// <summary>
    /// Ipv6 specifies that the field must be a valid IPv6 address. Valid
    /// IPv6 addresses should not include surrounding square brackets.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Ipv6 {
      get { return HasIpv6 ? (bool) wellKnown_ : false; }
      set {
        wellKnown_ = value;
        wellKnownCase_ = WellKnownOneofCase.Ipv6;
      }
    }
    /// <summary>Gets whether the "ipv6" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIpv6 {
      get { return wellKnownCase_ == WellKnownOneofCase.Ipv6; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "ipv6" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIpv6() {
      if (HasIpv6) {
        ClearWellKnown();
      }
    }

    /// <summary>Field number for the "uri" field.</summary>
    public const int UriFieldNumber = 17;
    /// <summary>
    /// Uri specifies that the field must be a valid, absolute URI as defined
    /// by RFC 3986
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Uri {
      get { return HasUri ? (bool) wellKnown_ : false; }
      set {
        wellKnown_ = value;
        wellKnownCase_ = WellKnownOneofCase.Uri;
      }
    }
    /// <summary>Gets whether the "uri" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUri {
      get { return wellKnownCase_ == WellKnownOneofCase.Uri; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "uri" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUri() {
      if (HasUri) {
        ClearWellKnown();
      }
    }

    /// <summary>Field number for the "uri_ref" field.</summary>
    public const int UriRefFieldNumber = 18;
    /// <summary>
    /// UriRef specifies that the field must be a valid URI as defined by RFC
    /// 3986 and may be relative or absolute.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool UriRef {
      get { return HasUriRef ? (bool) wellKnown_ : false; }
      set {
        wellKnown_ = value;
        wellKnownCase_ = WellKnownOneofCase.UriRef;
      }
    }
    /// <summary>Gets whether the "uri_ref" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUriRef {
      get { return wellKnownCase_ == WellKnownOneofCase.UriRef; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "uri_ref" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUriRef() {
      if (HasUriRef) {
        ClearWellKnown();
      }
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 21;
    /// <summary>
    /// Address specifies that the field must be either a valid hostname as
    /// defined by RFC 1034 (which does not support internationalized domain
    /// names or IDNs), or it can be a valid IP (v4 or v6).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Address {
      get { return HasAddress ? (bool) wellKnown_ : false; }
      set {
        wellKnown_ = value;
        wellKnownCase_ = WellKnownOneofCase.Address;
      }
    }
    /// <summary>Gets whether the "address" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAddress {
      get { return wellKnownCase_ == WellKnownOneofCase.Address; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "address" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAddress() {
      if (HasAddress) {
        ClearWellKnown();
      }
    }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 22;
    /// <summary>
    /// Uuid specifies that the field must be a valid UUID as defined by
    /// RFC 4122
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Uuid {
      get { return HasUuid ? (bool) wellKnown_ : false; }
      set {
        wellKnown_ = value;
        wellKnownCase_ = WellKnownOneofCase.Uuid;
      }
    }
    /// <summary>Gets whether the "uuid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUuid {
      get { return wellKnownCase_ == WellKnownOneofCase.Uuid; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "uuid" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUuid() {
      if (HasUuid) {
        ClearWellKnown();
      }
    }

    /// <summary>Field number for the "well_known_regex" field.</summary>
    public const int WellKnownRegexFieldNumber = 24;
    /// <summary>
    /// WellKnownRegex specifies a common well known pattern defined as a regex.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Validate.KnownRegex WellKnownRegex {
      get { return HasWellKnownRegex ? (global::Validate.KnownRegex) wellKnown_ : global::Validate.KnownRegex.Unknown; }
      set {
        wellKnown_ = value;
        wellKnownCase_ = WellKnownOneofCase.WellKnownRegex;
      }
    }
    /// <summary>Gets whether the "well_known_regex" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasWellKnownRegex {
      get { return wellKnownCase_ == WellKnownOneofCase.WellKnownRegex; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "well_known_regex" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearWellKnownRegex() {
      if (HasWellKnownRegex) {
        ClearWellKnown();
      }
    }

    /// <summary>Field number for the "strict" field.</summary>
    public const int StrictFieldNumber = 25;
    private readonly static bool StrictDefaultValue = true;

    private bool strict_;
    /// <summary>
    /// This applies to regexes HTTP_HEADER_NAME and HTTP_HEADER_VALUE to enable
    /// strict header validation.
    /// By default, this is true, and HTTP header validations are RFC-compliant.
    /// Setting to false will enable a looser validations that only disallows
    /// \r\n\0 characters, which can be used to bypass header matching rules.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Strict {
      get { if ((_hasBits0 & 64) != 0) { return strict_; } else { return StrictDefaultValue; } }
      set {
        _hasBits0 |= 64;
        strict_ = value;
      }
    }
    /// <summary>Gets whether the "strict" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasStrict {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "strict" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStrict() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "ignore_empty" field.</summary>
    public const int IgnoreEmptyFieldNumber = 26;
    private readonly static bool IgnoreEmptyDefaultValue = false;

    private bool ignoreEmpty_;
    /// <summary>
    /// IgnoreEmpty specifies that the validation rules of this field should be
    /// evaluated only if the field is not empty
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IgnoreEmpty {
      get { if ((_hasBits0 & 128) != 0) { return ignoreEmpty_; } else { return IgnoreEmptyDefaultValue; } }
      set {
        _hasBits0 |= 128;
        ignoreEmpty_ = value;
      }
    }
    /// <summary>Gets whether the "ignore_empty" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIgnoreEmpty {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "ignore_empty" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIgnoreEmpty() {
      _hasBits0 &= ~128;
    }

    private object wellKnown_;
    /// <summary>Enum of possible cases for the "well_known" oneof.</summary>
    public enum WellKnownOneofCase {
      None = 0,
      Email = 12,
      Hostname = 13,
      Ip = 14,
      Ipv4 = 15,
      Ipv6 = 16,
      Uri = 17,
      UriRef = 18,
      Address = 21,
      Uuid = 22,
      WellKnownRegex = 24,
    }
    private WellKnownOneofCase wellKnownCase_ = WellKnownOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public WellKnownOneofCase WellKnownCase {
      get { return wellKnownCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearWellKnown() {
      wellKnownCase_ = WellKnownOneofCase.None;
      wellKnown_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as StringRules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(StringRules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Const != other.Const) return false;
      if (Len != other.Len) return false;
      if (MinLen != other.MinLen) return false;
      if (MaxLen != other.MaxLen) return false;
      if (LenBytes != other.LenBytes) return false;
      if (MinBytes != other.MinBytes) return false;
      if (MaxBytes != other.MaxBytes) return false;
      if (Pattern != other.Pattern) return false;
      if (Prefix != other.Prefix) return false;
      if (Suffix != other.Suffix) return false;
      if (Contains != other.Contains) return false;
      if (NotContains != other.NotContains) return false;
      if(!in_.Equals(other.in_)) return false;
      if(!notIn_.Equals(other.notIn_)) return false;
      if (Email != other.Email) return false;
      if (Hostname != other.Hostname) return false;
      if (Ip != other.Ip) return false;
      if (Ipv4 != other.Ipv4) return false;
      if (Ipv6 != other.Ipv6) return false;
      if (Uri != other.Uri) return false;
      if (UriRef != other.UriRef) return false;
      if (Address != other.Address) return false;
      if (Uuid != other.Uuid) return false;
      if (WellKnownRegex != other.WellKnownRegex) return false;
      if (Strict != other.Strict) return false;
      if (IgnoreEmpty != other.IgnoreEmpty) return false;
      if (WellKnownCase != other.WellKnownCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasConst) hash ^= Const.GetHashCode();
      if (HasLen) hash ^= Len.GetHashCode();
      if (HasMinLen) hash ^= MinLen.GetHashCode();
      if (HasMaxLen) hash ^= MaxLen.GetHashCode();
      if (HasLenBytes) hash ^= LenBytes.GetHashCode();
      if (HasMinBytes) hash ^= MinBytes.GetHashCode();
      if (HasMaxBytes) hash ^= MaxBytes.GetHashCode();
      if (HasPattern) hash ^= Pattern.GetHashCode();
      if (HasPrefix) hash ^= Prefix.GetHashCode();
      if (HasSuffix) hash ^= Suffix.GetHashCode();
      if (HasContains) hash ^= Contains.GetHashCode();
      if (HasNotContains) hash ^= NotContains.GetHashCode();
      hash ^= in_.GetHashCode();
      hash ^= notIn_.GetHashCode();
      if (HasEmail) hash ^= Email.GetHashCode();
      if (HasHostname) hash ^= Hostname.GetHashCode();
      if (HasIp) hash ^= Ip.GetHashCode();
      if (HasIpv4) hash ^= Ipv4.GetHashCode();
      if (HasIpv6) hash ^= Ipv6.GetHashCode();
      if (HasUri) hash ^= Uri.GetHashCode();
      if (HasUriRef) hash ^= UriRef.GetHashCode();
      if (HasAddress) hash ^= Address.GetHashCode();
      if (HasUuid) hash ^= Uuid.GetHashCode();
      if (HasWellKnownRegex) hash ^= WellKnownRegex.GetHashCode();
      if (HasStrict) hash ^= Strict.GetHashCode();
      if (HasIgnoreEmpty) hash ^= IgnoreEmpty.GetHashCode();
      hash ^= (int) wellKnownCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasConst) {
        output.WriteRawTag(10);
        output.WriteString(Const);
      }
      if (HasMinLen) {
        output.WriteRawTag(16);
        output.WriteUInt64(MinLen);
      }
      if (HasMaxLen) {
        output.WriteRawTag(24);
        output.WriteUInt64(MaxLen);
      }
      if (HasMinBytes) {
        output.WriteRawTag(32);
        output.WriteUInt64(MinBytes);
      }
      if (HasMaxBytes) {
        output.WriteRawTag(40);
        output.WriteUInt64(MaxBytes);
      }
      if (HasPattern) {
        output.WriteRawTag(50);
        output.WriteString(Pattern);
      }
      if (HasPrefix) {
        output.WriteRawTag(58);
        output.WriteString(Prefix);
      }
      if (HasSuffix) {
        output.WriteRawTag(66);
        output.WriteString(Suffix);
      }
      if (HasContains) {
        output.WriteRawTag(74);
        output.WriteString(Contains);
      }
      in_.WriteTo(output, _repeated_in_codec);
      notIn_.WriteTo(output, _repeated_notIn_codec);
      if (HasEmail) {
        output.WriteRawTag(96);
        output.WriteBool(Email);
      }
      if (HasHostname) {
        output.WriteRawTag(104);
        output.WriteBool(Hostname);
      }
      if (HasIp) {
        output.WriteRawTag(112);
        output.WriteBool(Ip);
      }
      if (HasIpv4) {
        output.WriteRawTag(120);
        output.WriteBool(Ipv4);
      }
      if (HasIpv6) {
        output.WriteRawTag(128, 1);
        output.WriteBool(Ipv6);
      }
      if (HasUri) {
        output.WriteRawTag(136, 1);
        output.WriteBool(Uri);
      }
      if (HasUriRef) {
        output.WriteRawTag(144, 1);
        output.WriteBool(UriRef);
      }
      if (HasLen) {
        output.WriteRawTag(152, 1);
        output.WriteUInt64(Len);
      }
      if (HasLenBytes) {
        output.WriteRawTag(160, 1);
        output.WriteUInt64(LenBytes);
      }
      if (HasAddress) {
        output.WriteRawTag(168, 1);
        output.WriteBool(Address);
      }
      if (HasUuid) {
        output.WriteRawTag(176, 1);
        output.WriteBool(Uuid);
      }
      if (HasNotContains) {
        output.WriteRawTag(186, 1);
        output.WriteString(NotContains);
      }
      if (HasWellKnownRegex) {
        output.WriteRawTag(192, 1);
        output.WriteEnum((int) WellKnownRegex);
      }
      if (HasStrict) {
        output.WriteRawTag(200, 1);
        output.WriteBool(Strict);
      }
      if (HasIgnoreEmpty) {
        output.WriteRawTag(208, 1);
        output.WriteBool(IgnoreEmpty);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasConst) {
        output.WriteRawTag(10);
        output.WriteString(Const);
      }
      if (HasMinLen) {
        output.WriteRawTag(16);
        output.WriteUInt64(MinLen);
      }
      if (HasMaxLen) {
        output.WriteRawTag(24);
        output.WriteUInt64(MaxLen);
      }
      if (HasMinBytes) {
        output.WriteRawTag(32);
        output.WriteUInt64(MinBytes);
      }
      if (HasMaxBytes) {
        output.WriteRawTag(40);
        output.WriteUInt64(MaxBytes);
      }
      if (HasPattern) {
        output.WriteRawTag(50);
        output.WriteString(Pattern);
      }
      if (HasPrefix) {
        output.WriteRawTag(58);
        output.WriteString(Prefix);
      }
      if (HasSuffix) {
        output.WriteRawTag(66);
        output.WriteString(Suffix);
      }
      if (HasContains) {
        output.WriteRawTag(74);
        output.WriteString(Contains);
      }
      in_.WriteTo(ref output, _repeated_in_codec);
      notIn_.WriteTo(ref output, _repeated_notIn_codec);
      if (HasEmail) {
        output.WriteRawTag(96);
        output.WriteBool(Email);
      }
      if (HasHostname) {
        output.WriteRawTag(104);
        output.WriteBool(Hostname);
      }
      if (HasIp) {
        output.WriteRawTag(112);
        output.WriteBool(Ip);
      }
      if (HasIpv4) {
        output.WriteRawTag(120);
        output.WriteBool(Ipv4);
      }
      if (HasIpv6) {
        output.WriteRawTag(128, 1);
        output.WriteBool(Ipv6);
      }
      if (HasUri) {
        output.WriteRawTag(136, 1);
        output.WriteBool(Uri);
      }
      if (HasUriRef) {
        output.WriteRawTag(144, 1);
        output.WriteBool(UriRef);
      }
      if (HasLen) {
        output.WriteRawTag(152, 1);
        output.WriteUInt64(Len);
      }
      if (HasLenBytes) {
        output.WriteRawTag(160, 1);
        output.WriteUInt64(LenBytes);
      }
      if (HasAddress) {
        output.WriteRawTag(168, 1);
        output.WriteBool(Address);
      }
      if (HasUuid) {
        output.WriteRawTag(176, 1);
        output.WriteBool(Uuid);
      }
      if (HasNotContains) {
        output.WriteRawTag(186, 1);
        output.WriteString(NotContains);
      }
      if (HasWellKnownRegex) {
        output.WriteRawTag(192, 1);
        output.WriteEnum((int) WellKnownRegex);
      }
      if (HasStrict) {
        output.WriteRawTag(200, 1);
        output.WriteBool(Strict);
      }
      if (HasIgnoreEmpty) {
        output.WriteRawTag(208, 1);
        output.WriteBool(IgnoreEmpty);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasConst) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Const);
      }
      if (HasLen) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(Len);
      }
      if (HasMinLen) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MinLen);
      }
      if (HasMaxLen) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MaxLen);
      }
      if (HasLenBytes) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(LenBytes);
      }
      if (HasMinBytes) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MinBytes);
      }
      if (HasMaxBytes) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MaxBytes);
      }
      if (HasPattern) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Pattern);
      }
      if (HasPrefix) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Prefix);
      }
      if (HasSuffix) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Suffix);
      }
      if (HasContains) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Contains);
      }
      if (HasNotContains) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(NotContains);
      }
      size += in_.CalculateSize(_repeated_in_codec);
      size += notIn_.CalculateSize(_repeated_notIn_codec);
      if (HasEmail) {
        size += 1 + 1;
      }
      if (HasHostname) {
        size += 1 + 1;
      }
      if (HasIp) {
        size += 1 + 1;
      }
      if (HasIpv4) {
        size += 1 + 1;
      }
      if (HasIpv6) {
        size += 2 + 1;
      }
      if (HasUri) {
        size += 2 + 1;
      }
      if (HasUriRef) {
        size += 2 + 1;
      }
      if (HasAddress) {
        size += 2 + 1;
      }
      if (HasUuid) {
        size += 2 + 1;
      }
      if (HasWellKnownRegex) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) WellKnownRegex);
      }
      if (HasStrict) {
        size += 2 + 1;
      }
      if (HasIgnoreEmpty) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(StringRules other) {
      if (other == null) {
        return;
      }
      if (other.HasConst) {
        Const = other.Const;
      }
      if (other.HasLen) {
        Len = other.Len;
      }
      if (other.HasMinLen) {
        MinLen = other.MinLen;
      }
      if (other.HasMaxLen) {
        MaxLen = other.MaxLen;
      }
      if (other.HasLenBytes) {
        LenBytes = other.LenBytes;
      }
      if (other.HasMinBytes) {
        MinBytes = other.MinBytes;
      }
      if (other.HasMaxBytes) {
        MaxBytes = other.MaxBytes;
      }
      if (other.HasPattern) {
        Pattern = other.Pattern;
      }
      if (other.HasPrefix) {
        Prefix = other.Prefix;
      }
      if (other.HasSuffix) {
        Suffix = other.Suffix;
      }
      if (other.HasContains) {
        Contains = other.Contains;
      }
      if (other.HasNotContains) {
        NotContains = other.NotContains;
      }
      in_.Add(other.in_);
      notIn_.Add(other.notIn_);
      if (other.HasStrict) {
        Strict = other.Strict;
      }
      if (other.HasIgnoreEmpty) {
        IgnoreEmpty = other.IgnoreEmpty;
      }
      switch (other.WellKnownCase) {
        case WellKnownOneofCase.Email:
          Email = other.Email;
          break;
        case WellKnownOneofCase.Hostname:
          Hostname = other.Hostname;
          break;
        case WellKnownOneofCase.Ip:
          Ip = other.Ip;
          break;
        case WellKnownOneofCase.Ipv4:
          Ipv4 = other.Ipv4;
          break;
        case WellKnownOneofCase.Ipv6:
          Ipv6 = other.Ipv6;
          break;
        case WellKnownOneofCase.Uri:
          Uri = other.Uri;
          break;
        case WellKnownOneofCase.UriRef:
          UriRef = other.UriRef;
          break;
        case WellKnownOneofCase.Address:
          Address = other.Address;
          break;
        case WellKnownOneofCase.Uuid:
          Uuid = other.Uuid;
          break;
        case WellKnownOneofCase.WellKnownRegex:
          WellKnownRegex = other.WellKnownRegex;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Const = input.ReadString();
            break;
          }
          case 16: {
            MinLen = input.ReadUInt64();
            break;
          }
          case 24: {
            MaxLen = input.ReadUInt64();
            break;
          }
          case 32: {
            MinBytes = input.ReadUInt64();
            break;
          }
          case 40: {
            MaxBytes = input.ReadUInt64();
            break;
          }
          case 50: {
            Pattern = input.ReadString();
            break;
          }
          case 58: {
            Prefix = input.ReadString();
            break;
          }
          case 66: {
            Suffix = input.ReadString();
            break;
          }
          case 74: {
            Contains = input.ReadString();
            break;
          }
          case 82: {
            in_.AddEntriesFrom(input, _repeated_in_codec);
            break;
          }
          case 90: {
            notIn_.AddEntriesFrom(input, _repeated_notIn_codec);
            break;
          }
          case 96: {
            Email = input.ReadBool();
            break;
          }
          case 104: {
            Hostname = input.ReadBool();
            break;
          }
          case 112: {
            Ip = input.ReadBool();
            break;
          }
          case 120: {
            Ipv4 = input.ReadBool();
            break;
          }
          case 128: {
            Ipv6 = input.ReadBool();
            break;
          }
          case 136: {
            Uri = input.ReadBool();
            break;
          }
          case 144: {
            UriRef = input.ReadBool();
            break;
          }
          case 152: {
            Len = input.ReadUInt64();
            break;
          }
          case 160: {
            LenBytes = input.ReadUInt64();
            break;
          }
          case 168: {
            Address = input.ReadBool();
            break;
          }
          case 176: {
            Uuid = input.ReadBool();
            break;
          }
          case 186: {
            NotContains = input.ReadString();
            break;
          }
          case 192: {
            wellKnown_ = input.ReadEnum();
            wellKnownCase_ = WellKnownOneofCase.WellKnownRegex;
            break;
          }
          case 200: {
            Strict = input.ReadBool();
            break;
          }
          case 208: {
            IgnoreEmpty = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Const = input.ReadString();
            break;
          }
          case 16: {
            MinLen = input.ReadUInt64();
            break;
          }
          case 24: {
            MaxLen = input.ReadUInt64();
            break;
          }
          case 32: {
            MinBytes = input.ReadUInt64();
            break;
          }
          case 40: {
            MaxBytes = input.ReadUInt64();
            break;
          }
          case 50: {
            Pattern = input.ReadString();
            break;
          }
          case 58: {
            Prefix = input.ReadString();
            break;
          }
          case 66: {
            Suffix = input.ReadString();
            break;
          }
          case 74: {
            Contains = input.ReadString();
            break;
          }
          case 82: {
            in_.AddEntriesFrom(ref input, _repeated_in_codec);
            break;
          }
          case 90: {
            notIn_.AddEntriesFrom(ref input, _repeated_notIn_codec);
            break;
          }
          case 96: {
            Email = input.ReadBool();
            break;
          }
          case 104: {
            Hostname = input.ReadBool();
            break;
          }
          case 112: {
            Ip = input.ReadBool();
            break;
          }
          case 120: {
            Ipv4 = input.ReadBool();
            break;
          }
          case 128: {
            Ipv6 = input.ReadBool();
            break;
          }
          case 136: {
            Uri = input.ReadBool();
            break;
          }
          case 144: {
            UriRef = input.ReadBool();
            break;
          }
          case 152: {
            Len = input.ReadUInt64();
            break;
          }
          case 160: {
            LenBytes = input.ReadUInt64();
            break;
          }
          case 168: {
            Address = input.ReadBool();
            break;
          }
          case 176: {
            Uuid = input.ReadBool();
            break;
          }
          case 186: {
            NotContains = input.ReadString();
            break;
          }
          case 192: {
            wellKnown_ = input.ReadEnum();
            wellKnownCase_ = WellKnownOneofCase.WellKnownRegex;
            break;
          }
          case 200: {
            Strict = input.ReadBool();
            break;
          }
          case 208: {
            IgnoreEmpty = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// BytesRules describe the constraints applied to `bytes` values
  /// </summary>
  public sealed partial class BytesRules : pb::IMessage<BytesRules>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BytesRules> _parser = new pb::MessageParser<BytesRules>(() => new BytesRules());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<BytesRules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Validate.ValidateReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BytesRules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BytesRules(BytesRules other) : this() {
      _hasBits0 = other._hasBits0;
      const_ = other.const_;
      len_ = other.len_;
      minLen_ = other.minLen_;
      maxLen_ = other.maxLen_;
      pattern_ = other.pattern_;
      prefix_ = other.prefix_;
      suffix_ = other.suffix_;
      contains_ = other.contains_;
      in_ = other.in_.Clone();
      notIn_ = other.notIn_.Clone();
      ignoreEmpty_ = other.ignoreEmpty_;
      switch (other.WellKnownCase) {
        case WellKnownOneofCase.Ip:
          Ip = other.Ip;
          break;
        case WellKnownOneofCase.Ipv4:
          Ipv4 = other.Ipv4;
          break;
        case WellKnownOneofCase.Ipv6:
          Ipv6 = other.Ipv6;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BytesRules Clone() {
      return new BytesRules(this);
    }

    /// <summary>Field number for the "const" field.</summary>
    public const int ConstFieldNumber = 1;
    private readonly static pb::ByteString ConstDefaultValue = pb::ByteString.Empty;

    private pb::ByteString const_;
    /// <summary>
    /// Const specifies that this field must be exactly the specified value
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString Const {
      get { return const_ ?? ConstDefaultValue; }
      set {
        const_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "const" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasConst {
      get { return const_ != null; }
    }
    /// <summary>Clears the value of the "const" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearConst() {
      const_ = null;
    }

    /// <summary>Field number for the "len" field.</summary>
    public const int LenFieldNumber = 13;
    private readonly static ulong LenDefaultValue = 0UL;

    private ulong len_;
    /// <summary>
    /// Len specifies that this field must be the specified number of bytes
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong Len {
      get { if ((_hasBits0 & 4) != 0) { return len_; } else { return LenDefaultValue; } }
      set {
        _hasBits0 |= 4;
        len_ = value;
      }
    }
    /// <summary>Gets whether the "len" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLen {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "len" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLen() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "min_len" field.</summary>
    public const int MinLenFieldNumber = 2;
    private readonly static ulong MinLenDefaultValue = 0UL;

    private ulong minLen_;
    /// <summary>
    /// MinLen specifies that this field must be the specified number of bytes
    /// at a minimum
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong MinLen {
      get { if ((_hasBits0 & 1) != 0) { return minLen_; } else { return MinLenDefaultValue; } }
      set {
        _hasBits0 |= 1;
        minLen_ = value;
      }
    }
    /// <summary>Gets whether the "min_len" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMinLen {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "min_len" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMinLen() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "max_len" field.</summary>
    public const int MaxLenFieldNumber = 3;
    private readonly static ulong MaxLenDefaultValue = 0UL;

    private ulong maxLen_;
    /// <summary>
    /// MaxLen specifies that this field must be the specified number of bytes
    /// at a maximum
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong MaxLen {
      get { if ((_hasBits0 & 2) != 0) { return maxLen_; } else { return MaxLenDefaultValue; } }
      set {
        _hasBits0 |= 2;
        maxLen_ = value;
      }
    }
    /// <summary>Gets whether the "max_len" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaxLen {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "max_len" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaxLen() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "pattern" field.</summary>
    public const int PatternFieldNumber = 4;
    private readonly static string PatternDefaultValue = "";

    private string pattern_;
    /// <summary>
    /// Pattern specifes that this field must match against the specified
    /// regular expression (RE2 syntax). The included expression should elide
    /// any delimiters.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Pattern {
      get { return pattern_ ?? PatternDefaultValue; }
      set {
        pattern_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "pattern" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPattern {
      get { return pattern_ != null; }
    }
    /// <summary>Clears the value of the "pattern" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPattern() {
      pattern_ = null;
    }

    /// <summary>Field number for the "prefix" field.</summary>
    public const int PrefixFieldNumber = 5;
    private readonly static pb::ByteString PrefixDefaultValue = pb::ByteString.Empty;

    private pb::ByteString prefix_;
    /// <summary>
    /// Prefix specifies that this field must have the specified bytes at the
    /// beginning of the string.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString Prefix {
      get { return prefix_ ?? PrefixDefaultValue; }
      set {
        prefix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "prefix" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPrefix {
      get { return prefix_ != null; }
    }
    /// <summary>Clears the value of the "prefix" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPrefix() {
      prefix_ = null;
    }

    /// <summary>Field number for the "suffix" field.</summary>
    public const int SuffixFieldNumber = 6;
    private readonly static pb::ByteString SuffixDefaultValue = pb::ByteString.Empty;

    private pb::ByteString suffix_;
    /// <summary>
    /// Suffix specifies that this field must have the specified bytes at the
    /// end of the string.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString Suffix {
      get { return suffix_ ?? SuffixDefaultValue; }
      set {
        suffix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "suffix" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSuffix {
      get { return suffix_ != null; }
    }
    /// <summary>Clears the value of the "suffix" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSuffix() {
      suffix_ = null;
    }

    /// <summary>Field number for the "contains" field.</summary>
    public const int ContainsFieldNumber = 7;
    private readonly static pb::ByteString ContainsDefaultValue = pb::ByteString.Empty;

    private pb::ByteString contains_;
    /// <summary>
    /// Contains specifies that this field must have the specified bytes
    /// anywhere in the string.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString Contains {
      get { return contains_ ?? ContainsDefaultValue; }
      set {
        contains_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "contains" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasContains {
      get { return contains_ != null; }
    }
    /// <summary>Clears the value of the "contains" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearContains() {
      contains_ = null;
    }

    /// <summary>Field number for the "in" field.</summary>
    public const int InFieldNumber = 8;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_in_codec
        = pb::FieldCodec.ForBytes(66);
    private readonly pbc::RepeatedField<pb::ByteString> in_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    /// In specifies that this field must be equal to one of the specified
    /// values
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<pb::ByteString> In {
      get { return in_; }
    }

    /// <summary>Field number for the "not_in" field.</summary>
    public const int NotInFieldNumber = 9;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_notIn_codec
        = pb::FieldCodec.ForBytes(74);
    private readonly pbc::RepeatedField<pb::ByteString> notIn_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    /// NotIn specifies that this field cannot be equal to one of the specified
    /// values
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<pb::ByteString> NotIn {
      get { return notIn_; }
    }

    /// <summary>Field number for the "ip" field.</summary>
    public const int IpFieldNumber = 10;
    /// <summary>
    /// Ip specifies that the field must be a valid IP (v4 or v6) address in
    /// byte format
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Ip {
      get { return HasIp ? (bool) wellKnown_ : false; }
      set {
        wellKnown_ = value;
        wellKnownCase_ = WellKnownOneofCase.Ip;
      }
    }
    /// <summary>Gets whether the "ip" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIp {
      get { return wellKnownCase_ == WellKnownOneofCase.Ip; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "ip" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIp() {
      if (HasIp) {
        ClearWellKnown();
      }
    }

    /// <summary>Field number for the "ipv4" field.</summary>
    public const int Ipv4FieldNumber = 11;
    /// <summary>
    /// Ipv4 specifies that the field must be a valid IPv4 address in byte
    /// format
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Ipv4 {
      get { return HasIpv4 ? (bool) wellKnown_ : false; }
      set {
        wellKnown_ = value;
        wellKnownCase_ = WellKnownOneofCase.Ipv4;
      }
    }
    /// <summary>Gets whether the "ipv4" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIpv4 {
      get { return wellKnownCase_ == WellKnownOneofCase.Ipv4; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "ipv4" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIpv4() {
      if (HasIpv4) {
        ClearWellKnown();
      }
    }

    /// <summary>Field number for the "ipv6" field.</summary>
    public const int Ipv6FieldNumber = 12;
    /// <summary>
    /// Ipv6 specifies that the field must be a valid IPv6 address in byte
    /// format
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Ipv6 {
      get { return HasIpv6 ? (bool) wellKnown_ : false; }
      set {
        wellKnown_ = value;
        wellKnownCase_ = WellKnownOneofCase.Ipv6;
      }
    }
    /// <summary>Gets whether the "ipv6" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIpv6 {
      get { return wellKnownCase_ == WellKnownOneofCase.Ipv6; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "ipv6" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIpv6() {
      if (HasIpv6) {
        ClearWellKnown();
      }
    }

    /// <summary>Field number for the "ignore_empty" field.</summary>
    public const int IgnoreEmptyFieldNumber = 14;
    private readonly static bool IgnoreEmptyDefaultValue = false;

    private bool ignoreEmpty_;
    /// <summary>
    /// IgnoreEmpty specifies that the validation rules of this field should be
    /// evaluated only if the field is not empty
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IgnoreEmpty {
      get { if ((_hasBits0 & 8) != 0) { return ignoreEmpty_; } else { return IgnoreEmptyDefaultValue; } }
      set {
        _hasBits0 |= 8;
        ignoreEmpty_ = value;
      }
    }
    /// <summary>Gets whether the "ignore_empty" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIgnoreEmpty {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "ignore_empty" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIgnoreEmpty() {
      _hasBits0 &= ~8;
    }

    private object wellKnown_;
    /// <summary>Enum of possible cases for the "well_known" oneof.</summary>
    public enum WellKnownOneofCase {
      None = 0,
      Ip = 10,
      Ipv4 = 11,
      Ipv6 = 12,
    }
    private WellKnownOneofCase wellKnownCase_ = WellKnownOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public WellKnownOneofCase WellKnownCase {
      get { return wellKnownCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearWellKnown() {
      wellKnownCase_ = WellKnownOneofCase.None;
      wellKnown_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as BytesRules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(BytesRules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Const != other.Const) return false;
      if (Len != other.Len) return false;
      if (MinLen != other.MinLen) return false;
      if (MaxLen != other.MaxLen) return false;
      if (Pattern != other.Pattern) return false;
      if (Prefix != other.Prefix) return false;
      if (Suffix != other.Suffix) return false;
      if (Contains != other.Contains) return false;
      if(!in_.Equals(other.in_)) return false;
      if(!notIn_.Equals(other.notIn_)) return false;
      if (Ip != other.Ip) return false;
      if (Ipv4 != other.Ipv4) return false;
      if (Ipv6 != other.Ipv6) return false;
      if (IgnoreEmpty != other.IgnoreEmpty) return false;
      if (WellKnownCase != other.WellKnownCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasConst) hash ^= Const.GetHashCode();
      if (HasLen) hash ^= Len.GetHashCode();
      if (HasMinLen) hash ^= MinLen.GetHashCode();
      if (HasMaxLen) hash ^= MaxLen.GetHashCode();
      if (HasPattern) hash ^= Pattern.GetHashCode();
      if (HasPrefix) hash ^= Prefix.GetHashCode();
      if (HasSuffix) hash ^= Suffix.GetHashCode();
      if (HasContains) hash ^= Contains.GetHashCode();
      hash ^= in_.GetHashCode();
      hash ^= notIn_.GetHashCode();
      if (HasIp) hash ^= Ip.GetHashCode();
      if (HasIpv4) hash ^= Ipv4.GetHashCode();
      if (HasIpv6) hash ^= Ipv6.GetHashCode();
      if (HasIgnoreEmpty) hash ^= IgnoreEmpty.GetHashCode();
      hash ^= (int) wellKnownCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasConst) {
        output.WriteRawTag(10);
        output.WriteBytes(Const);
      }
      if (HasMinLen) {
        output.WriteRawTag(16);
        output.WriteUInt64(MinLen);
      }
      if (HasMaxLen) {
        output.WriteRawTag(24);
        output.WriteUInt64(MaxLen);
      }
      if (HasPattern) {
        output.WriteRawTag(34);
        output.WriteString(Pattern);
      }
      if (HasPrefix) {
        output.WriteRawTag(42);
        output.WriteBytes(Prefix);
      }
      if (HasSuffix) {
        output.WriteRawTag(50);
        output.WriteBytes(Suffix);
      }
      if (HasContains) {
        output.WriteRawTag(58);
        output.WriteBytes(Contains);
      }
      in_.WriteTo(output, _repeated_in_codec);
      notIn_.WriteTo(output, _repeated_notIn_codec);
      if (HasIp) {
        output.WriteRawTag(80);
        output.WriteBool(Ip);
      }
      if (HasIpv4) {
        output.WriteRawTag(88);
        output.WriteBool(Ipv4);
      }
      if (HasIpv6) {
        output.WriteRawTag(96);
        output.WriteBool(Ipv6);
      }
      if (HasLen) {
        output.WriteRawTag(104);
        output.WriteUInt64(Len);
      }
      if (HasIgnoreEmpty) {
        output.WriteRawTag(112);
        output.WriteBool(IgnoreEmpty);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasConst) {
        output.WriteRawTag(10);
        output.WriteBytes(Const);
      }
      if (HasMinLen) {
        output.WriteRawTag(16);
        output.WriteUInt64(MinLen);
      }
      if (HasMaxLen) {
        output.WriteRawTag(24);
        output.WriteUInt64(MaxLen);
      }
      if (HasPattern) {
        output.WriteRawTag(34);
        output.WriteString(Pattern);
      }
      if (HasPrefix) {
        output.WriteRawTag(42);
        output.WriteBytes(Prefix);
      }
      if (HasSuffix) {
        output.WriteRawTag(50);
        output.WriteBytes(Suffix);
      }
      if (HasContains) {
        output.WriteRawTag(58);
        output.WriteBytes(Contains);
      }
      in_.WriteTo(ref output, _repeated_in_codec);
      notIn_.WriteTo(ref output, _repeated_notIn_codec);
      if (HasIp) {
        output.WriteRawTag(80);
        output.WriteBool(Ip);
      }
      if (HasIpv4) {
        output.WriteRawTag(88);
        output.WriteBool(Ipv4);
      }
      if (HasIpv6) {
        output.WriteRawTag(96);
        output.WriteBool(Ipv6);
      }
      if (HasLen) {
        output.WriteRawTag(104);
        output.WriteUInt64(Len);
      }
      if (HasIgnoreEmpty) {
        output.WriteRawTag(112);
        output.WriteBool(IgnoreEmpty);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasConst) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Const);
      }
      if (HasLen) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Len);
      }
      if (HasMinLen) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MinLen);
      }
      if (HasMaxLen) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MaxLen);
      }
      if (HasPattern) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Pattern);
      }
      if (HasPrefix) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Prefix);
      }
      if (HasSuffix) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Suffix);
      }
      if (HasContains) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Contains);
      }
      size += in_.CalculateSize(_repeated_in_codec);
      size += notIn_.CalculateSize(_repeated_notIn_codec);
      if (HasIp) {
        size += 1 + 1;
      }
      if (HasIpv4) {
        size += 1 + 1;
      }
      if (HasIpv6) {
        size += 1 + 1;
      }
      if (HasIgnoreEmpty) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(BytesRules other) {
      if (other == null) {
        return;
      }
      if (other.HasConst) {
        Const = other.Const;
      }
      if (other.HasLen) {
        Len = other.Len;
      }
      if (other.HasMinLen) {
        MinLen = other.MinLen;
      }
      if (other.HasMaxLen) {
        MaxLen = other.MaxLen;
      }
      if (other.HasPattern) {
        Pattern = other.Pattern;
      }
      if (other.HasPrefix) {
        Prefix = other.Prefix;
      }
      if (other.HasSuffix) {
        Suffix = other.Suffix;
      }
      if (other.HasContains) {
        Contains = other.Contains;
      }
      in_.Add(other.in_);
      notIn_.Add(other.notIn_);
      if (other.HasIgnoreEmpty) {
        IgnoreEmpty = other.IgnoreEmpty;
      }
      switch (other.WellKnownCase) {
        case WellKnownOneofCase.Ip:
          Ip = other.Ip;
          break;
        case WellKnownOneofCase.Ipv4:
          Ipv4 = other.Ipv4;
          break;
        case WellKnownOneofCase.Ipv6:
          Ipv6 = other.Ipv6;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Const = input.ReadBytes();
            break;
          }
          case 16: {
            MinLen = input.ReadUInt64();
            break;
          }
          case 24: {
            MaxLen = input.ReadUInt64();
            break;
          }
          case 34: {
            Pattern = input.ReadString();
            break;
          }
          case 42: {
            Prefix = input.ReadBytes();
            break;
          }
          case 50: {
            Suffix = input.ReadBytes();
            break;
          }
          case 58: {
            Contains = input.ReadBytes();
            break;
          }
          case 66: {
            in_.AddEntriesFrom(input, _repeated_in_codec);
            break;
          }
          case 74: {
            notIn_.AddEntriesFrom(input, _repeated_notIn_codec);
            break;
          }
          case 80: {
            Ip = input.ReadBool();
            break;
          }
          case 88: {
            Ipv4 = input.ReadBool();
            break;
          }
          case 96: {
            Ipv6 = input.ReadBool();
            break;
          }
          case 104: {
            Len = input.ReadUInt64();
            break;
          }
          case 112: {
            IgnoreEmpty = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Const = input.ReadBytes();
            break;
          }
          case 16: {
            MinLen = input.ReadUInt64();
            break;
          }
          case 24: {
            MaxLen = input.ReadUInt64();
            break;
          }
          case 34: {
            Pattern = input.ReadString();
            break;
          }
          case 42: {
            Prefix = input.ReadBytes();
            break;
          }
          case 50: {
            Suffix = input.ReadBytes();
            break;
          }
          case 58: {
            Contains = input.ReadBytes();
            break;
          }
          case 66: {
            in_.AddEntriesFrom(ref input, _repeated_in_codec);
            break;
          }
          case 74: {
            notIn_.AddEntriesFrom(ref input, _repeated_notIn_codec);
            break;
          }
          case 80: {
            Ip = input.ReadBool();
            break;
          }
          case 88: {
            Ipv4 = input.ReadBool();
            break;
          }
          case 96: {
            Ipv6 = input.ReadBool();
            break;
          }
          case 104: {
            Len = input.ReadUInt64();
            break;
          }
          case 112: {
            IgnoreEmpty = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// EnumRules describe the constraints applied to enum values
  /// </summary>
  public sealed partial class EnumRules : pb::IMessage<EnumRules>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EnumRules> _parser = new pb::MessageParser<EnumRules>(() => new EnumRules());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<EnumRules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Validate.ValidateReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EnumRules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EnumRules(EnumRules other) : this() {
      _hasBits0 = other._hasBits0;
      const_ = other.const_;
      definedOnly_ = other.definedOnly_;
      in_ = other.in_.Clone();
      notIn_ = other.notIn_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EnumRules Clone() {
      return new EnumRules(this);
    }

    /// <summary>Field number for the "const" field.</summary>
    public const int ConstFieldNumber = 1;
    private readonly static int ConstDefaultValue = 0;

    private int const_;
    /// <summary>
    /// Const specifies that this field must be exactly the specified value
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Const {
      get { if ((_hasBits0 & 1) != 0) { return const_; } else { return ConstDefaultValue; } }
      set {
        _hasBits0 |= 1;
        const_ = value;
      }
    }
    /// <summary>Gets whether the "const" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasConst {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "const" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearConst() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "defined_only" field.</summary>
    public const int DefinedOnlyFieldNumber = 2;
    private readonly static bool DefinedOnlyDefaultValue = false;

    private bool definedOnly_;
    /// <summary>
    /// DefinedOnly specifies that this field must be only one of the defined
    /// values for this enum, failing on any undefined value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool DefinedOnly {
      get { if ((_hasBits0 & 2) != 0) { return definedOnly_; } else { return DefinedOnlyDefaultValue; } }
      set {
        _hasBits0 |= 2;
        definedOnly_ = value;
      }
    }
    /// <summary>Gets whether the "defined_only" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDefinedOnly {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "defined_only" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDefinedOnly() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "in" field.</summary>
    public const int InFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_in_codec
        = pb::FieldCodec.ForInt32(24);
    private readonly pbc::RepeatedField<int> in_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// In specifies that this field must be equal to one of the specified
    /// values
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> In {
      get { return in_; }
    }

    /// <summary>Field number for the "not_in" field.</summary>
    public const int NotInFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_notIn_codec
        = pb::FieldCodec.ForInt32(32);
    private readonly pbc::RepeatedField<int> notIn_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// NotIn specifies that this field cannot be equal to one of the specified
    /// values
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> NotIn {
      get { return notIn_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as EnumRules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(EnumRules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Const != other.Const) return false;
      if (DefinedOnly != other.DefinedOnly) return false;
      if(!in_.Equals(other.in_)) return false;
      if(!notIn_.Equals(other.notIn_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasConst) hash ^= Const.GetHashCode();
      if (HasDefinedOnly) hash ^= DefinedOnly.GetHashCode();
      hash ^= in_.GetHashCode();
      hash ^= notIn_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasConst) {
        output.WriteRawTag(8);
        output.WriteInt32(Const);
      }
      if (HasDefinedOnly) {
        output.WriteRawTag(16);
        output.WriteBool(DefinedOnly);
      }
      in_.WriteTo(output, _repeated_in_codec);
      notIn_.WriteTo(output, _repeated_notIn_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasConst) {
        output.WriteRawTag(8);
        output.WriteInt32(Const);
      }
      if (HasDefinedOnly) {
        output.WriteRawTag(16);
        output.WriteBool(DefinedOnly);
      }
      in_.WriteTo(ref output, _repeated_in_codec);
      notIn_.WriteTo(ref output, _repeated_notIn_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasConst) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Const);
      }
      if (HasDefinedOnly) {
        size += 1 + 1;
      }
      size += in_.CalculateSize(_repeated_in_codec);
      size += notIn_.CalculateSize(_repeated_notIn_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(EnumRules other) {
      if (other == null) {
        return;
      }
      if (other.HasConst) {
        Const = other.Const;
      }
      if (other.HasDefinedOnly) {
        DefinedOnly = other.DefinedOnly;
      }
      in_.Add(other.in_);
      notIn_.Add(other.notIn_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Const = input.ReadInt32();
            break;
          }
          case 16: {
            DefinedOnly = input.ReadBool();
            break;
          }
          case 26:
          case 24: {
            in_.AddEntriesFrom(input, _repeated_in_codec);
            break;
          }
          case 34:
          case 32: {
            notIn_.AddEntriesFrom(input, _repeated_notIn_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Const = input.ReadInt32();
            break;
          }
          case 16: {
            DefinedOnly = input.ReadBool();
            break;
          }
          case 26:
          case 24: {
            in_.AddEntriesFrom(ref input, _repeated_in_codec);
            break;
          }
          case 34:
          case 32: {
            notIn_.AddEntriesFrom(ref input, _repeated_notIn_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// MessageRules describe the constraints applied to embedded message values.
  /// For message-type fields, validation is performed recursively.
  /// </summary>
  public sealed partial class MessageRules : pb::IMessage<MessageRules>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MessageRules> _parser = new pb::MessageParser<MessageRules>(() => new MessageRules());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<MessageRules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Validate.ValidateReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MessageRules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MessageRules(MessageRules other) : this() {
      _hasBits0 = other._hasBits0;
      skip_ = other.skip_;
      required_ = other.required_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MessageRules Clone() {
      return new MessageRules(this);
    }

    /// <summary>Field number for the "skip" field.</summary>
    public const int SkipFieldNumber = 1;
    private readonly static bool SkipDefaultValue = false;

    private bool skip_;
    /// <summary>
    /// Skip specifies that the validation rules of this field should not be
    /// evaluated
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Skip {
      get { if ((_hasBits0 & 1) != 0) { return skip_; } else { return SkipDefaultValue; } }
      set {
        _hasBits0 |= 1;
        skip_ = value;
      }
    }
    /// <summary>Gets whether the "skip" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSkip {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "skip" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSkip() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "required" field.</summary>
    public const int RequiredFieldNumber = 2;
    private readonly static bool RequiredDefaultValue = false;

    private bool required_;
    /// <summary>
    /// Required specifies that this field must be set
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Required {
      get { if ((_hasBits0 & 2) != 0) { return required_; } else { return RequiredDefaultValue; } }
      set {
        _hasBits0 |= 2;
        required_ = value;
      }
    }
    /// <summary>Gets whether the "required" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRequired {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "required" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRequired() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as MessageRules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(MessageRules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Skip != other.Skip) return false;
      if (Required != other.Required) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSkip) hash ^= Skip.GetHashCode();
      if (HasRequired) hash ^= Required.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasSkip) {
        output.WriteRawTag(8);
        output.WriteBool(Skip);
      }
      if (HasRequired) {
        output.WriteRawTag(16);
        output.WriteBool(Required);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasSkip) {
        output.WriteRawTag(8);
        output.WriteBool(Skip);
      }
      if (HasRequired) {
        output.WriteRawTag(16);
        output.WriteBool(Required);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasSkip) {
        size += 1 + 1;
      }
      if (HasRequired) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(MessageRules other) {
      if (other == null) {
        return;
      }
      if (other.HasSkip) {
        Skip = other.Skip;
      }
      if (other.HasRequired) {
        Required = other.Required;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Skip = input.ReadBool();
            break;
          }
          case 16: {
            Required = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Skip = input.ReadBool();
            break;
          }
          case 16: {
            Required = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// RepeatedRules describe the constraints applied to `repeated` values
  /// </summary>
  public sealed partial class RepeatedRules : pb::IMessage<RepeatedRules>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RepeatedRules> _parser = new pb::MessageParser<RepeatedRules>(() => new RepeatedRules());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<RepeatedRules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Validate.ValidateReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RepeatedRules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RepeatedRules(RepeatedRules other) : this() {
      _hasBits0 = other._hasBits0;
      minItems_ = other.minItems_;
      maxItems_ = other.maxItems_;
      unique_ = other.unique_;
      items_ = other.items_ != null ? other.items_.Clone() : null;
      ignoreEmpty_ = other.ignoreEmpty_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RepeatedRules Clone() {
      return new RepeatedRules(this);
    }

    /// <summary>Field number for the "min_items" field.</summary>
    public const int MinItemsFieldNumber = 1;
    private readonly static ulong MinItemsDefaultValue = 0UL;

    private ulong minItems_;
    /// <summary>
    /// MinItems specifies that this field must have the specified number of
    /// items at a minimum
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong MinItems {
      get { if ((_hasBits0 & 1) != 0) { return minItems_; } else { return MinItemsDefaultValue; } }
      set {
        _hasBits0 |= 1;
        minItems_ = value;
      }
    }
    /// <summary>Gets whether the "min_items" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMinItems {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "min_items" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMinItems() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "max_items" field.</summary>
    public const int MaxItemsFieldNumber = 2;
    private readonly static ulong MaxItemsDefaultValue = 0UL;

    private ulong maxItems_;
    /// <summary>
    /// MaxItems specifies that this field must have the specified number of
    /// items at a maximum
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong MaxItems {
      get { if ((_hasBits0 & 2) != 0) { return maxItems_; } else { return MaxItemsDefaultValue; } }
      set {
        _hasBits0 |= 2;
        maxItems_ = value;
      }
    }
    /// <summary>Gets whether the "max_items" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaxItems {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "max_items" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaxItems() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "unique" field.</summary>
    public const int UniqueFieldNumber = 3;
    private readonly static bool UniqueDefaultValue = false;

    private bool unique_;
    /// <summary>
    /// Unique specifies that all elements in this field must be unique. This
    /// contraint is only applicable to scalar and enum types (messages are not
    /// supported).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Unique {
      get { if ((_hasBits0 & 4) != 0) { return unique_; } else { return UniqueDefaultValue; } }
      set {
        _hasBits0 |= 4;
        unique_ = value;
      }
    }
    /// <summary>Gets whether the "unique" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUnique {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "unique" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUnique() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 4;
    private global::Validate.FieldRules items_;
    /// <summary>
    /// Items specifies the contraints to be applied to each item in the field.
    /// Repeated message fields will still execute validation against each item
    /// unless skip is specified here.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Validate.FieldRules Items {
      get { return items_; }
      set {
        items_ = value;
      }
    }

    /// <summary>Field number for the "ignore_empty" field.</summary>
    public const int IgnoreEmptyFieldNumber = 5;
    private readonly static bool IgnoreEmptyDefaultValue = false;

    private bool ignoreEmpty_;
    /// <summary>
    /// IgnoreEmpty specifies that the validation rules of this field should be
    /// evaluated only if the field is not empty
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IgnoreEmpty {
      get { if ((_hasBits0 & 8) != 0) { return ignoreEmpty_; } else { return IgnoreEmptyDefaultValue; } }
      set {
        _hasBits0 |= 8;
        ignoreEmpty_ = value;
      }
    }
    /// <summary>Gets whether the "ignore_empty" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIgnoreEmpty {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "ignore_empty" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIgnoreEmpty() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as RepeatedRules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(RepeatedRules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MinItems != other.MinItems) return false;
      if (MaxItems != other.MaxItems) return false;
      if (Unique != other.Unique) return false;
      if (!object.Equals(Items, other.Items)) return false;
      if (IgnoreEmpty != other.IgnoreEmpty) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMinItems) hash ^= MinItems.GetHashCode();
      if (HasMaxItems) hash ^= MaxItems.GetHashCode();
      if (HasUnique) hash ^= Unique.GetHashCode();
      if (items_ != null) hash ^= Items.GetHashCode();
      if (HasIgnoreEmpty) hash ^= IgnoreEmpty.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMinItems) {
        output.WriteRawTag(8);
        output.WriteUInt64(MinItems);
      }
      if (HasMaxItems) {
        output.WriteRawTag(16);
        output.WriteUInt64(MaxItems);
      }
      if (HasUnique) {
        output.WriteRawTag(24);
        output.WriteBool(Unique);
      }
      if (items_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Items);
      }
      if (HasIgnoreEmpty) {
        output.WriteRawTag(40);
        output.WriteBool(IgnoreEmpty);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMinItems) {
        output.WriteRawTag(8);
        output.WriteUInt64(MinItems);
      }
      if (HasMaxItems) {
        output.WriteRawTag(16);
        output.WriteUInt64(MaxItems);
      }
      if (HasUnique) {
        output.WriteRawTag(24);
        output.WriteBool(Unique);
      }
      if (items_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Items);
      }
      if (HasIgnoreEmpty) {
        output.WriteRawTag(40);
        output.WriteBool(IgnoreEmpty);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasMinItems) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MinItems);
      }
      if (HasMaxItems) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MaxItems);
      }
      if (HasUnique) {
        size += 1 + 1;
      }
      if (items_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Items);
      }
      if (HasIgnoreEmpty) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(RepeatedRules other) {
      if (other == null) {
        return;
      }
      if (other.HasMinItems) {
        MinItems = other.MinItems;
      }
      if (other.HasMaxItems) {
        MaxItems = other.MaxItems;
      }
      if (other.HasUnique) {
        Unique = other.Unique;
      }
      if (other.items_ != null) {
        if (items_ == null) {
          Items = new global::Validate.FieldRules();
        }
        Items.MergeFrom(other.Items);
      }
      if (other.HasIgnoreEmpty) {
        IgnoreEmpty = other.IgnoreEmpty;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MinItems = input.ReadUInt64();
            break;
          }
          case 16: {
            MaxItems = input.ReadUInt64();
            break;
          }
          case 24: {
            Unique = input.ReadBool();
            break;
          }
          case 34: {
            if (items_ == null) {
              Items = new global::Validate.FieldRules();
            }
            input.ReadMessage(Items);
            break;
          }
          case 40: {
            IgnoreEmpty = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MinItems = input.ReadUInt64();
            break;
          }
          case 16: {
            MaxItems = input.ReadUInt64();
            break;
          }
          case 24: {
            Unique = input.ReadBool();
            break;
          }
          case 34: {
            if (items_ == null) {
              Items = new global::Validate.FieldRules();
            }
            input.ReadMessage(Items);
            break;
          }
          case 40: {
            IgnoreEmpty = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// MapRules describe the constraints applied to `map` values
  /// </summary>
  public sealed partial class MapRules : pb::IMessage<MapRules>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MapRules> _parser = new pb::MessageParser<MapRules>(() => new MapRules());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<MapRules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Validate.ValidateReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MapRules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MapRules(MapRules other) : this() {
      _hasBits0 = other._hasBits0;
      minPairs_ = other.minPairs_;
      maxPairs_ = other.maxPairs_;
      noSparse_ = other.noSparse_;
      keys_ = other.keys_ != null ? other.keys_.Clone() : null;
      values_ = other.values_ != null ? other.values_.Clone() : null;
      ignoreEmpty_ = other.ignoreEmpty_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MapRules Clone() {
      return new MapRules(this);
    }

    /// <summary>Field number for the "min_pairs" field.</summary>
    public const int MinPairsFieldNumber = 1;
    private readonly static ulong MinPairsDefaultValue = 0UL;

    private ulong minPairs_;
    /// <summary>
    /// MinPairs specifies that this field must have the specified number of
    /// KVs at a minimum
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong MinPairs {
      get { if ((_hasBits0 & 1) != 0) { return minPairs_; } else { return MinPairsDefaultValue; } }
      set {
        _hasBits0 |= 1;
        minPairs_ = value;
      }
    }
    /// <summary>Gets whether the "min_pairs" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMinPairs {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "min_pairs" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMinPairs() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "max_pairs" field.</summary>
    public const int MaxPairsFieldNumber = 2;
    private readonly static ulong MaxPairsDefaultValue = 0UL;

    private ulong maxPairs_;
    /// <summary>
    /// MaxPairs specifies that this field must have the specified number of
    /// KVs at a maximum
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong MaxPairs {
      get { if ((_hasBits0 & 2) != 0) { return maxPairs_; } else { return MaxPairsDefaultValue; } }
      set {
        _hasBits0 |= 2;
        maxPairs_ = value;
      }
    }
    /// <summary>Gets whether the "max_pairs" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaxPairs {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "max_pairs" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaxPairs() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "no_sparse" field.</summary>
    public const int NoSparseFieldNumber = 3;
    private readonly static bool NoSparseDefaultValue = false;

    private bool noSparse_;
    /// <summary>
    /// NoSparse specifies values in this field cannot be unset. This only
    /// applies to map's with message value types.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool NoSparse {
      get { if ((_hasBits0 & 4) != 0) { return noSparse_; } else { return NoSparseDefaultValue; } }
      set {
        _hasBits0 |= 4;
        noSparse_ = value;
      }
    }
    /// <summary>Gets whether the "no_sparse" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasNoSparse {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "no_sparse" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearNoSparse() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "keys" field.</summary>
    public const int KeysFieldNumber = 4;
    private global::Validate.FieldRules keys_;
    /// <summary>
    /// Keys specifies the constraints to be applied to each key in the field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Validate.FieldRules Keys {
      get { return keys_; }
      set {
        keys_ = value;
      }
    }

    /// <summary>Field number for the "values" field.</summary>
    public const int ValuesFieldNumber = 5;
    private global::Validate.FieldRules values_;
    /// <summary>
    /// Values specifies the constraints to be applied to the value of each key
    /// in the field. Message values will still have their validations evaluated
    /// unless skip is specified here.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Validate.FieldRules Values {
      get { return values_; }
      set {
        values_ = value;
      }
    }

    /// <summary>Field number for the "ignore_empty" field.</summary>
    public const int IgnoreEmptyFieldNumber = 6;
    private readonly static bool IgnoreEmptyDefaultValue = false;

    private bool ignoreEmpty_;
    /// <summary>
    /// IgnoreEmpty specifies that the validation rules of this field should be
    /// evaluated only if the field is not empty
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IgnoreEmpty {
      get { if ((_hasBits0 & 8) != 0) { return ignoreEmpty_; } else { return IgnoreEmptyDefaultValue; } }
      set {
        _hasBits0 |= 8;
        ignoreEmpty_ = value;
      }
    }
    /// <summary>Gets whether the "ignore_empty" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIgnoreEmpty {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "ignore_empty" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIgnoreEmpty() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as MapRules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(MapRules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MinPairs != other.MinPairs) return false;
      if (MaxPairs != other.MaxPairs) return false;
      if (NoSparse != other.NoSparse) return false;
      if (!object.Equals(Keys, other.Keys)) return false;
      if (!object.Equals(Values, other.Values)) return false;
      if (IgnoreEmpty != other.IgnoreEmpty) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMinPairs) hash ^= MinPairs.GetHashCode();
      if (HasMaxPairs) hash ^= MaxPairs.GetHashCode();
      if (HasNoSparse) hash ^= NoSparse.GetHashCode();
      if (keys_ != null) hash ^= Keys.GetHashCode();
      if (values_ != null) hash ^= Values.GetHashCode();
      if (HasIgnoreEmpty) hash ^= IgnoreEmpty.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMinPairs) {
        output.WriteRawTag(8);
        output.WriteUInt64(MinPairs);
      }
      if (HasMaxPairs) {
        output.WriteRawTag(16);
        output.WriteUInt64(MaxPairs);
      }
      if (HasNoSparse) {
        output.WriteRawTag(24);
        output.WriteBool(NoSparse);
      }
      if (keys_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Keys);
      }
      if (values_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Values);
      }
      if (HasIgnoreEmpty) {
        output.WriteRawTag(48);
        output.WriteBool(IgnoreEmpty);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMinPairs) {
        output.WriteRawTag(8);
        output.WriteUInt64(MinPairs);
      }
      if (HasMaxPairs) {
        output.WriteRawTag(16);
        output.WriteUInt64(MaxPairs);
      }
      if (HasNoSparse) {
        output.WriteRawTag(24);
        output.WriteBool(NoSparse);
      }
      if (keys_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Keys);
      }
      if (values_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Values);
      }
      if (HasIgnoreEmpty) {
        output.WriteRawTag(48);
        output.WriteBool(IgnoreEmpty);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasMinPairs) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MinPairs);
      }
      if (HasMaxPairs) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MaxPairs);
      }
      if (HasNoSparse) {
        size += 1 + 1;
      }
      if (keys_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Keys);
      }
      if (values_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Values);
      }
      if (HasIgnoreEmpty) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(MapRules other) {
      if (other == null) {
        return;
      }
      if (other.HasMinPairs) {
        MinPairs = other.MinPairs;
      }
      if (other.HasMaxPairs) {
        MaxPairs = other.MaxPairs;
      }
      if (other.HasNoSparse) {
        NoSparse = other.NoSparse;
      }
      if (other.keys_ != null) {
        if (keys_ == null) {
          Keys = new global::Validate.FieldRules();
        }
        Keys.MergeFrom(other.Keys);
      }
      if (other.values_ != null) {
        if (values_ == null) {
          Values = new global::Validate.FieldRules();
        }
        Values.MergeFrom(other.Values);
      }
      if (other.HasIgnoreEmpty) {
        IgnoreEmpty = other.IgnoreEmpty;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MinPairs = input.ReadUInt64();
            break;
          }
          case 16: {
            MaxPairs = input.ReadUInt64();
            break;
          }
          case 24: {
            NoSparse = input.ReadBool();
            break;
          }
          case 34: {
            if (keys_ == null) {
              Keys = new global::Validate.FieldRules();
            }
            input.ReadMessage(Keys);
            break;
          }
          case 42: {
            if (values_ == null) {
              Values = new global::Validate.FieldRules();
            }
            input.ReadMessage(Values);
            break;
          }
          case 48: {
            IgnoreEmpty = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MinPairs = input.ReadUInt64();
            break;
          }
          case 16: {
            MaxPairs = input.ReadUInt64();
            break;
          }
          case 24: {
            NoSparse = input.ReadBool();
            break;
          }
          case 34: {
            if (keys_ == null) {
              Keys = new global::Validate.FieldRules();
            }
            input.ReadMessage(Keys);
            break;
          }
          case 42: {
            if (values_ == null) {
              Values = new global::Validate.FieldRules();
            }
            input.ReadMessage(Values);
            break;
          }
          case 48: {
            IgnoreEmpty = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// AnyRules describe constraints applied exclusively to the
  /// `google.protobuf.Any` well-known type
  /// </summary>
  public sealed partial class AnyRules : pb::IMessage<AnyRules>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AnyRules> _parser = new pb::MessageParser<AnyRules>(() => new AnyRules());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AnyRules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Validate.ValidateReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AnyRules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AnyRules(AnyRules other) : this() {
      _hasBits0 = other._hasBits0;
      required_ = other.required_;
      in_ = other.in_.Clone();
      notIn_ = other.notIn_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AnyRules Clone() {
      return new AnyRules(this);
    }

    /// <summary>Field number for the "required" field.</summary>
    public const int RequiredFieldNumber = 1;
    private readonly static bool RequiredDefaultValue = false;

    private bool required_;
    /// <summary>
    /// Required specifies that this field must be set
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Required {
      get { if ((_hasBits0 & 1) != 0) { return required_; } else { return RequiredDefaultValue; } }
      set {
        _hasBits0 |= 1;
        required_ = value;
      }
    }
    /// <summary>Gets whether the "required" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRequired {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "required" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRequired() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "in" field.</summary>
    public const int InFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_in_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> in_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// In specifies that this field's `type_url` must be equal to one of the
    /// specified values.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> In {
      get { return in_; }
    }

    /// <summary>Field number for the "not_in" field.</summary>
    public const int NotInFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_notIn_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> notIn_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// NotIn specifies that this field's `type_url` must not be equal to any of
    /// the specified values.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> NotIn {
      get { return notIn_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AnyRules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AnyRules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Required != other.Required) return false;
      if(!in_.Equals(other.in_)) return false;
      if(!notIn_.Equals(other.notIn_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRequired) hash ^= Required.GetHashCode();
      hash ^= in_.GetHashCode();
      hash ^= notIn_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasRequired) {
        output.WriteRawTag(8);
        output.WriteBool(Required);
      }
      in_.WriteTo(output, _repeated_in_codec);
      notIn_.WriteTo(output, _repeated_notIn_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasRequired) {
        output.WriteRawTag(8);
        output.WriteBool(Required);
      }
      in_.WriteTo(ref output, _repeated_in_codec);
      notIn_.WriteTo(ref output, _repeated_notIn_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasRequired) {
        size += 1 + 1;
      }
      size += in_.CalculateSize(_repeated_in_codec);
      size += notIn_.CalculateSize(_repeated_notIn_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AnyRules other) {
      if (other == null) {
        return;
      }
      if (other.HasRequired) {
        Required = other.Required;
      }
      in_.Add(other.in_);
      notIn_.Add(other.notIn_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Required = input.ReadBool();
            break;
          }
          case 18: {
            in_.AddEntriesFrom(input, _repeated_in_codec);
            break;
          }
          case 26: {
            notIn_.AddEntriesFrom(input, _repeated_notIn_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Required = input.ReadBool();
            break;
          }
          case 18: {
            in_.AddEntriesFrom(ref input, _repeated_in_codec);
            break;
          }
          case 26: {
            notIn_.AddEntriesFrom(ref input, _repeated_notIn_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// DurationRules describe the constraints applied exclusively to the
  /// `google.protobuf.Duration` well-known type
  /// </summary>
  public sealed partial class DurationRules : pb::IMessage<DurationRules>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DurationRules> _parser = new pb::MessageParser<DurationRules>(() => new DurationRules());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<DurationRules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Validate.ValidateReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DurationRules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DurationRules(DurationRules other) : this() {
      _hasBits0 = other._hasBits0;
      required_ = other.required_;
      const_ = other.const_ != null ? other.const_.Clone() : null;
      lt_ = other.lt_ != null ? other.lt_.Clone() : null;
      lte_ = other.lte_ != null ? other.lte_.Clone() : null;
      gt_ = other.gt_ != null ? other.gt_.Clone() : null;
      gte_ = other.gte_ != null ? other.gte_.Clone() : null;
      in_ = other.in_.Clone();
      notIn_ = other.notIn_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DurationRules Clone() {
      return new DurationRules(this);
    }

    /// <summary>Field number for the "required" field.</summary>
    public const int RequiredFieldNumber = 1;
    private readonly static bool RequiredDefaultValue = false;

    private bool required_;
    /// <summary>
    /// Required specifies that this field must be set
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Required {
      get { if ((_hasBits0 & 1) != 0) { return required_; } else { return RequiredDefaultValue; } }
      set {
        _hasBits0 |= 1;
        required_ = value;
      }
    }
    /// <summary>Gets whether the "required" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRequired {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "required" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRequired() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "const" field.</summary>
    public const int ConstFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Duration const_;
    /// <summary>
    /// Const specifies that this field must be exactly the specified value
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Duration Const {
      get { return const_; }
      set {
        const_ = value;
      }
    }

    /// <summary>Field number for the "lt" field.</summary>
    public const int LtFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Duration lt_;
    /// <summary>
    /// Lt specifies that this field must be less than the specified value,
    /// exclusive
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Duration Lt {
      get { return lt_; }
      set {
        lt_ = value;
      }
    }

    /// <summary>Field number for the "lte" field.</summary>
    public const int LteFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Duration lte_;
    /// <summary>
    /// Lt specifies that this field must be less than the specified value,
    /// inclusive
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Duration Lte {
      get { return lte_; }
      set {
        lte_ = value;
      }
    }

    /// <summary>Field number for the "gt" field.</summary>
    public const int GtFieldNumber = 5;
    private global::Google.Protobuf.WellKnownTypes.Duration gt_;
    /// <summary>
    /// Gt specifies that this field must be greater than the specified value,
    /// exclusive
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Duration Gt {
      get { return gt_; }
      set {
        gt_ = value;
      }
    }

    /// <summary>Field number for the "gte" field.</summary>
    public const int GteFieldNumber = 6;
    private global::Google.Protobuf.WellKnownTypes.Duration gte_;
    /// <summary>
    /// Gte specifies that this field must be greater than the specified value,
    /// inclusive
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Duration Gte {
      get { return gte_; }
      set {
        gte_ = value;
      }
    }

    /// <summary>Field number for the "in" field.</summary>
    public const int InFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Google.Protobuf.WellKnownTypes.Duration> _repeated_in_codec
        = pb::FieldCodec.ForMessage(58, global::Google.Protobuf.WellKnownTypes.Duration.Parser);
    private readonly pbc::RepeatedField<global::Google.Protobuf.WellKnownTypes.Duration> in_ = new pbc::RepeatedField<global::Google.Protobuf.WellKnownTypes.Duration>();
    /// <summary>
    /// In specifies that this field must be equal to one of the specified
    /// values
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Google.Protobuf.WellKnownTypes.Duration> In {
      get { return in_; }
    }

    /// <summary>Field number for the "not_in" field.</summary>
    public const int NotInFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Google.Protobuf.WellKnownTypes.Duration> _repeated_notIn_codec
        = pb::FieldCodec.ForMessage(66, global::Google.Protobuf.WellKnownTypes.Duration.Parser);
    private readonly pbc::RepeatedField<global::Google.Protobuf.WellKnownTypes.Duration> notIn_ = new pbc::RepeatedField<global::Google.Protobuf.WellKnownTypes.Duration>();
    /// <summary>
    /// NotIn specifies that this field cannot be equal to one of the specified
    /// values
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Google.Protobuf.WellKnownTypes.Duration> NotIn {
      get { return notIn_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as DurationRules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(DurationRules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Required != other.Required) return false;
      if (!object.Equals(Const, other.Const)) return false;
      if (!object.Equals(Lt, other.Lt)) return false;
      if (!object.Equals(Lte, other.Lte)) return false;
      if (!object.Equals(Gt, other.Gt)) return false;
      if (!object.Equals(Gte, other.Gte)) return false;
      if(!in_.Equals(other.in_)) return false;
      if(!notIn_.Equals(other.notIn_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRequired) hash ^= Required.GetHashCode();
      if (const_ != null) hash ^= Const.GetHashCode();
      if (lt_ != null) hash ^= Lt.GetHashCode();
      if (lte_ != null) hash ^= Lte.GetHashCode();
      if (gt_ != null) hash ^= Gt.GetHashCode();
      if (gte_ != null) hash ^= Gte.GetHashCode();
      hash ^= in_.GetHashCode();
      hash ^= notIn_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasRequired) {
        output.WriteRawTag(8);
        output.WriteBool(Required);
      }
      if (const_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Const);
      }
      if (lt_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Lt);
      }
      if (lte_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Lte);
      }
      if (gt_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Gt);
      }
      if (gte_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Gte);
      }
      in_.WriteTo(output, _repeated_in_codec);
      notIn_.WriteTo(output, _repeated_notIn_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasRequired) {
        output.WriteRawTag(8);
        output.WriteBool(Required);
      }
      if (const_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Const);
      }
      if (lt_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Lt);
      }
      if (lte_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Lte);
      }
      if (gt_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Gt);
      }
      if (gte_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Gte);
      }
      in_.WriteTo(ref output, _repeated_in_codec);
      notIn_.WriteTo(ref output, _repeated_notIn_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasRequired) {
        size += 1 + 1;
      }
      if (const_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Const);
      }
      if (lt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Lt);
      }
      if (lte_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Lte);
      }
      if (gt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Gt);
      }
      if (gte_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Gte);
      }
      size += in_.CalculateSize(_repeated_in_codec);
      size += notIn_.CalculateSize(_repeated_notIn_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(DurationRules other) {
      if (other == null) {
        return;
      }
      if (other.HasRequired) {
        Required = other.Required;
      }
      if (other.const_ != null) {
        if (const_ == null) {
          Const = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        Const.MergeFrom(other.Const);
      }
      if (other.lt_ != null) {
        if (lt_ == null) {
          Lt = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        Lt.MergeFrom(other.Lt);
      }
      if (other.lte_ != null) {
        if (lte_ == null) {
          Lte = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        Lte.MergeFrom(other.Lte);
      }
      if (other.gt_ != null) {
        if (gt_ == null) {
          Gt = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        Gt.MergeFrom(other.Gt);
      }
      if (other.gte_ != null) {
        if (gte_ == null) {
          Gte = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        Gte.MergeFrom(other.Gte);
      }
      in_.Add(other.in_);
      notIn_.Add(other.notIn_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Required = input.ReadBool();
            break;
          }
          case 18: {
            if (const_ == null) {
              Const = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(Const);
            break;
          }
          case 26: {
            if (lt_ == null) {
              Lt = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(Lt);
            break;
          }
          case 34: {
            if (lte_ == null) {
              Lte = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(Lte);
            break;
          }
          case 42: {
            if (gt_ == null) {
              Gt = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(Gt);
            break;
          }
          case 50: {
            if (gte_ == null) {
              Gte = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(Gte);
            break;
          }
          case 58: {
            in_.AddEntriesFrom(input, _repeated_in_codec);
            break;
          }
          case 66: {
            notIn_.AddEntriesFrom(input, _repeated_notIn_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Required = input.ReadBool();
            break;
          }
          case 18: {
            if (const_ == null) {
              Const = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(Const);
            break;
          }
          case 26: {
            if (lt_ == null) {
              Lt = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(Lt);
            break;
          }
          case 34: {
            if (lte_ == null) {
              Lte = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(Lte);
            break;
          }
          case 42: {
            if (gt_ == null) {
              Gt = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(Gt);
            break;
          }
          case 50: {
            if (gte_ == null) {
              Gte = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(Gte);
            break;
          }
          case 58: {
            in_.AddEntriesFrom(ref input, _repeated_in_codec);
            break;
          }
          case 66: {
            notIn_.AddEntriesFrom(ref input, _repeated_notIn_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// TimestampRules describe the constraints applied exclusively to the
  /// `google.protobuf.Timestamp` well-known type
  /// </summary>
  public sealed partial class TimestampRules : pb::IMessage<TimestampRules>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TimestampRules> _parser = new pb::MessageParser<TimestampRules>(() => new TimestampRules());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TimestampRules> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Validate.ValidateReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TimestampRules() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TimestampRules(TimestampRules other) : this() {
      _hasBits0 = other._hasBits0;
      required_ = other.required_;
      const_ = other.const_ != null ? other.const_.Clone() : null;
      lt_ = other.lt_ != null ? other.lt_.Clone() : null;
      lte_ = other.lte_ != null ? other.lte_.Clone() : null;
      gt_ = other.gt_ != null ? other.gt_.Clone() : null;
      gte_ = other.gte_ != null ? other.gte_.Clone() : null;
      ltNow_ = other.ltNow_;
      gtNow_ = other.gtNow_;
      within_ = other.within_ != null ? other.within_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TimestampRules Clone() {
      return new TimestampRules(this);
    }

    /// <summary>Field number for the "required" field.</summary>
    public const int RequiredFieldNumber = 1;
    private readonly static bool RequiredDefaultValue = false;

    private bool required_;
    /// <summary>
    /// Required specifies that this field must be set
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Required {
      get { if ((_hasBits0 & 1) != 0) { return required_; } else { return RequiredDefaultValue; } }
      set {
        _hasBits0 |= 1;
        required_ = value;
      }
    }
    /// <summary>Gets whether the "required" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRequired {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "required" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRequired() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "const" field.</summary>
    public const int ConstFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Timestamp const_;
    /// <summary>
    /// Const specifies that this field must be exactly the specified value
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Const {
      get { return const_; }
      set {
        const_ = value;
      }
    }

    /// <summary>Field number for the "lt" field.</summary>
    public const int LtFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp lt_;
    /// <summary>
    /// Lt specifies that this field must be less than the specified value,
    /// exclusive
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Lt {
      get { return lt_; }
      set {
        lt_ = value;
      }
    }

    /// <summary>Field number for the "lte" field.</summary>
    public const int LteFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Timestamp lte_;
    /// <summary>
    /// Lte specifies that this field must be less than the specified value,
    /// inclusive
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Lte {
      get { return lte_; }
      set {
        lte_ = value;
      }
    }

    /// <summary>Field number for the "gt" field.</summary>
    public const int GtFieldNumber = 5;
    private global::Google.Protobuf.WellKnownTypes.Timestamp gt_;
    /// <summary>
    /// Gt specifies that this field must be greater than the specified value,
    /// exclusive
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Gt {
      get { return gt_; }
      set {
        gt_ = value;
      }
    }

    /// <summary>Field number for the "gte" field.</summary>
    public const int GteFieldNumber = 6;
    private global::Google.Protobuf.WellKnownTypes.Timestamp gte_;
    /// <summary>
    /// Gte specifies that this field must be greater than the specified value,
    /// inclusive
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Gte {
      get { return gte_; }
      set {
        gte_ = value;
      }
    }

    /// <summary>Field number for the "lt_now" field.</summary>
    public const int LtNowFieldNumber = 7;
    private readonly static bool LtNowDefaultValue = false;

    private bool ltNow_;
    /// <summary>
    /// LtNow specifies that this must be less than the current time. LtNow
    /// can only be used with the Within rule.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool LtNow {
      get { if ((_hasBits0 & 2) != 0) { return ltNow_; } else { return LtNowDefaultValue; } }
      set {
        _hasBits0 |= 2;
        ltNow_ = value;
      }
    }
    /// <summary>Gets whether the "lt_now" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLtNow {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "lt_now" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLtNow() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "gt_now" field.</summary>
    public const int GtNowFieldNumber = 8;
    private readonly static bool GtNowDefaultValue = false;

    private bool gtNow_;
    /// <summary>
    /// GtNow specifies that this must be greater than the current time. GtNow
    /// can only be used with the Within rule.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool GtNow {
      get { if ((_hasBits0 & 4) != 0) { return gtNow_; } else { return GtNowDefaultValue; } }
      set {
        _hasBits0 |= 4;
        gtNow_ = value;
      }
    }
    /// <summary>Gets whether the "gt_now" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGtNow {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "gt_now" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGtNow() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "within" field.</summary>
    public const int WithinFieldNumber = 9;
    private global::Google.Protobuf.WellKnownTypes.Duration within_;
    /// <summary>
    /// Within specifies that this field must be within this duration of the
    /// current time. This constraint can be used alone or with the LtNow and
    /// GtNow rules.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Duration Within {
      get { return within_; }
      set {
        within_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TimestampRules);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TimestampRules other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Required != other.Required) return false;
      if (!object.Equals(Const, other.Const)) return false;
      if (!object.Equals(Lt, other.Lt)) return false;
      if (!object.Equals(Lte, other.Lte)) return false;
      if (!object.Equals(Gt, other.Gt)) return false;
      if (!object.Equals(Gte, other.Gte)) return false;
      if (LtNow != other.LtNow) return false;
      if (GtNow != other.GtNow) return false;
      if (!object.Equals(Within, other.Within)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRequired) hash ^= Required.GetHashCode();
      if (const_ != null) hash ^= Const.GetHashCode();
      if (lt_ != null) hash ^= Lt.GetHashCode();
      if (lte_ != null) hash ^= Lte.GetHashCode();
      if (gt_ != null) hash ^= Gt.GetHashCode();
      if (gte_ != null) hash ^= Gte.GetHashCode();
      if (HasLtNow) hash ^= LtNow.GetHashCode();
      if (HasGtNow) hash ^= GtNow.GetHashCode();
      if (within_ != null) hash ^= Within.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasRequired) {
        output.WriteRawTag(8);
        output.WriteBool(Required);
      }
      if (const_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Const);
      }
      if (lt_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Lt);
      }
      if (lte_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Lte);
      }
      if (gt_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Gt);
      }
      if (gte_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Gte);
      }
      if (HasLtNow) {
        output.WriteRawTag(56);
        output.WriteBool(LtNow);
      }
      if (HasGtNow) {
        output.WriteRawTag(64);
        output.WriteBool(GtNow);
      }
      if (within_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Within);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasRequired) {
        output.WriteRawTag(8);
        output.WriteBool(Required);
      }
      if (const_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Const);
      }
      if (lt_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Lt);
      }
      if (lte_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Lte);
      }
      if (gt_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Gt);
      }
      if (gte_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Gte);
      }
      if (HasLtNow) {
        output.WriteRawTag(56);
        output.WriteBool(LtNow);
      }
      if (HasGtNow) {
        output.WriteRawTag(64);
        output.WriteBool(GtNow);
      }
      if (within_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Within);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasRequired) {
        size += 1 + 1;
      }
      if (const_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Const);
      }
      if (lt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Lt);
      }
      if (lte_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Lte);
      }
      if (gt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Gt);
      }
      if (gte_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Gte);
      }
      if (HasLtNow) {
        size += 1 + 1;
      }
      if (HasGtNow) {
        size += 1 + 1;
      }
      if (within_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Within);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TimestampRules other) {
      if (other == null) {
        return;
      }
      if (other.HasRequired) {
        Required = other.Required;
      }
      if (other.const_ != null) {
        if (const_ == null) {
          Const = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Const.MergeFrom(other.Const);
      }
      if (other.lt_ != null) {
        if (lt_ == null) {
          Lt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Lt.MergeFrom(other.Lt);
      }
      if (other.lte_ != null) {
        if (lte_ == null) {
          Lte = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Lte.MergeFrom(other.Lte);
      }
      if (other.gt_ != null) {
        if (gt_ == null) {
          Gt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Gt.MergeFrom(other.Gt);
      }
      if (other.gte_ != null) {
        if (gte_ == null) {
          Gte = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Gte.MergeFrom(other.Gte);
      }
      if (other.HasLtNow) {
        LtNow = other.LtNow;
      }
      if (other.HasGtNow) {
        GtNow = other.GtNow;
      }
      if (other.within_ != null) {
        if (within_ == null) {
          Within = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        Within.MergeFrom(other.Within);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Required = input.ReadBool();
            break;
          }
          case 18: {
            if (const_ == null) {
              Const = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Const);
            break;
          }
          case 26: {
            if (lt_ == null) {
              Lt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Lt);
            break;
          }
          case 34: {
            if (lte_ == null) {
              Lte = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Lte);
            break;
          }
          case 42: {
            if (gt_ == null) {
              Gt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Gt);
            break;
          }
          case 50: {
            if (gte_ == null) {
              Gte = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Gte);
            break;
          }
          case 56: {
            LtNow = input.ReadBool();
            break;
          }
          case 64: {
            GtNow = input.ReadBool();
            break;
          }
          case 74: {
            if (within_ == null) {
              Within = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(Within);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Required = input.ReadBool();
            break;
          }
          case 18: {
            if (const_ == null) {
              Const = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Const);
            break;
          }
          case 26: {
            if (lt_ == null) {
              Lt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Lt);
            break;
          }
          case 34: {
            if (lte_ == null) {
              Lte = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Lte);
            break;
          }
          case 42: {
            if (gt_ == null) {
              Gt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Gt);
            break;
          }
          case 50: {
            if (gte_ == null) {
              Gte = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Gte);
            break;
          }
          case 56: {
            LtNow = input.ReadBool();
            break;
          }
          case 64: {
            GtNow = input.ReadBool();
            break;
          }
          case 74: {
            if (within_ == null) {
              Within = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(Within);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
